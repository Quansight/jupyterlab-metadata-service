// see: https://github.com/Cardinal90/graphql-union-input-type/issues/9
const {
  GraphQLList,
  GraphQLString,
  GraphQLBoolean,
  GraphQLInt,
  GraphQLFloat,
  GraphQLInputObjectType
} = require('graphql');

const { makeExecutableSchema } = require('apollo-server');
const UnionInputType = require('graphql-union-input-type');

const { 
  GenderTypeEnum, 
  MapCategoryTypeEnum, 
  ContactPointOptionEnum, 
  DigitalDocumentPermissionTypeEnum, 
  PaymentStatusTypeEnum, 
  MusicAlbumReleaseTypeEnum, 
  GameServerStatusEnum, 
  OfferItemConditionEnum, 
  RestrictedDietEnum, 
  QualitativeValueEnum, 
  PaymentMethodEnum, 
  OrderStatusEnum, 
  BookFormatTypeEnum, 
  ItemListOrderTypeEnum, 
  WarrantyScopeEnum, 
  DeliveryMethodEnum, 
  ActionStatusTypeEnum, 
  MusicAlbumProductionTypeEnum, 
  SpecialtyEnum, 
  ItemAvailabilityEnum, 
  BusinessFunctionEnum, 
  RsvpResponseTypeEnum, 
  BusinessEntityTypeEnum, 
  ReservationStatusTypeEnum, 
  BoardingPolicyTypeEnum, 
  MusicReleaseFormatTypeEnum, 
  DayOfWeekEnum, 
  EventStatusTypeEnum, 
  GamePlayModeEnum, 

} = require('./schemaorg-enum');

let schema;

/* input types definition */

const UserLikesInput = new GraphQLInputObjectType({
  name: 'UserLikesInput',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const CafeOrCoffeeShopInput = new GraphQLInputObjectType({
  name: 'CafeOrCoffeeShopInput',
  fields: () => ({
    servesCuisine: { type: GraphQLList(GraphQLString) },
    hasMenu: { type: GraphQLList(Menu) },
    menu: { type: GraphQLList(Menu) },
    starRating: { type: GraphQLList(Rating) },
    acceptsReservations: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const FoodServiceInput = new GraphQLInputObjectType({
  name: 'FoodServiceInput',
  fields: () => ({
    serviceArea: { type: GraphQLList(serviceArea) },
    provider: { type: GraphQLList(provider) },
    serviceAudience: { type: GraphQLList(Audience) },
    audience: { type: GraphQLList(Audience) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    hoursAvailable: { type: GraphQLList(OpeningHoursSpecification) },
    providerMobility: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    broker: { type: GraphQLList(broker) },
    serviceOutput: { type: GraphQLList(Thing) },
    logo: { type: GraphQLList(ImageObject) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    availableChannel: { type: GraphQLList(ServiceChannel) },
    review: { type: GraphQLList(Review) },
    serviceType: { type: GraphQLList(GraphQLString) },
    produces: { type: GraphQLList(Thing) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const RecipeInput = new GraphQLInputObjectType({
  name: 'RecipeInput',
  fields: () => ({
    recipeYield: { type: GraphQLList(QuantitativeValue) },
    recipeCategory: { type: GraphQLList(GraphQLString) },
    recipeIngredient: { type: GraphQLList(GraphQLString) },
    recipeInstructions: { type: GraphQLList(recipeInstructions) },
    nutrition: { type: GraphQLList(NutritionInformation) },
    suitableForDiet: { type: GraphQLList(RestrictedDiet) },
    recipeCuisine: { type: GraphQLList(GraphQLString) },
    cookTime: { type: GraphQLList(Duration) },
    cookingMethod: { type: GraphQLList(GraphQLString) },
    ingredients: { type: GraphQLList(GraphQLString) },
    steps: { type: GraphQLList(steps) },
    prepTime: { type: GraphQLList(Duration) },
    step: { type: GraphQLList(step) },
    tool: { type: GraphQLList(HowToTool) },
    performTime: { type: GraphQLList(Duration) },
    estimatedCost: { type: GraphQLList(MonetaryAmount) },
    totalTime: { type: GraphQLList(Duration) },
    supply: { type: GraphQLList(HowToSupply) },
    yield: { type: GraphQLList(QuantitativeValue) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const PhotographInput = new GraphQLInputObjectType({
  name: 'PhotographInput',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const VolcanoInput = new GraphQLInputObjectType({
  name: 'VolcanoInput',
  fields: () => ({
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const SportsTeamInput = new GraphQLInputObjectType({
  name: 'SportsTeamInput',
  fields: () => ({
    athlete: { type: GraphQLList(Person) },
    coach: { type: GraphQLList(Person) },
    sport: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const GroceryStoreInput = new GraphQLInputObjectType({
  name: 'GroceryStoreInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const DemandInput = new GraphQLInputObjectType({
  name: 'DemandInput',
  fields: () => ({
    sku: { type: GraphQLList(GraphQLString) },
    availabilityStarts: { type: GraphQLList(GraphQLString) },
    availableDeliveryMethod: { type: GraphQLList(DeliveryMethod) },
    mpn: { type: GraphQLList(GraphQLString) },
    serialNumber: { type: GraphQLList(GraphQLString) },
    ineligibleRegion: { type: GraphQLList(ineligibleRegion) },
    gtin8: { type: GraphQLList(GraphQLString) },
    availability: { type: GraphQLList(ItemAvailability) },
    priceSpecification: { type: GraphQLList(PriceSpecification) },
    inventoryLevel: { type: GraphQLList(QuantitativeValue) },
    eligibleTransactionVolume: { type: GraphQLList(PriceSpecification) },
    availableAtOrFrom: { type: GraphQLList(Place) },
    warranty: { type: GraphQLList(WarrantyPromise) },
    eligibleQuantity: { type: GraphQLList(QuantitativeValue) },
    validFrom: { type: GraphQLList(GraphQLString) },
    validThrough: { type: GraphQLList(GraphQLString) },
    gtin14: { type: GraphQLList(GraphQLString) },
    gtin13: { type: GraphQLList(GraphQLString) },
    gtin12: { type: GraphQLList(GraphQLString) },
    seller: { type: GraphQLList(seller) },
    deliveryLeadTime: { type: GraphQLList(QuantitativeValue) },
    availabilityEnds: { type: GraphQLList(GraphQLString) },
    includesObject: { type: GraphQLList(TypeAndQuantityNode) },
    businessFunction: { type: GraphQLList(BusinessFunction) },
    eligibleCustomerType: { type: GraphQLList(BusinessEntityType) },
    itemCondition: { type: GraphQLList(OfferItemCondition) },
    itemOffered: { type: GraphQLList(itemOffered) },
    eligibleDuration: { type: GraphQLList(QuantitativeValue) },
    acceptedPaymentMethod: { type: GraphQLList(acceptedPaymentMethod) },
    areaServed: { type: GraphQLList(areaServed) },
    eligibleRegion: { type: GraphQLList(eligibleRegion) },
    advanceBookingRequirement: { type: GraphQLList(QuantitativeValue) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const AboutPageInput = new GraphQLInputObjectType({
  name: 'AboutPageInput',
  fields: () => ({
    speakable: { type: GraphQLList(SpeakableSpecification) },
    breadcrumb: { type: GraphQLList(BreadcrumbList) },
    significantLink: { type: GraphQLList(GraphQLString) },
    relatedLink: { type: GraphQLList(GraphQLString) },
    lastReviewed: { type: GraphQLList(GraphQLString) },
    mainContentOfPage: { type: GraphQLList(WebPageElement) },
    reviewedBy: { type: GraphQLList(reviewedBy) },
    primaryImageOfPage: { type: GraphQLList(ImageObject) },
    significantLinks: { type: GraphQLList(GraphQLString) },
    specialty: { type: GraphQLList(Specialty) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ExerciseActionInput = new GraphQLInputObjectType({
  name: 'ExerciseActionInput',
  fields: () => ({
    course: { type: GraphQLList(Place) },
    sportsTeam: { type: GraphQLList(SportsTeam) },
    sportsEvent: { type: GraphQLList(SportsEvent) },
    distance: { type: GraphQLList(Distance) },
    opponent: { type: GraphQLList(Person) },
    sportsActivityLocation: { type: GraphQLList(SportsActivityLocation) },
    toLocation: { type: GraphQLList(Place) },
    fromLocation: { type: GraphQLList(Place) },
    exerciseCourse: { type: GraphQLList(Place) },
    audience: { type: GraphQLList(Audience) },
    event: { type: GraphQLList(Event) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const UserPlaysInput = new GraphQLInputObjectType({
  name: 'UserPlaysInput',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const StadiumOrArenaInput = new GraphQLInputObjectType({
  name: 'StadiumOrArenaInput',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    members: { type: GraphQLList(members) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    employees: { type: GraphQLList(Person) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },

  })
});

const TripInput = new GraphQLInputObjectType({
  name: 'TripInput',
  fields: () => ({
    departureStation: { type: GraphQLList(TrainStation) },
    arrivalPlatform: { type: GraphQLList(GraphQLString) },
    departurePlatform: { type: GraphQLList(GraphQLString) },
    trainName: { type: GraphQLList(GraphQLString) },
    trainNumber: { type: GraphQLList(GraphQLString) },
    arrivalStation: { type: GraphQLList(TrainStation) },
    provider: { type: GraphQLList(provider) },
    offers: { type: GraphQLList(Offer) },
    arrivalTime: { type: GraphQLList(GraphQLString) },
    departureTime: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const DatasetInput = new GraphQLInputObjectType({
  name: 'DatasetInput',
  fields: () => ({
    dataFeedElement: { type: GraphQLList(dataFeedElement) },
    includedInDataCatalog: { type: GraphQLList(DataCatalog) },
    datasetTimeInterval: { type: GraphQLList(GraphQLString) },
    issn: { type: GraphQLList(GraphQLString) },
    catalog: { type: GraphQLList(DataCatalog) },
    includedDataCatalog: { type: GraphQLList(DataCatalog) },
    distribution: { type: GraphQLList(DataDownload) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ActionInput = new GraphQLInputObjectType({
  name: 'ActionInput',
  fields: () => ({
    toLocation: { type: GraphQLList(Place) },
    fromLocation: { type: GraphQLList(Place) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const InsuranceAgencyInput = new GraphQLInputObjectType({
  name: 'InsuranceAgencyInput',
  fields: () => ({
    feesAndCommissionsSpecification: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const AudioObjectInput = new GraphQLInputObjectType({
  name: 'AudioObjectInput',
  fields: () => ({
    transcript: { type: GraphQLList(GraphQLString) },
    caption: { type: GraphQLList(MediaObject) },
    startTime: { type: GraphQLList(GraphQLString) },
    uploadDate: { type: GraphQLList(GraphQLString) },
    playerType: { type: GraphQLList(GraphQLString) },
    height: { type: GraphQLList(height) },
    bitrate: { type: GraphQLList(GraphQLString) },
    requiresSubscription: { type: GraphQLList(MediaSubscription) },
    regionsAllowed: { type: GraphQLList(Place) },
    endTime: { type: GraphQLList(GraphQLString) },
    contentSize: { type: GraphQLList(GraphQLString) },
    embedUrl: { type: GraphQLList(GraphQLString) },
    width: { type: GraphQLList(width) },
    contentUrl: { type: GraphQLList(GraphQLString) },
    associatedArticle: { type: GraphQLList(NewsArticle) },
    productionCompany: { type: GraphQLList(Organization) },
    duration: { type: GraphQLList(Duration) },
    encodesCreativeWork: { type: GraphQLList(CreativeWork) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const TaxiReservationInput = new GraphQLInputObjectType({
  name: 'TaxiReservationInput',
  fields: () => ({
    partySize: { type: GraphQLList(QuantitativeValue) },
    pickupLocation: { type: GraphQLList(Place) },
    pickupTime: { type: GraphQLList(GraphQLString) },
    provider: { type: GraphQLList(provider) },
    programMembershipUsed: { type: GraphQLList(ProgramMembership) },
    reservationStatus: { type: GraphQLList(ReservationStatusType) },
    underName: { type: GraphQLList(underName) },
    bookingAgent: { type: GraphQLList(bookingAgent) },
    totalPrice: { type: GraphQLList(PriceSpecification) },
    reservationFor: { type: GraphQLList(Thing) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    broker: { type: GraphQLList(broker) },
    modifiedTime: { type: GraphQLList(GraphQLString) },
    bookingTime: { type: GraphQLList(GraphQLString) },
    reservationId: { type: GraphQLList(GraphQLString) },
    reservedTicket: { type: GraphQLList(Ticket) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const VehicleInput = new GraphQLInputObjectType({
  name: 'VehicleInput',
  fields: () => ({
    productionDate: { type: GraphQLList(GraphQLString) },
    numberOfForwardGears: { type: GraphQLList(QuantitativeValue) },
    cargoVolume: { type: GraphQLList(QuantitativeValue) },
    vehicleInteriorColor: { type: GraphQLList(GraphQLString) },
    steeringPosition: { type: GraphQLList(SteeringPositionValue) },
    vehicleSeatingCapacity: { type: GraphQLList(QuantitativeValue) },
    vehicleEngine: { type: GraphQLList(EngineSpecification) },
    vehicleModelDate: { type: GraphQLList(GraphQLString) },
    numberOfDoors: { type: GraphQLList(QuantitativeValue) },
    vehicleConfiguration: { type: GraphQLList(GraphQLString) },
    fuelType: { type: GraphQLList(QualitativeValue) },
    vehicleIdentificationNumber: { type: GraphQLList(GraphQLString) },
    fuelConsumption: { type: GraphQLList(QuantitativeValue) },
    numberOfPreviousOwners: { type: GraphQLList(QuantitativeValue) },
    mileageFromOdometer: { type: GraphQLList(QuantitativeValue) },
    fuelEfficiency: { type: GraphQLList(QuantitativeValue) },
    numberOfAxles: { type: GraphQLList(QuantitativeValue) },
    vehicleInteriorType: { type: GraphQLList(GraphQLString) },
    numberOfAirbags: { type: GraphQLList(GraphQLString) },
    vehicleTransmission: { type: GraphQLList(QualitativeValue) },
    dateVehicleFirstRegistered: { type: GraphQLList(GraphQLString) },
    purchaseDate: { type: GraphQLList(GraphQLString) },
    knownVehicleDamages: { type: GraphQLList(GraphQLString) },
    driveWheelConfiguration: { type: GraphQLList(DriveWheelConfigurationValue) },
    manufacturer: { type: GraphQLList(Organization) },
    sku: { type: GraphQLList(GraphQLString) },
    audience: { type: GraphQLList(Audience) },
    mpn: { type: GraphQLList(GraphQLString) },
    height: { type: GraphQLList(height) },
    gtin8: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    isConsumableFor: { type: GraphQLList(Product) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    width: { type: GraphQLList(width) },
    awards: { type: GraphQLList(GraphQLString) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    isAccessoryOrSparePartFor: { type: GraphQLList(Product) },
    logo: { type: GraphQLList(ImageObject) },
    gtin14: { type: GraphQLList(GraphQLString) },
    gtin13: { type: GraphQLList(GraphQLString) },
    gtin12: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    weight: { type: GraphQLList(QuantitativeValue) },
    depth: { type: GraphQLList(depth) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    model: { type: GraphQLList(ProductModel) },
    color: { type: GraphQLList(GraphQLString) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    productID: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    itemCondition: { type: GraphQLList(OfferItemCondition) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    releaseDate: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const AutoPartsStoreInput = new GraphQLInputObjectType({
  name: 'AutoPartsStoreInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const WPAdBlockInput = new GraphQLInputObjectType({
  name: 'WPAdBlockInput',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const SomeProductsInput = new GraphQLInputObjectType({
  name: 'SomeProductsInput',
  fields: () => ({
    inventoryLevel: { type: GraphQLList(QuantitativeValue) },
    manufacturer: { type: GraphQLList(Organization) },
    sku: { type: GraphQLList(GraphQLString) },
    productionDate: { type: GraphQLList(GraphQLString) },
    audience: { type: GraphQLList(Audience) },
    mpn: { type: GraphQLList(GraphQLString) },
    height: { type: GraphQLList(height) },
    gtin8: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    isConsumableFor: { type: GraphQLList(Product) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    width: { type: GraphQLList(width) },
    awards: { type: GraphQLList(GraphQLString) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    isAccessoryOrSparePartFor: { type: GraphQLList(Product) },
    logo: { type: GraphQLList(ImageObject) },
    gtin14: { type: GraphQLList(GraphQLString) },
    gtin13: { type: GraphQLList(GraphQLString) },
    gtin12: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    weight: { type: GraphQLList(QuantitativeValue) },
    depth: { type: GraphQLList(depth) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    model: { type: GraphQLList(ProductModel) },
    color: { type: GraphQLList(GraphQLString) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    productID: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    purchaseDate: { type: GraphQLList(GraphQLString) },
    itemCondition: { type: GraphQLList(OfferItemCondition) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    releaseDate: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const MoveActionInput = new GraphQLInputObjectType({
  name: 'MoveActionInput',
  fields: () => ({
    distance: { type: GraphQLList(Distance) },
    toLocation: { type: GraphQLList(Place) },
    fromLocation: { type: GraphQLList(Place) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const CreativeWorkInput = new GraphQLInputObjectType({
  name: 'CreativeWorkInput',
  fields: () => ({
    startTime: { type: GraphQLList(GraphQLString) },
    uploadDate: { type: GraphQLList(GraphQLString) },
    playerType: { type: GraphQLList(GraphQLString) },
    height: { type: GraphQLList(height) },
    bitrate: { type: GraphQLList(GraphQLString) },
    requiresSubscription: { type: GraphQLList(MediaSubscription) },
    regionsAllowed: { type: GraphQLList(Place) },
    endTime: { type: GraphQLList(GraphQLString) },
    contentSize: { type: GraphQLList(GraphQLString) },
    embedUrl: { type: GraphQLList(GraphQLString) },
    width: { type: GraphQLList(width) },
    contentUrl: { type: GraphQLList(GraphQLString) },
    associatedArticle: { type: GraphQLList(NewsArticle) },
    productionCompany: { type: GraphQLList(Organization) },
    duration: { type: GraphQLList(Duration) },
    encodesCreativeWork: { type: GraphQLList(CreativeWork) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const AddActionInput = new GraphQLInputObjectType({
  name: 'AddActionInput',
  fields: () => ({
    toLocation: { type: GraphQLList(Place) },
    collection: { type: GraphQLList(Thing) },
    targetCollection: { type: GraphQLList(Thing) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const JewelryStoreInput = new GraphQLInputObjectType({
  name: 'JewelryStoreInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const ViewActionInput = new GraphQLInputObjectType({
  name: 'ViewActionInput',
  fields: () => ({
    actionAccessibilityRequirement: { type: GraphQLList(ActionAccessSpecification) },
    expectsAcceptanceOf: { type: GraphQLList(Offer) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const WPFooterInput = new GraphQLInputObjectType({
  name: 'WPFooterInput',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const QAPageInput = new GraphQLInputObjectType({
  name: 'QAPageInput',
  fields: () => ({
    speakable: { type: GraphQLList(SpeakableSpecification) },
    breadcrumb: { type: GraphQLList(BreadcrumbList) },
    significantLink: { type: GraphQLList(GraphQLString) },
    relatedLink: { type: GraphQLList(GraphQLString) },
    lastReviewed: { type: GraphQLList(GraphQLString) },
    mainContentOfPage: { type: GraphQLList(WebPageElement) },
    reviewedBy: { type: GraphQLList(reviewedBy) },
    primaryImageOfPage: { type: GraphQLList(ImageObject) },
    significantLinks: { type: GraphQLList(GraphQLString) },
    specialty: { type: GraphQLList(Specialty) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const LikeActionInput = new GraphQLInputObjectType({
  name: 'LikeActionInput',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const PublicationEventInput = new GraphQLInputObjectType({
  name: 'PublicationEventInput',
  fields: () => ({
    publishedOn: { type: GraphQLList(BroadcastService) },
    free: { type: GraphQLList(GraphQLBoolean) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const CourseInput = new GraphQLInputObjectType({
  name: 'CourseInput',
  fields: () => ({
    coursePrerequisites: { type: GraphQLList(coursePrerequisites) },
    courseCode: { type: GraphQLList(GraphQLString) },
    hasCourseInstance: { type: GraphQLList(CourseInstance) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const MobileApplicationInput = new GraphQLInputObjectType({
  name: 'MobileApplicationInput',
  fields: () => ({
    carrierRequirements: { type: GraphQLList(GraphQLString) },
    downloadUrl: { type: GraphQLList(GraphQLString) },
    softwareRequirements: { type: GraphQLList(GraphQLString) },
    permissions: { type: GraphQLList(GraphQLString) },
    processorRequirements: { type: GraphQLList(GraphQLString) },
    availableOnDevice: { type: GraphQLList(GraphQLString) },
    featureList: { type: GraphQLList(GraphQLString) },
    applicationSubCategory: { type: GraphQLList(GraphQLString) },
    device: { type: GraphQLList(GraphQLString) },
    applicationCategory: { type: GraphQLList(GraphQLString) },
    softwareVersion: { type: GraphQLList(GraphQLString) },
    storageRequirements: { type: GraphQLList(GraphQLString) },
    applicationSuite: { type: GraphQLList(GraphQLString) },
    memoryRequirements: { type: GraphQLList(GraphQLString) },
    screenshot: { type: GraphQLList(ImageObject) },
    countriesSupported: { type: GraphQLList(GraphQLString) },
    softwareHelp: { type: GraphQLList(CreativeWork) },
    softwareAddOn: { type: GraphQLList(SoftwareApplication) },
    releaseNotes: { type: GraphQLList(GraphQLString) },
    supportingData: { type: GraphQLList(DataFeed) },
    requirements: { type: GraphQLList(GraphQLString) },
    countriesNotSupported: { type: GraphQLList(GraphQLString) },
    operatingSystem: { type: GraphQLList(GraphQLString) },
    fileSize: { type: GraphQLList(GraphQLString) },
    installUrl: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ParcelServiceInput = new GraphQLInputObjectType({
  name: 'ParcelServiceInput',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const BefriendActionInput = new GraphQLInputObjectType({
  name: 'BefriendActionInput',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const HowToInput = new GraphQLInputObjectType({
  name: 'HowToInput',
  fields: () => ({
    steps: { type: GraphQLList(steps) },
    prepTime: { type: GraphQLList(Duration) },
    step: { type: GraphQLList(step) },
    tool: { type: GraphQLList(HowToTool) },
    performTime: { type: GraphQLList(Duration) },
    estimatedCost: { type: GraphQLList(MonetaryAmount) },
    totalTime: { type: GraphQLList(Duration) },
    supply: { type: GraphQLList(HowToSupply) },
    yield: { type: GraphQLList(QuantitativeValue) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const PoliceStationInput = new GraphQLInputObjectType({
  name: 'PoliceStationInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const HealthClubInput = new GraphQLInputObjectType({
  name: 'HealthClubInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const DrinkActionInput = new GraphQLInputObjectType({
  name: 'DrinkActionInput',
  fields: () => ({
    actionAccessibilityRequirement: { type: GraphQLList(ActionAccessSpecification) },
    expectsAcceptanceOf: { type: GraphQLList(Offer) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const DownloadActionInput = new GraphQLInputObjectType({
  name: 'DownloadActionInput',
  fields: () => ({
    toLocation: { type: GraphQLList(Place) },
    fromLocation: { type: GraphQLList(Place) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const TireShopInput = new GraphQLInputObjectType({
  name: 'TireShopInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const SynagogueInput = new GraphQLInputObjectType({
  name: 'SynagogueInput',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const AnimalShelterInput = new GraphQLInputObjectType({
  name: 'AnimalShelterInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const WorkersUnionInput = new GraphQLInputObjectType({
  name: 'WorkersUnionInput',
  fields: () => ({
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const HowToSectionInput = new GraphQLInputObjectType({
  name: 'HowToSectionInput',
  fields: () => ({
    steps: { type: GraphQLList(steps) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    nextItem: { type: GraphQLList(ListItem) },
    previousItem: { type: GraphQLList(ListItem) },
    item: { type: GraphQLList(Thing) },
    itemListElement: { type: GraphQLList(itemListElement) },
    itemListOrder: { type: GraphQLList(ItemListOrderType) },
    numberOfItems: { type: GraphQLList(GraphQLInt) },

  })
});

const MusicAlbumInput = new GraphQLInputObjectType({
  name: 'MusicAlbumInput',
  fields: () => ({
    albumProductionType: { type: GraphQLList(MusicAlbumProductionType) },
    albumReleaseType: { type: GraphQLList(MusicAlbumReleaseType) },
    byArtist: { type: GraphQLList(byArtist) },
    albumRelease: { type: GraphQLList(MusicRelease) },
    numTracks: { type: GraphQLList(GraphQLInt) },
    track: { type: GraphQLList(track) },
    tracks: { type: GraphQLList(MusicRecording) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const AssessActionInput = new GraphQLInputObjectType({
  name: 'AssessActionInput',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const PersonInput = new GraphQLInputObjectType({
  name: 'PersonInput',
  fields: () => ({
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    spouse: { type: GraphQLList(Person) },
    funder: { type: GraphQLList(funder) },
    colleagues: { type: GraphQLList(Person) },
    deathDate: { type: GraphQLList(GraphQLString) },
    height: { type: GraphQLList(height) },
    workLocation: { type: GraphQLList(workLocation) },
    children: { type: GraphQLList(Person) },
    hasOccupation: { type: GraphQLList(Occupation) },
    jobTitle: { type: GraphQLList(GraphQLString) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    deathPlace: { type: GraphQLList(Place) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    birthPlace: { type: GraphQLList(Place) },
    gender: { type: GraphQLList(GenderType) },
    alumniOf: { type: GraphQLList(alumniOf) },
    homeLocation: { type: GraphQLList(homeLocation) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    birthDate: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    familyName: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    sibling: { type: GraphQLList(Person) },
    performerIn: { type: GraphQLList(Event) },
    honorificPrefix: { type: GraphQLList(GraphQLString) },
    additionalName: { type: GraphQLList(GraphQLString) },
    siblings: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    weight: { type: GraphQLList(QuantitativeValue) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    colleague: { type: GraphQLList(Person) },
    parents: { type: GraphQLList(Person) },
    givenName: { type: GraphQLList(GraphQLString) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    parent: { type: GraphQLList(Person) },
    owns: { type: GraphQLList(owns) },
    affiliation: { type: GraphQLList(Organization) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    honorificSuffix: { type: GraphQLList(GraphQLString) },
    netWorth: { type: GraphQLList(netWorth) },
    vatID: { type: GraphQLList(GraphQLString) },
    nationality: { type: GraphQLList(Country) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    relatedTo: { type: GraphQLList(Person) },
    follows: { type: GraphQLList(Person) },
    knows: { type: GraphQLList(Person) },
    worksFor: { type: GraphQLList(Organization) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const DeliveryChargeSpecificationInput = new GraphQLInputObjectType({
  name: 'DeliveryChargeSpecificationInput',
  fields: () => ({
    ineligibleRegion: { type: GraphQLList(ineligibleRegion) },
    appliesToDeliveryMethod: { type: GraphQLList(DeliveryMethod) },
    areaServed: { type: GraphQLList(areaServed) },
    eligibleRegion: { type: GraphQLList(eligibleRegion) },
    minPrice: { type: GraphQLList(GraphQLFloat) },
    eligibleTransactionVolume: { type: GraphQLList(PriceSpecification) },
    maxPrice: { type: GraphQLList(GraphQLFloat) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    eligibleQuantity: { type: GraphQLList(QuantitativeValue) },
    validFrom: { type: GraphQLList(GraphQLString) },
    validThrough: { type: GraphQLList(GraphQLString) },
    price: { type: GraphQLList(GraphQLString) },
    valueAddedTaxIncluded: { type: GraphQLList(GraphQLBoolean) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const LendActionInput = new GraphQLInputObjectType({
  name: 'LendActionInput',
  fields: () => ({
    borrower: { type: GraphQLList(Person) },
    toLocation: { type: GraphQLList(Place) },
    fromLocation: { type: GraphQLList(Place) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const FoodEstablishmentInput = new GraphQLInputObjectType({
  name: 'FoodEstablishmentInput',
  fields: () => ({
    servesCuisine: { type: GraphQLList(GraphQLString) },
    hasMenu: { type: GraphQLList(Menu) },
    menu: { type: GraphQLList(Menu) },
    starRating: { type: GraphQLList(Rating) },
    acceptsReservations: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const ListenActionInput = new GraphQLInputObjectType({
  name: 'ListenActionInput',
  fields: () => ({
    actionAccessibilityRequirement: { type: GraphQLList(ActionAccessSpecification) },
    expectsAcceptanceOf: { type: GraphQLList(Offer) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const TransferActionInput = new GraphQLInputObjectType({
  name: 'TransferActionInput',
  fields: () => ({
    toLocation: { type: GraphQLList(Place) },
    fromLocation: { type: GraphQLList(Place) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const NutritionInformationInput = new GraphQLInputObjectType({
  name: 'NutritionInformationInput',
  fields: () => ({
    saturatedFatContent: { type: GraphQLList(Mass) },
    fatContent: { type: GraphQLList(Mass) },
    unsaturatedFatContent: { type: GraphQLList(Mass) },
    sugarContent: { type: GraphQLList(Mass) },
    cholesterolContent: { type: GraphQLList(Mass) },
    carbohydrateContent: { type: GraphQLList(Mass) },
    proteinContent: { type: GraphQLList(Mass) },
    sodiumContent: { type: GraphQLList(Mass) },
    transFatContent: { type: GraphQLList(Mass) },
    fiberContent: { type: GraphQLList(Mass) },
    calories: { type: GraphQLList(Energy) },
    servingSize: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const SiteNavigationElementInput = new GraphQLInputObjectType({
  name: 'SiteNavigationElementInput',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const OrganizationInput = new GraphQLInputObjectType({
  name: 'OrganizationInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const DeleteActionInput = new GraphQLInputObjectType({
  name: 'DeleteActionInput',
  fields: () => ({
    collection: { type: GraphQLList(Thing) },
    targetCollection: { type: GraphQLList(Thing) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const TradeActionInput = new GraphQLInputObjectType({
  name: 'TradeActionInput',
  fields: () => ({
    recipient: { type: GraphQLList(recipient) },
    priceSpecification: { type: GraphQLList(PriceSpecification) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    price: { type: GraphQLList(GraphQLString) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const LegalServiceInput = new GraphQLInputObjectType({
  name: 'LegalServiceInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const VisualArtworkInput = new GraphQLInputObjectType({
  name: 'VisualArtworkInput',
  fields: () => ({
    height: { type: GraphQLList(height) },
    artMedium: { type: GraphQLList(GraphQLString) },
    artform: { type: GraphQLList(GraphQLString) },
    artworkSurface: { type: GraphQLList(GraphQLString) },
    artEdition: { type: GraphQLList(GraphQLString) },
    width: { type: GraphQLList(width) },
    surface: { type: GraphQLList(GraphQLString) },
    depth: { type: GraphQLList(depth) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const AttorneyInput = new GraphQLInputObjectType({
  name: 'AttorneyInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const RsvpActionInput = new GraphQLInputObjectType({
  name: 'RsvpActionInput',
  fields: () => ({
    additionalNumberOfGuests: { type: GraphQLList(GraphQLFloat) },
    comment: { type: GraphQLList(Comment) },
    rsvpResponse: { type: GraphQLList(RsvpResponseType) },
    event: { type: GraphQLList(Event) },
    about: { type: GraphQLList(Thing) },
    inLanguage: { type: GraphQLList(Language) },
    recipient: { type: GraphQLList(recipient) },
    language: { type: GraphQLList(Language) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const GeneralContractorInput = new GraphQLInputObjectType({
  name: 'GeneralContractorInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const RatingInput = new GraphQLInputObjectType({
  name: 'RatingInput',
  fields: () => ({
    itemReviewed: { type: GraphQLList(Thing) },
    reviewCount: { type: GraphQLList(GraphQLInt) },
    ratingCount: { type: GraphQLList(GraphQLInt) },
    ratingValue: { type: GraphQLList(GraphQLString) },
    bestRating: { type: GraphQLList(GraphQLString) },
    reviewAspect: { type: GraphQLList(GraphQLString) },
    author: { type: GraphQLList(author) },
    worstRating: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ApartmentComplexInput = new GraphQLInputObjectType({
  name: 'ApartmentComplexInput',
  fields: () => ({
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const RegisterActionInput = new GraphQLInputObjectType({
  name: 'RegisterActionInput',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const HousePainterInput = new GraphQLInputObjectType({
  name: 'HousePainterInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const WinActionInput = new GraphQLInputObjectType({
  name: 'WinActionInput',
  fields: () => ({
    loser: { type: GraphQLList(Person) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const MovieRentalStoreInput = new GraphQLInputObjectType({
  name: 'MovieRentalStoreInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const WatchActionInput = new GraphQLInputObjectType({
  name: 'WatchActionInput',
  fields: () => ({
    actionAccessibilityRequirement: { type: GraphQLList(ActionAccessSpecification) },
    expectsAcceptanceOf: { type: GraphQLList(Offer) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const PropertyValueSpecificationInput = new GraphQLInputObjectType({
  name: 'PropertyValueSpecificationInput',
  fields: () => ({
    defaultValue: { type: GraphQLList(Thing) },
    minValue: { type: GraphQLList(GraphQLFloat) },
    stepValue: { type: GraphQLList(GraphQLFloat) },
    valuePattern: { type: GraphQLList(GraphQLString) },
    valueMaxLength: { type: GraphQLList(GraphQLFloat) },
    readonlyValue: { type: GraphQLList(GraphQLBoolean) },
    valueMinLength: { type: GraphQLList(GraphQLFloat) },
    maxValue: { type: GraphQLList(GraphQLFloat) },
    valueName: { type: GraphQLList(GraphQLString) },
    multipleValues: { type: GraphQLList(GraphQLBoolean) },
    valueRequired: { type: GraphQLList(GraphQLBoolean) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const EducationEventInput = new GraphQLInputObjectType({
  name: 'EducationEventInput',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ResumeActionInput = new GraphQLInputObjectType({
  name: 'ResumeActionInput',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ToyStoreInput = new GraphQLInputObjectType({
  name: 'ToyStoreInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const BedAndBreakfastInput = new GraphQLInputObjectType({
  name: 'BedAndBreakfastInput',
  fields: () => ({
    audience: { type: GraphQLList(Audience) },
    checkinTime: { type: GraphQLList(GraphQLString) },
    petsAllowed: { type: GraphQLList(GraphQLString) },
    availableLanguage: { type: GraphQLList(Language) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    starRating: { type: GraphQLList(Rating) },
    checkoutTime: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const SuiteInput = new GraphQLInputObjectType({
  name: 'SuiteInput',
  fields: () => ({
    occupancy: { type: GraphQLList(QuantitativeValue) },
    bed: { type: GraphQLList(bed) },
    numberOfRooms: { type: GraphQLList(QuantitativeValue) },
    floorSize: { type: GraphQLList(QuantitativeValue) },
    petsAllowed: { type: GraphQLList(GraphQLString) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    permittedUsage: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const GenderTypeInput = new GraphQLInputObjectType({
  name: 'GenderTypeInput',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const InstallActionInput = new GraphQLInputObjectType({
  name: 'InstallActionInput',
  fields: () => ({
    actionAccessibilityRequirement: { type: GraphQLList(ActionAccessSpecification) },
    expectsAcceptanceOf: { type: GraphQLList(Offer) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const DistilleryInput = new GraphQLInputObjectType({
  name: 'DistilleryInput',
  fields: () => ({
    servesCuisine: { type: GraphQLList(GraphQLString) },
    hasMenu: { type: GraphQLList(Menu) },
    menu: { type: GraphQLList(Menu) },
    starRating: { type: GraphQLList(Rating) },
    acceptsReservations: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const GiveActionInput = new GraphQLInputObjectType({
  name: 'GiveActionInput',
  fields: () => ({
    recipient: { type: GraphQLList(recipient) },
    toLocation: { type: GraphQLList(Place) },
    fromLocation: { type: GraphQLList(Place) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const PostOfficeInput = new GraphQLInputObjectType({
  name: 'PostOfficeInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const CheckoutPageInput = new GraphQLInputObjectType({
  name: 'CheckoutPageInput',
  fields: () => ({
    speakable: { type: GraphQLList(SpeakableSpecification) },
    breadcrumb: { type: GraphQLList(BreadcrumbList) },
    significantLink: { type: GraphQLList(GraphQLString) },
    relatedLink: { type: GraphQLList(GraphQLString) },
    lastReviewed: { type: GraphQLList(GraphQLString) },
    mainContentOfPage: { type: GraphQLList(WebPageElement) },
    reviewedBy: { type: GraphQLList(reviewedBy) },
    primaryImageOfPage: { type: GraphQLList(ImageObject) },
    significantLinks: { type: GraphQLList(GraphQLString) },
    specialty: { type: GraphQLList(Specialty) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const AccommodationInput = new GraphQLInputObjectType({
  name: 'AccommodationInput',
  fields: () => ({
    floorSize: { type: GraphQLList(QuantitativeValue) },
    petsAllowed: { type: GraphQLList(GraphQLString) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    numberOfRooms: { type: GraphQLList(QuantitativeValue) },
    permittedUsage: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const PerformingArtsTheaterInput = new GraphQLInputObjectType({
  name: 'PerformingArtsTheaterInput',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const AggregateOfferInput = new GraphQLInputObjectType({
  name: 'AggregateOfferInput',
  fields: () => ({
    offers: { type: GraphQLList(Offer) },
    offerCount: { type: GraphQLList(GraphQLInt) },
    lowPrice: { type: GraphQLList(GraphQLString) },
    highPrice: { type: GraphQLList(GraphQLString) },
    sku: { type: GraphQLList(GraphQLString) },
    availabilityStarts: { type: GraphQLList(GraphQLString) },
    availableDeliveryMethod: { type: GraphQLList(DeliveryMethod) },
    mpn: { type: GraphQLList(GraphQLString) },
    serialNumber: { type: GraphQLList(GraphQLString) },
    ineligibleRegion: { type: GraphQLList(ineligibleRegion) },
    gtin8: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    availability: { type: GraphQLList(ItemAvailability) },
    priceSpecification: { type: GraphQLList(PriceSpecification) },
    inventoryLevel: { type: GraphQLList(QuantitativeValue) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    eligibleTransactionVolume: { type: GraphQLList(PriceSpecification) },
    availableAtOrFrom: { type: GraphQLList(Place) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    priceValidUntil: { type: GraphQLList(GraphQLString) },
    addOn: { type: GraphQLList(Offer) },
    warranty: { type: GraphQLList(WarrantyPromise) },
    eligibleQuantity: { type: GraphQLList(QuantitativeValue) },
    validFrom: { type: GraphQLList(GraphQLString) },
    validThrough: { type: GraphQLList(GraphQLString) },
    price: { type: GraphQLList(GraphQLString) },
    gtin14: { type: GraphQLList(GraphQLString) },
    gtin13: { type: GraphQLList(GraphQLString) },
    gtin12: { type: GraphQLList(GraphQLString) },
    seller: { type: GraphQLList(seller) },
    deliveryLeadTime: { type: GraphQLList(QuantitativeValue) },
    availabilityEnds: { type: GraphQLList(GraphQLString) },
    includesObject: { type: GraphQLList(TypeAndQuantityNode) },
    review: { type: GraphQLList(Review) },
    businessFunction: { type: GraphQLList(BusinessFunction) },
    eligibleCustomerType: { type: GraphQLList(BusinessEntityType) },
    itemCondition: { type: GraphQLList(OfferItemCondition) },
    itemOffered: { type: GraphQLList(itemOffered) },
    offeredBy: { type: GraphQLList(offeredBy) },
    eligibleDuration: { type: GraphQLList(QuantitativeValue) },
    acceptedPaymentMethod: { type: GraphQLList(acceptedPaymentMethod) },
    areaServed: { type: GraphQLList(areaServed) },
    eligibleRegion: { type: GraphQLList(eligibleRegion) },
    advanceBookingRequirement: { type: GraphQLList(QuantitativeValue) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const MuseumInput = new GraphQLInputObjectType({
  name: 'MuseumInput',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const HowToSupplyInput = new GraphQLInputObjectType({
  name: 'HowToSupplyInput',
  fields: () => ({
    estimatedCost: { type: GraphQLList(MonetaryAmount) },
    requiredQuantity: { type: GraphQLList(QuantitativeValue) },
    nextItem: { type: GraphQLList(ListItem) },
    position: { type: GraphQLList(GraphQLString) },
    previousItem: { type: GraphQLList(ListItem) },
    item: { type: GraphQLList(Thing) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const AutoRepairInput = new GraphQLInputObjectType({
  name: 'AutoRepairInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const ExerciseGymInput = new GraphQLInputObjectType({
  name: 'ExerciseGymInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const EmbassyInput = new GraphQLInputObjectType({
  name: 'EmbassyInput',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ProfilePageInput = new GraphQLInputObjectType({
  name: 'ProfilePageInput',
  fields: () => ({
    speakable: { type: GraphQLList(SpeakableSpecification) },
    breadcrumb: { type: GraphQLList(BreadcrumbList) },
    significantLink: { type: GraphQLList(GraphQLString) },
    relatedLink: { type: GraphQLList(GraphQLString) },
    lastReviewed: { type: GraphQLList(GraphQLString) },
    mainContentOfPage: { type: GraphQLList(WebPageElement) },
    reviewedBy: { type: GraphQLList(reviewedBy) },
    primaryImageOfPage: { type: GraphQLList(ImageObject) },
    significantLinks: { type: GraphQLList(GraphQLString) },
    specialty: { type: GraphQLList(Specialty) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const DisagreeActionInput = new GraphQLInputObjectType({
  name: 'DisagreeActionInput',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const DigitalDocumentPermissionInput = new GraphQLInputObjectType({
  name: 'DigitalDocumentPermissionInput',
  fields: () => ({
    grantee: { type: GraphQLList(grantee) },
    permissionType: { type: GraphQLList(DigitalDocumentPermissionType) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ImageObjectInput = new GraphQLInputObjectType({
  name: 'ImageObjectInput',
  fields: () => ({
    exifData: { type: GraphQLList(GraphQLString) },
    representativeOfPage: { type: GraphQLList(GraphQLBoolean) },
    thumbnail: { type: GraphQLList(ImageObject) },
    caption: { type: GraphQLList(MediaObject) },
    startTime: { type: GraphQLList(GraphQLString) },
    uploadDate: { type: GraphQLList(GraphQLString) },
    playerType: { type: GraphQLList(GraphQLString) },
    height: { type: GraphQLList(height) },
    bitrate: { type: GraphQLList(GraphQLString) },
    requiresSubscription: { type: GraphQLList(MediaSubscription) },
    regionsAllowed: { type: GraphQLList(Place) },
    endTime: { type: GraphQLList(GraphQLString) },
    contentSize: { type: GraphQLList(GraphQLString) },
    embedUrl: { type: GraphQLList(GraphQLString) },
    width: { type: GraphQLList(width) },
    contentUrl: { type: GraphQLList(GraphQLString) },
    associatedArticle: { type: GraphQLList(NewsArticle) },
    productionCompany: { type: GraphQLList(Organization) },
    duration: { type: GraphQLList(Duration) },
    encodesCreativeWork: { type: GraphQLList(CreativeWork) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ReservationPackageInput = new GraphQLInputObjectType({
  name: 'ReservationPackageInput',
  fields: () => ({
    subReservation: { type: GraphQLList(Reservation) },
    provider: { type: GraphQLList(provider) },
    programMembershipUsed: { type: GraphQLList(ProgramMembership) },
    reservationStatus: { type: GraphQLList(ReservationStatusType) },
    underName: { type: GraphQLList(underName) },
    bookingAgent: { type: GraphQLList(bookingAgent) },
    totalPrice: { type: GraphQLList(PriceSpecification) },
    reservationFor: { type: GraphQLList(Thing) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    broker: { type: GraphQLList(broker) },
    modifiedTime: { type: GraphQLList(GraphQLString) },
    bookingTime: { type: GraphQLList(GraphQLString) },
    reservationId: { type: GraphQLList(GraphQLString) },
    reservedTicket: { type: GraphQLList(Ticket) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const SeaBodyOfWaterInput = new GraphQLInputObjectType({
  name: 'SeaBodyOfWaterInput',
  fields: () => ({
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const TrackActionInput = new GraphQLInputObjectType({
  name: 'TrackActionInput',
  fields: () => ({
    deliveryMethod: { type: GraphQLList(DeliveryMethod) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const HomeAndConstructionBusinessInput = new GraphQLInputObjectType({
  name: 'HomeAndConstructionBusinessInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const ProgramMembershipInput = new GraphQLInputObjectType({
  name: 'ProgramMembershipInput',
  fields: () => ({
    membershipNumber: { type: GraphQLList(GraphQLString) },
    members: { type: GraphQLList(members) },
    member: { type: GraphQLList(member) },
    hostingOrganization: { type: GraphQLList(Organization) },
    programName: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ControlActionInput = new GraphQLInputObjectType({
  name: 'ControlActionInput',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const CheckActionInput = new GraphQLInputObjectType({
  name: 'CheckActionInput',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const GameInput = new GraphQLInputObjectType({
  name: 'GameInput',
  fields: () => ({
    gamePlatform: { type: GraphQLList(Thing) },
    gameServer: { type: GraphQLList(GameServer) },
    actor: { type: GraphQLList(Person) },
    trailer: { type: GraphQLList(VideoObject) },
    cheatCode: { type: GraphQLList(CreativeWork) },
    gameTip: { type: GraphQLList(CreativeWork) },
    musicBy: { type: GraphQLList(musicBy) },
    directors: { type: GraphQLList(Person) },
    playMode: { type: GraphQLList(GamePlayMode) },
    director: { type: GraphQLList(Person) },
    actors: { type: GraphQLList(Person) },
    downloadUrl: { type: GraphQLList(GraphQLString) },
    softwareRequirements: { type: GraphQLList(GraphQLString) },
    permissions: { type: GraphQLList(GraphQLString) },
    processorRequirements: { type: GraphQLList(GraphQLString) },
    availableOnDevice: { type: GraphQLList(GraphQLString) },
    featureList: { type: GraphQLList(GraphQLString) },
    applicationSubCategory: { type: GraphQLList(GraphQLString) },
    device: { type: GraphQLList(GraphQLString) },
    applicationCategory: { type: GraphQLList(GraphQLString) },
    softwareVersion: { type: GraphQLList(GraphQLString) },
    storageRequirements: { type: GraphQLList(GraphQLString) },
    applicationSuite: { type: GraphQLList(GraphQLString) },
    memoryRequirements: { type: GraphQLList(GraphQLString) },
    screenshot: { type: GraphQLList(ImageObject) },
    countriesSupported: { type: GraphQLList(GraphQLString) },
    softwareHelp: { type: GraphQLList(CreativeWork) },
    softwareAddOn: { type: GraphQLList(SoftwareApplication) },
    releaseNotes: { type: GraphQLList(GraphQLString) },
    supportingData: { type: GraphQLList(DataFeed) },
    requirements: { type: GraphQLList(GraphQLString) },
    countriesNotSupported: { type: GraphQLList(GraphQLString) },
    operatingSystem: { type: GraphQLList(GraphQLString) },
    fileSize: { type: GraphQLList(GraphQLString) },
    installUrl: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    gameItem: { type: GraphQLList(Thing) },
    characterAttribute: { type: GraphQLList(Thing) },
    gameLocation: { type: GraphQLList(gameLocation) },
    quest: { type: GraphQLList(Thing) },
    numberOfPlayers: { type: GraphQLList(QuantitativeValue) },

  })
});

const DiscussionForumPostingInput = new GraphQLInputObjectType({
  name: 'DiscussionForumPostingInput',
  fields: () => ({
    sharedContent: { type: GraphQLList(CreativeWork) },
    pagination: { type: GraphQLList(GraphQLString) },
    wordCount: { type: GraphQLList(GraphQLInt) },
    speakable: { type: GraphQLList(SpeakableSpecification) },
    pageEnd: { type: GraphQLList(GraphQLString) },
    articleSection: { type: GraphQLList(GraphQLString) },
    articleBody: { type: GraphQLList(GraphQLString) },
    pageStart: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const IceCreamShopInput = new GraphQLInputObjectType({
  name: 'IceCreamShopInput',
  fields: () => ({
    servesCuisine: { type: GraphQLList(GraphQLString) },
    hasMenu: { type: GraphQLList(Menu) },
    menu: { type: GraphQLList(Menu) },
    starRating: { type: GraphQLList(Rating) },
    acceptsReservations: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const TouristAttractionInput = new GraphQLInputObjectType({
  name: 'TouristAttractionInput',
  fields: () => ({
    touristType: { type: GraphQLList(Audience) },
    availableLanguage: { type: GraphQLList(Language) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const CarInput = new GraphQLInputObjectType({
  name: 'CarInput',
  fields: () => ({
    productionDate: { type: GraphQLList(GraphQLString) },
    numberOfForwardGears: { type: GraphQLList(QuantitativeValue) },
    cargoVolume: { type: GraphQLList(QuantitativeValue) },
    vehicleInteriorColor: { type: GraphQLList(GraphQLString) },
    steeringPosition: { type: GraphQLList(SteeringPositionValue) },
    vehicleSeatingCapacity: { type: GraphQLList(QuantitativeValue) },
    vehicleEngine: { type: GraphQLList(EngineSpecification) },
    vehicleModelDate: { type: GraphQLList(GraphQLString) },
    numberOfDoors: { type: GraphQLList(QuantitativeValue) },
    vehicleConfiguration: { type: GraphQLList(GraphQLString) },
    fuelType: { type: GraphQLList(QualitativeValue) },
    vehicleIdentificationNumber: { type: GraphQLList(GraphQLString) },
    fuelConsumption: { type: GraphQLList(QuantitativeValue) },
    numberOfPreviousOwners: { type: GraphQLList(QuantitativeValue) },
    mileageFromOdometer: { type: GraphQLList(QuantitativeValue) },
    fuelEfficiency: { type: GraphQLList(QuantitativeValue) },
    numberOfAxles: { type: GraphQLList(QuantitativeValue) },
    vehicleInteriorType: { type: GraphQLList(GraphQLString) },
    numberOfAirbags: { type: GraphQLList(GraphQLString) },
    vehicleTransmission: { type: GraphQLList(QualitativeValue) },
    dateVehicleFirstRegistered: { type: GraphQLList(GraphQLString) },
    purchaseDate: { type: GraphQLList(GraphQLString) },
    knownVehicleDamages: { type: GraphQLList(GraphQLString) },
    driveWheelConfiguration: { type: GraphQLList(DriveWheelConfigurationValue) },
    manufacturer: { type: GraphQLList(Organization) },
    sku: { type: GraphQLList(GraphQLString) },
    audience: { type: GraphQLList(Audience) },
    mpn: { type: GraphQLList(GraphQLString) },
    height: { type: GraphQLList(height) },
    gtin8: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    isConsumableFor: { type: GraphQLList(Product) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    width: { type: GraphQLList(width) },
    awards: { type: GraphQLList(GraphQLString) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    isAccessoryOrSparePartFor: { type: GraphQLList(Product) },
    logo: { type: GraphQLList(ImageObject) },
    gtin14: { type: GraphQLList(GraphQLString) },
    gtin13: { type: GraphQLList(GraphQLString) },
    gtin12: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    weight: { type: GraphQLList(QuantitativeValue) },
    depth: { type: GraphQLList(depth) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    model: { type: GraphQLList(ProductModel) },
    color: { type: GraphQLList(GraphQLString) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    productID: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    itemCondition: { type: GraphQLList(OfferItemCondition) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    releaseDate: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const PriceSpecificationInput = new GraphQLInputObjectType({
  name: 'PriceSpecificationInput',
  fields: () => ({
    appliesToPaymentMethod: { type: GraphQLList(PaymentMethod) },
    appliesToDeliveryMethod: { type: GraphQLList(DeliveryMethod) },
    minPrice: { type: GraphQLList(GraphQLFloat) },
    eligibleTransactionVolume: { type: GraphQLList(PriceSpecification) },
    maxPrice: { type: GraphQLList(GraphQLFloat) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    eligibleQuantity: { type: GraphQLList(QuantitativeValue) },
    validFrom: { type: GraphQLList(GraphQLString) },
    validThrough: { type: GraphQLList(GraphQLString) },
    price: { type: GraphQLList(GraphQLString) },
    valueAddedTaxIncluded: { type: GraphQLList(GraphQLBoolean) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const AdministrativeAreaInput = new GraphQLInputObjectType({
  name: 'AdministrativeAreaInput',
  fields: () => ({
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const SeasonInput = new GraphQLInputObjectType({
  name: 'SeasonInput',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const DrawActionInput = new GraphQLInputObjectType({
  name: 'DrawActionInput',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const PaymentCardInput = new GraphQLInputObjectType({
  name: 'PaymentCardInput',
  fields: () => ({
    loanTerm: { type: GraphQLList(QuantitativeValue) },
    currency: { type: GraphQLList(GraphQLString) },
    amount: { type: GraphQLList(MonetaryAmount) },
    requiredCollateral: { type: GraphQLList(Thing) },
    interestRate: { type: GraphQLList(QuantitativeValue) },
    feesAndCommissionsSpecification: { type: GraphQLList(GraphQLString) },
    annualPercentageRate: { type: GraphQLList(QuantitativeValue) },
    serviceArea: { type: GraphQLList(serviceArea) },
    provider: { type: GraphQLList(provider) },
    serviceAudience: { type: GraphQLList(Audience) },
    audience: { type: GraphQLList(Audience) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    hoursAvailable: { type: GraphQLList(OpeningHoursSpecification) },
    providerMobility: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    broker: { type: GraphQLList(broker) },
    serviceOutput: { type: GraphQLList(Thing) },
    logo: { type: GraphQLList(ImageObject) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    availableChannel: { type: GraphQLList(ServiceChannel) },
    review: { type: GraphQLList(Review) },
    serviceType: { type: GraphQLList(GraphQLString) },
    produces: { type: GraphQLList(Thing) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const PublicationVolumeInput = new GraphQLInputObjectType({
  name: 'PublicationVolumeInput',
  fields: () => ({
    pagination: { type: GraphQLList(GraphQLString) },
    pageEnd: { type: GraphQLList(GraphQLString) },
    volumeNumber: { type: GraphQLList(GraphQLString) },
    pageStart: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const LocalBusinessInput = new GraphQLInputObjectType({
  name: 'LocalBusinessInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const CancelActionInput = new GraphQLInputObjectType({
  name: 'CancelActionInput',
  fields: () => ({
    scheduledTime: { type: GraphQLList(GraphQLString) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const IgnoreActionInput = new GraphQLInputObjectType({
  name: 'IgnoreActionInput',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const MusicRecordingInput = new GraphQLInputObjectType({
  name: 'MusicRecordingInput',
  fields: () => ({
    recordingOf: { type: GraphQLList(MusicComposition) },
    isrcCode: { type: GraphQLList(GraphQLString) },
    inAlbum: { type: GraphQLList(MusicAlbum) },
    inPlaylist: { type: GraphQLList(MusicPlaylist) },
    byArtist: { type: GraphQLList(byArtist) },
    duration: { type: GraphQLList(Duration) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const MotorcycleDealerInput = new GraphQLInputObjectType({
  name: 'MotorcycleDealerInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const CheckOutActionInput = new GraphQLInputObjectType({
  name: 'CheckOutActionInput',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    inLanguage: { type: GraphQLList(Language) },
    recipient: { type: GraphQLList(recipient) },
    language: { type: GraphQLList(Language) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const BankAccountInput = new GraphQLInputObjectType({
  name: 'BankAccountInput',
  fields: () => ({
    amount: { type: GraphQLList(MonetaryAmount) },
    interestRate: { type: GraphQLList(QuantitativeValue) },
    feesAndCommissionsSpecification: { type: GraphQLList(GraphQLString) },
    annualPercentageRate: { type: GraphQLList(QuantitativeValue) },
    serviceArea: { type: GraphQLList(serviceArea) },
    provider: { type: GraphQLList(provider) },
    serviceAudience: { type: GraphQLList(Audience) },
    audience: { type: GraphQLList(Audience) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    hoursAvailable: { type: GraphQLList(OpeningHoursSpecification) },
    providerMobility: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    broker: { type: GraphQLList(broker) },
    serviceOutput: { type: GraphQLList(Thing) },
    logo: { type: GraphQLList(ImageObject) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    availableChannel: { type: GraphQLList(ServiceChannel) },
    review: { type: GraphQLList(Review) },
    serviceType: { type: GraphQLList(GraphQLString) },
    produces: { type: GraphQLList(Thing) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const DurationInput = new GraphQLInputObjectType({
  name: 'DurationInput',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const RealEstateAgentInput = new GraphQLInputObjectType({
  name: 'RealEstateAgentInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const MapCategoryTypeInput = new GraphQLInputObjectType({
  name: 'MapCategoryTypeInput',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const SportsOrganizationInput = new GraphQLInputObjectType({
  name: 'SportsOrganizationInput',
  fields: () => ({
    sport: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const EndorseActionInput = new GraphQLInputObjectType({
  name: 'EndorseActionInput',
  fields: () => ({
    endorsee: { type: GraphQLList(endorsee) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const EducationalOrganizationInput = new GraphQLInputObjectType({
  name: 'EducationalOrganizationInput',
  fields: () => ({
    alumni: { type: GraphQLList(Person) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const CableOrSatelliteServiceInput = new GraphQLInputObjectType({
  name: 'CableOrSatelliteServiceInput',
  fields: () => ({
    serviceArea: { type: GraphQLList(serviceArea) },
    provider: { type: GraphQLList(provider) },
    serviceAudience: { type: GraphQLList(Audience) },
    audience: { type: GraphQLList(Audience) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    hoursAvailable: { type: GraphQLList(OpeningHoursSpecification) },
    providerMobility: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    broker: { type: GraphQLList(broker) },
    serviceOutput: { type: GraphQLList(Thing) },
    logo: { type: GraphQLList(ImageObject) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    availableChannel: { type: GraphQLList(ServiceChannel) },
    review: { type: GraphQLList(Review) },
    serviceType: { type: GraphQLList(GraphQLString) },
    produces: { type: GraphQLList(Thing) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const CurrencyConversionServiceInput = new GraphQLInputObjectType({
  name: 'CurrencyConversionServiceInput',
  fields: () => ({
    interestRate: { type: GraphQLList(QuantitativeValue) },
    feesAndCommissionsSpecification: { type: GraphQLList(GraphQLString) },
    annualPercentageRate: { type: GraphQLList(QuantitativeValue) },
    serviceArea: { type: GraphQLList(serviceArea) },
    provider: { type: GraphQLList(provider) },
    serviceAudience: { type: GraphQLList(Audience) },
    audience: { type: GraphQLList(Audience) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    hoursAvailable: { type: GraphQLList(OpeningHoursSpecification) },
    providerMobility: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    broker: { type: GraphQLList(broker) },
    serviceOutput: { type: GraphQLList(Thing) },
    logo: { type: GraphQLList(ImageObject) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    availableChannel: { type: GraphQLList(ServiceChannel) },
    review: { type: GraphQLList(Review) },
    serviceType: { type: GraphQLList(GraphQLString) },
    produces: { type: GraphQLList(Thing) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const HinduTempleInput = new GraphQLInputObjectType({
  name: 'HinduTempleInput',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const TVSeasonInput = new GraphQLInputObjectType({
  name: 'TVSeasonInput',
  fields: () => ({
    partOfTVSeries: { type: GraphQLList(TVSeries) },
    countryOfOrigin: { type: GraphQLList(Country) },
    actor: { type: GraphQLList(Person) },
    numberOfEpisodes: { type: GraphQLList(GraphQLInt) },
    trailer: { type: GraphQLList(VideoObject) },
    endDate: { type: GraphQLList(GraphQLString) },
    partOfSeries: { type: GraphQLList(CreativeWorkSeries) },
    episodes: { type: GraphQLList(Episode) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    productionCompany: { type: GraphQLList(Organization) },
    episode: { type: GraphQLList(Episode) },
    seasonNumber: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const SearchResultsPageInput = new GraphQLInputObjectType({
  name: 'SearchResultsPageInput',
  fields: () => ({
    speakable: { type: GraphQLList(SpeakableSpecification) },
    breadcrumb: { type: GraphQLList(BreadcrumbList) },
    significantLink: { type: GraphQLList(GraphQLString) },
    relatedLink: { type: GraphQLList(GraphQLString) },
    lastReviewed: { type: GraphQLList(GraphQLString) },
    mainContentOfPage: { type: GraphQLList(WebPageElement) },
    reviewedBy: { type: GraphQLList(reviewedBy) },
    primaryImageOfPage: { type: GraphQLList(ImageObject) },
    significantLinks: { type: GraphQLList(GraphQLString) },
    specialty: { type: GraphQLList(Specialty) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const UserBlocksInput = new GraphQLInputObjectType({
  name: 'UserBlocksInput',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const DanceEventInput = new GraphQLInputObjectType({
  name: 'DanceEventInput',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const BookStoreInput = new GraphQLInputObjectType({
  name: 'BookStoreInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const EntryPointInput = new GraphQLInputObjectType({
  name: 'EntryPointInput',
  fields: () => ({
    urlTemplate: { type: GraphQLList(GraphQLString) },
    actionApplication: { type: GraphQLList(SoftwareApplication) },
    application: { type: GraphQLList(SoftwareApplication) },
    actionPlatform: { type: GraphQLList(GraphQLString) },
    httpMethod: { type: GraphQLList(GraphQLString) },
    encodingType: { type: GraphQLList(GraphQLString) },
    contentType: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const SaleEventInput = new GraphQLInputObjectType({
  name: 'SaleEventInput',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const FoodEventInput = new GraphQLInputObjectType({
  name: 'FoodEventInput',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const OutletStoreInput = new GraphQLInputObjectType({
  name: 'OutletStoreInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const OrderActionInput = new GraphQLInputObjectType({
  name: 'OrderActionInput',
  fields: () => ({
    deliveryMethod: { type: GraphQLList(DeliveryMethod) },
    priceSpecification: { type: GraphQLList(PriceSpecification) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    price: { type: GraphQLList(GraphQLString) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const InviteActionInput = new GraphQLInputObjectType({
  name: 'InviteActionInput',
  fields: () => ({
    event: { type: GraphQLList(Event) },
    about: { type: GraphQLList(Thing) },
    inLanguage: { type: GraphQLList(Language) },
    recipient: { type: GraphQLList(recipient) },
    language: { type: GraphQLList(Language) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const TVEpisodeInput = new GraphQLInputObjectType({
  name: 'TVEpisodeInput',
  fields: () => ({
    partOfTVSeries: { type: GraphQLList(TVSeries) },
    subtitleLanguage: { type: GraphQLList(Language) },
    countryOfOrigin: { type: GraphQLList(Country) },
    actor: { type: GraphQLList(Person) },
    trailer: { type: GraphQLList(VideoObject) },
    partOfSeries: { type: GraphQLList(CreativeWorkSeries) },
    partOfSeason: { type: GraphQLList(CreativeWorkSeason) },
    musicBy: { type: GraphQLList(musicBy) },
    directors: { type: GraphQLList(Person) },
    episodeNumber: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    productionCompany: { type: GraphQLList(Organization) },
    actors: { type: GraphQLList(Person) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const MusicGroupInput = new GraphQLInputObjectType({
  name: 'MusicGroupInput',
  fields: () => ({
    albums: { type: GraphQLList(MusicAlbum) },
    musicGroupMember: { type: GraphQLList(Person) },
    track: { type: GraphQLList(track) },
    genre: { type: GraphQLList(GraphQLString) },
    tracks: { type: GraphQLList(MusicRecording) },
    album: { type: GraphQLList(MusicAlbum) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const AmusementParkInput = new GraphQLInputObjectType({
  name: 'AmusementParkInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const ContactPointOptionInput = new GraphQLInputObjectType({
  name: 'ContactPointOptionInput',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const CasinoInput = new GraphQLInputObjectType({
  name: 'CasinoInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const SubscribeActionInput = new GraphQLInputObjectType({
  name: 'SubscribeActionInput',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const BusinessEventInput = new GraphQLInputObjectType({
  name: 'BusinessEventInput',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const AgreeActionInput = new GraphQLInputObjectType({
  name: 'AgreeActionInput',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const GameServerInput = new GraphQLInputObjectType({
  name: 'GameServerInput',
  fields: () => ({
    game: { type: GraphQLList(VideoGame) },
    playersOnline: { type: GraphQLList(GraphQLInt) },
    serverStatus: { type: GraphQLList(GameServerStatus) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const DepositAccountInput = new GraphQLInputObjectType({
  name: 'DepositAccountInput',
  fields: () => ({
    amount: { type: GraphQLList(MonetaryAmount) },
    interestRate: { type: GraphQLList(QuantitativeValue) },
    feesAndCommissionsSpecification: { type: GraphQLList(GraphQLString) },
    annualPercentageRate: { type: GraphQLList(QuantitativeValue) },
    serviceArea: { type: GraphQLList(serviceArea) },
    provider: { type: GraphQLList(provider) },
    serviceAudience: { type: GraphQLList(Audience) },
    audience: { type: GraphQLList(Audience) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    hoursAvailable: { type: GraphQLList(OpeningHoursSpecification) },
    providerMobility: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    broker: { type: GraphQLList(broker) },
    serviceOutput: { type: GraphQLList(Thing) },
    logo: { type: GraphQLList(ImageObject) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    availableChannel: { type: GraphQLList(ServiceChannel) },
    review: { type: GraphQLList(Review) },
    serviceType: { type: GraphQLList(GraphQLString) },
    produces: { type: GraphQLList(Thing) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const DigitalDocumentPermissionTypeInput = new GraphQLInputObjectType({
  name: 'DigitalDocumentPermissionTypeInput',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const MotelInput = new GraphQLInputObjectType({
  name: 'MotelInput',
  fields: () => ({
    audience: { type: GraphQLList(Audience) },
    checkinTime: { type: GraphQLList(GraphQLString) },
    petsAllowed: { type: GraphQLList(GraphQLString) },
    availableLanguage: { type: GraphQLList(Language) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    starRating: { type: GraphQLList(Rating) },
    checkoutTime: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const PaintingInput = new GraphQLInputObjectType({
  name: 'PaintingInput',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ChildCareInput = new GraphQLInputObjectType({
  name: 'ChildCareInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const InternetCafeInput = new GraphQLInputObjectType({
  name: 'InternetCafeInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const PaymentStatusTypeInput = new GraphQLInputObjectType({
  name: 'PaymentStatusTypeInput',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const MusicAlbumReleaseTypeInput = new GraphQLInputObjectType({
  name: 'MusicAlbumReleaseTypeInput',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const PharmacyInput = new GraphQLInputObjectType({
  name: 'PharmacyInput',
  fields: () => ({
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const DefenceEstablishmentInput = new GraphQLInputObjectType({
  name: 'DefenceEstablishmentInput',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const BreadcrumbListInput = new GraphQLInputObjectType({
  name: 'BreadcrumbListInput',
  fields: () => ({
    itemListElement: { type: GraphQLList(itemListElement) },
    itemListOrder: { type: GraphQLList(ItemListOrderType) },
    numberOfItems: { type: GraphQLList(GraphQLInt) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ChurchInput = new GraphQLInputObjectType({
  name: 'ChurchInput',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const LiquorStoreInput = new GraphQLInputObjectType({
  name: 'LiquorStoreInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const PublicationIssueInput = new GraphQLInputObjectType({
  name: 'PublicationIssueInput',
  fields: () => ({
    pagination: { type: GraphQLList(GraphQLString) },
    issueNumber: { type: GraphQLList(GraphQLString) },
    pageEnd: { type: GraphQLList(GraphQLString) },
    pageStart: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const GameServerStatusInput = new GraphQLInputObjectType({
  name: 'GameServerStatusInput',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ArticleInput = new GraphQLInputObjectType({
  name: 'ArticleInput',
  fields: () => ({
    printColumn: { type: GraphQLList(GraphQLString) },
    printEdition: { type: GraphQLList(GraphQLString) },
    printSection: { type: GraphQLList(GraphQLString) },
    printPage: { type: GraphQLList(GraphQLString) },
    dateline: { type: GraphQLList(GraphQLString) },
    pagination: { type: GraphQLList(GraphQLString) },
    wordCount: { type: GraphQLList(GraphQLInt) },
    speakable: { type: GraphQLList(SpeakableSpecification) },
    pageEnd: { type: GraphQLList(GraphQLString) },
    articleSection: { type: GraphQLList(GraphQLString) },
    articleBody: { type: GraphQLList(GraphQLString) },
    pageStart: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const UserTweetsInput = new GraphQLInputObjectType({
  name: 'UserTweetsInput',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const EnumerationInput = new GraphQLInputObjectType({
  name: 'EnumerationInput',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const WebPageElementInput = new GraphQLInputObjectType({
  name: 'WebPageElementInput',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const VideoGameInput = new GraphQLInputObjectType({
  name: 'VideoGameInput',
  fields: () => ({
    gamePlatform: { type: GraphQLList(Thing) },
    gameServer: { type: GraphQLList(GameServer) },
    actor: { type: GraphQLList(Person) },
    trailer: { type: GraphQLList(VideoObject) },
    cheatCode: { type: GraphQLList(CreativeWork) },
    gameTip: { type: GraphQLList(CreativeWork) },
    musicBy: { type: GraphQLList(musicBy) },
    directors: { type: GraphQLList(Person) },
    playMode: { type: GraphQLList(GamePlayMode) },
    director: { type: GraphQLList(Person) },
    actors: { type: GraphQLList(Person) },
    downloadUrl: { type: GraphQLList(GraphQLString) },
    softwareRequirements: { type: GraphQLList(GraphQLString) },
    permissions: { type: GraphQLList(GraphQLString) },
    processorRequirements: { type: GraphQLList(GraphQLString) },
    availableOnDevice: { type: GraphQLList(GraphQLString) },
    featureList: { type: GraphQLList(GraphQLString) },
    applicationSubCategory: { type: GraphQLList(GraphQLString) },
    device: { type: GraphQLList(GraphQLString) },
    applicationCategory: { type: GraphQLList(GraphQLString) },
    softwareVersion: { type: GraphQLList(GraphQLString) },
    storageRequirements: { type: GraphQLList(GraphQLString) },
    applicationSuite: { type: GraphQLList(GraphQLString) },
    memoryRequirements: { type: GraphQLList(GraphQLString) },
    screenshot: { type: GraphQLList(ImageObject) },
    countriesSupported: { type: GraphQLList(GraphQLString) },
    softwareHelp: { type: GraphQLList(CreativeWork) },
    softwareAddOn: { type: GraphQLList(SoftwareApplication) },
    releaseNotes: { type: GraphQLList(GraphQLString) },
    supportingData: { type: GraphQLList(DataFeed) },
    requirements: { type: GraphQLList(GraphQLString) },
    countriesNotSupported: { type: GraphQLList(GraphQLString) },
    operatingSystem: { type: GraphQLList(GraphQLString) },
    fileSize: { type: GraphQLList(GraphQLString) },
    installUrl: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    gameItem: { type: GraphQLList(Thing) },
    characterAttribute: { type: GraphQLList(Thing) },
    gameLocation: { type: GraphQLList(gameLocation) },
    quest: { type: GraphQLList(Thing) },
    numberOfPlayers: { type: GraphQLList(QuantitativeValue) },

  })
});

const UserInteractionInput = new GraphQLInputObjectType({
  name: 'UserInteractionInput',
  fields: () => ({
    discusses: { type: GraphQLList(CreativeWork) },
    commentText: { type: GraphQLList(GraphQLString) },
    commentTime: { type: GraphQLList(GraphQLString) },
    creator: { type: GraphQLList(creator) },
    replyToUrl: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const MobilePhoneStoreInput = new GraphQLInputObjectType({
  name: 'MobilePhoneStoreInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const AirlineInput = new GraphQLInputObjectType({
  name: 'AirlineInput',
  fields: () => ({
    iataCode: { type: GraphQLList(GraphQLString) },
    boardingPolicy: { type: GraphQLList(BoardingPolicyType) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const LiveBlogPostingInput = new GraphQLInputObjectType({
  name: 'LiveBlogPostingInput',
  fields: () => ({
    coverageStartTime: { type: GraphQLList(GraphQLString) },
    coverageEndTime: { type: GraphQLList(GraphQLString) },
    liveBlogUpdate: { type: GraphQLList(BlogPosting) },
    sharedContent: { type: GraphQLList(CreativeWork) },
    pagination: { type: GraphQLList(GraphQLString) },
    wordCount: { type: GraphQLList(GraphQLInt) },
    speakable: { type: GraphQLList(SpeakableSpecification) },
    pageEnd: { type: GraphQLList(GraphQLString) },
    articleSection: { type: GraphQLList(GraphQLString) },
    articleBody: { type: GraphQLList(GraphQLString) },
    pageStart: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const BikeStoreInput = new GraphQLInputObjectType({
  name: 'BikeStoreInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const BuddhistTempleInput = new GraphQLInputObjectType({
  name: 'BuddhistTempleInput',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const MenuSectionInput = new GraphQLInputObjectType({
  name: 'MenuSectionInput',
  fields: () => ({
    hasMenuItem: { type: GraphQLList(MenuItem) },
    hasMenuSection: { type: GraphQLList(MenuSection) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const AutoRentalInput = new GraphQLInputObjectType({
  name: 'AutoRentalInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const AchieveActionInput = new GraphQLInputObjectType({
  name: 'AchieveActionInput',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const HotelRoomInput = new GraphQLInputObjectType({
  name: 'HotelRoomInput',
  fields: () => ({
    occupancy: { type: GraphQLList(QuantitativeValue) },
    bed: { type: GraphQLList(bed) },
    floorSize: { type: GraphQLList(QuantitativeValue) },
    petsAllowed: { type: GraphQLList(GraphQLString) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    numberOfRooms: { type: GraphQLList(QuantitativeValue) },
    permittedUsage: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const BroadcastEventInput = new GraphQLInputObjectType({
  name: 'BroadcastEventInput',
  fields: () => ({
    videoFormat: { type: GraphQLList(GraphQLString) },
    isLiveBroadcast: { type: GraphQLList(GraphQLBoolean) },
    broadcastOfEvent: { type: GraphQLList(Event) },
    publishedOn: { type: GraphQLList(BroadcastService) },
    free: { type: GraphQLList(GraphQLBoolean) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ZooInput = new GraphQLInputObjectType({
  name: 'ZooInput',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const WebSiteInput = new GraphQLInputObjectType({
  name: 'WebSiteInput',
  fields: () => ({
    issn: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const MovieInput = new GraphQLInputObjectType({
  name: 'MovieInput',
  fields: () => ({
    actor: { type: GraphQLList(Person) },
    trailer: { type: GraphQLList(VideoObject) },
    subtitleLanguage: { type: GraphQLList(Language) },
    countryOfOrigin: { type: GraphQLList(Country) },
    musicBy: { type: GraphQLList(musicBy) },
    directors: { type: GraphQLList(Person) },
    director: { type: GraphQLList(Person) },
    productionCompany: { type: GraphQLList(Organization) },
    duration: { type: GraphQLList(Duration) },
    actors: { type: GraphQLList(Person) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const EventReservationInput = new GraphQLInputObjectType({
  name: 'EventReservationInput',
  fields: () => ({
    provider: { type: GraphQLList(provider) },
    programMembershipUsed: { type: GraphQLList(ProgramMembership) },
    reservationStatus: { type: GraphQLList(ReservationStatusType) },
    underName: { type: GraphQLList(underName) },
    bookingAgent: { type: GraphQLList(bookingAgent) },
    totalPrice: { type: GraphQLList(PriceSpecification) },
    reservationFor: { type: GraphQLList(Thing) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    broker: { type: GraphQLList(broker) },
    modifiedTime: { type: GraphQLList(GraphQLString) },
    bookingTime: { type: GraphQLList(GraphQLString) },
    reservationId: { type: GraphQLList(GraphQLString) },
    reservedTicket: { type: GraphQLList(Ticket) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const OrganizeActionInput = new GraphQLInputObjectType({
  name: 'OrganizeActionInput',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const AudienceInput = new GraphQLInputObjectType({
  name: 'AudienceInput',
  fields: () => ({
    yearsInOperation: { type: GraphQLList(QuantitativeValue) },
    yearlyRevenue: { type: GraphQLList(QuantitativeValue) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    audienceType: { type: GraphQLList(GraphQLString) },
    geographicArea: { type: GraphQLList(AdministrativeArea) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const RestaurantInput = new GraphQLInputObjectType({
  name: 'RestaurantInput',
  fields: () => ({
    servesCuisine: { type: GraphQLList(GraphQLString) },
    hasMenu: { type: GraphQLList(Menu) },
    menu: { type: GraphQLList(Menu) },
    starRating: { type: GraphQLList(Rating) },
    acceptsReservations: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const UseActionInput = new GraphQLInputObjectType({
  name: 'UseActionInput',
  fields: () => ({
    actionAccessibilityRequirement: { type: GraphQLList(ActionAccessSpecification) },
    expectsAcceptanceOf: { type: GraphQLList(Offer) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const APIReferenceInput = new GraphQLInputObjectType({
  name: 'APIReferenceInput',
  fields: () => ({
    executableLibraryName: { type: GraphQLList(GraphQLString) },
    assemblyVersion: { type: GraphQLList(GraphQLString) },
    programmingModel: { type: GraphQLList(GraphQLString) },
    assembly: { type: GraphQLList(GraphQLString) },
    targetPlatform: { type: GraphQLList(GraphQLString) },
    dependencies: { type: GraphQLList(GraphQLString) },
    proficiencyLevel: { type: GraphQLList(GraphQLString) },
    pagination: { type: GraphQLList(GraphQLString) },
    wordCount: { type: GraphQLList(GraphQLInt) },
    speakable: { type: GraphQLList(SpeakableSpecification) },
    pageEnd: { type: GraphQLList(GraphQLString) },
    articleSection: { type: GraphQLList(GraphQLString) },
    articleBody: { type: GraphQLList(GraphQLString) },
    pageStart: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const DepartmentStoreInput = new GraphQLInputObjectType({
  name: 'DepartmentStoreInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const FilmActionInput = new GraphQLInputObjectType({
  name: 'FilmActionInput',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const SoftwareApplicationInput = new GraphQLInputObjectType({
  name: 'SoftwareApplicationInput',
  fields: () => ({
    browserRequirements: { type: GraphQLList(GraphQLString) },
    downloadUrl: { type: GraphQLList(GraphQLString) },
    softwareRequirements: { type: GraphQLList(GraphQLString) },
    permissions: { type: GraphQLList(GraphQLString) },
    processorRequirements: { type: GraphQLList(GraphQLString) },
    availableOnDevice: { type: GraphQLList(GraphQLString) },
    featureList: { type: GraphQLList(GraphQLString) },
    applicationSubCategory: { type: GraphQLList(GraphQLString) },
    device: { type: GraphQLList(GraphQLString) },
    applicationCategory: { type: GraphQLList(GraphQLString) },
    softwareVersion: { type: GraphQLList(GraphQLString) },
    storageRequirements: { type: GraphQLList(GraphQLString) },
    applicationSuite: { type: GraphQLList(GraphQLString) },
    memoryRequirements: { type: GraphQLList(GraphQLString) },
    screenshot: { type: GraphQLList(ImageObject) },
    countriesSupported: { type: GraphQLList(GraphQLString) },
    softwareHelp: { type: GraphQLList(CreativeWork) },
    softwareAddOn: { type: GraphQLList(SoftwareApplication) },
    releaseNotes: { type: GraphQLList(GraphQLString) },
    supportingData: { type: GraphQLList(DataFeed) },
    requirements: { type: GraphQLList(GraphQLString) },
    countriesNotSupported: { type: GraphQLList(GraphQLString) },
    operatingSystem: { type: GraphQLList(GraphQLString) },
    fileSize: { type: GraphQLList(GraphQLString) },
    installUrl: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const CodeInput = new GraphQLInputObjectType({
  name: 'CodeInput',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const SportingGoodsStoreInput = new GraphQLInputObjectType({
  name: 'SportingGoodsStoreInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const TextDigitalDocumentInput = new GraphQLInputObjectType({
  name: 'TextDigitalDocumentInput',
  fields: () => ({
    hasDigitalDocumentPermission: { type: GraphQLList(DigitalDocumentPermission) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const QuantitativeValueDistributionInput = new GraphQLInputObjectType({
  name: 'QuantitativeValueDistributionInput',
  fields: () => ({
    currency: { type: GraphQLList(GraphQLString) },
    percentile10: { type: GraphQLList(GraphQLFloat) },
    percentile25: { type: GraphQLList(GraphQLFloat) },
    median: { type: GraphQLList(GraphQLFloat) },
    duration: { type: GraphQLList(Duration) },
    percentile90: { type: GraphQLList(GraphQLFloat) },
    percentile75: { type: GraphQLList(GraphQLFloat) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const WaterfallInput = new GraphQLInputObjectType({
  name: 'WaterfallInput',
  fields: () => ({
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const OfficeEquipmentStoreInput = new GraphQLInputObjectType({
  name: 'OfficeEquipmentStoreInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const AutoWashInput = new GraphQLInputObjectType({
  name: 'AutoWashInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const PlanActionInput = new GraphQLInputObjectType({
  name: 'PlanActionInput',
  fields: () => ({
    scheduledTime: { type: GraphQLList(GraphQLString) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const MovieTheaterInput = new GraphQLInputObjectType({
  name: 'MovieTheaterInput',
  fields: () => ({
    screenCount: { type: GraphQLList(GraphQLFloat) },
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    members: { type: GraphQLList(members) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    employees: { type: GraphQLList(Person) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },

  })
});

const BakeryInput = new GraphQLInputObjectType({
  name: 'BakeryInput',
  fields: () => ({
    servesCuisine: { type: GraphQLList(GraphQLString) },
    hasMenu: { type: GraphQLList(Menu) },
    menu: { type: GraphQLList(Menu) },
    starRating: { type: GraphQLList(Rating) },
    acceptsReservations: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const GatedResidenceCommunityInput = new GraphQLInputObjectType({
  name: 'GatedResidenceCommunityInput',
  fields: () => ({
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const CountryInput = new GraphQLInputObjectType({
  name: 'CountryInput',
  fields: () => ({
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const PlaceOfWorshipInput = new GraphQLInputObjectType({
  name: 'PlaceOfWorshipInput',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const HowToTipInput = new GraphQLInputObjectType({
  name: 'HowToTipInput',
  fields: () => ({
    nextItem: { type: GraphQLList(ListItem) },
    position: { type: GraphQLList(GraphQLString) },
    previousItem: { type: GraphQLList(ListItem) },
    item: { type: GraphQLList(Thing) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },

  })
});

const ComputerLanguageInput = new GraphQLInputObjectType({
  name: 'ComputerLanguageInput',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const PerformanceRoleInput = new GraphQLInputObjectType({
  name: 'PerformanceRoleInput',
  fields: () => ({
    characterName: { type: GraphQLList(GraphQLString) },
    endDate: { type: GraphQLList(GraphQLString) },
    startDate: { type: GraphQLList(GraphQLString) },
    namedPosition: { type: GraphQLList(GraphQLString) },
    roleName: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const UnitPriceSpecificationInput = new GraphQLInputObjectType({
  name: 'UnitPriceSpecificationInput',
  fields: () => ({
    unitCode: { type: GraphQLList(GraphQLString) },
    billingIncrement: { type: GraphQLList(GraphQLFloat) },
    referenceQuantity: { type: GraphQLList(QuantitativeValue) },
    unitText: { type: GraphQLList(GraphQLString) },
    priceType: { type: GraphQLList(GraphQLString) },
    minPrice: { type: GraphQLList(GraphQLFloat) },
    eligibleTransactionVolume: { type: GraphQLList(PriceSpecification) },
    maxPrice: { type: GraphQLList(GraphQLFloat) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    eligibleQuantity: { type: GraphQLList(QuantitativeValue) },
    validFrom: { type: GraphQLList(GraphQLString) },
    validThrough: { type: GraphQLList(GraphQLString) },
    price: { type: GraphQLList(GraphQLString) },
    valueAddedTaxIncluded: { type: GraphQLList(GraphQLBoolean) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const PerformActionInput = new GraphQLInputObjectType({
  name: 'PerformActionInput',
  fields: () => ({
    entertainmentBusiness: { type: GraphQLList(EntertainmentBusiness) },
    audience: { type: GraphQLList(Audience) },
    event: { type: GraphQLList(Event) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const BedTypeInput = new GraphQLInputObjectType({
  name: 'BedTypeInput',
  fields: () => ({
    greater: { type: GraphQLList(QualitativeValue) },
    equal: { type: GraphQLList(QualitativeValue) },
    nonEqual: { type: GraphQLList(QualitativeValue) },
    greaterOrEqual: { type: GraphQLList(QualitativeValue) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    lesser: { type: GraphQLList(QualitativeValue) },
    valueReference: { type: GraphQLList(valueReference) },
    lesserOrEqual: { type: GraphQLList(QualitativeValue) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ClothingStoreInput = new GraphQLInputObjectType({
  name: 'ClothingStoreInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const MountainInput = new GraphQLInputObjectType({
  name: 'MountainInput',
  fields: () => ({
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const CivicStructureInput = new GraphQLInputObjectType({
  name: 'CivicStructureInput',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ReceiveActionInput = new GraphQLInputObjectType({
  name: 'ReceiveActionInput',
  fields: () => ({
    deliveryMethod: { type: GraphQLList(DeliveryMethod) },
    sender: { type: GraphQLList(sender) },
    toLocation: { type: GraphQLList(Place) },
    fromLocation: { type: GraphQLList(Place) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const VideoGameClipInput = new GraphQLInputObjectType({
  name: 'VideoGameClipInput',
  fields: () => ({
    actor: { type: GraphQLList(Person) },
    partOfEpisode: { type: GraphQLList(Episode) },
    partOfSeries: { type: GraphQLList(CreativeWorkSeries) },
    partOfSeason: { type: GraphQLList(CreativeWorkSeason) },
    musicBy: { type: GraphQLList(musicBy) },
    directors: { type: GraphQLList(Person) },
    director: { type: GraphQLList(Person) },
    actors: { type: GraphQLList(Person) },
    clipNumber: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const MusicStoreInput = new GraphQLInputObjectType({
  name: 'MusicStoreInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const CrematoriumInput = new GraphQLInputObjectType({
  name: 'CrematoriumInput',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const QuoteActionInput = new GraphQLInputObjectType({
  name: 'QuoteActionInput',
  fields: () => ({
    priceSpecification: { type: GraphQLList(PriceSpecification) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    price: { type: GraphQLList(GraphQLString) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ListItemInput = new GraphQLInputObjectType({
  name: 'ListItemInput',
  fields: () => ({
    beforeMedia: { type: GraphQLList(MediaObject) },
    prepTime: { type: GraphQLList(Duration) },
    tool: { type: GraphQLList(HowToTool) },
    performTime: { type: GraphQLList(Duration) },
    totalTime: { type: GraphQLList(Duration) },
    supply: { type: GraphQLList(HowToSupply) },
    afterMedia: { type: GraphQLList(MediaObject) },
    duringMedia: { type: GraphQLList(MediaObject) },
    nextItem: { type: GraphQLList(ListItem) },
    position: { type: GraphQLList(GraphQLString) },
    previousItem: { type: GraphQLList(ListItem) },
    item: { type: GraphQLList(Thing) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },

  })
});

const ContactPageInput = new GraphQLInputObjectType({
  name: 'ContactPageInput',
  fields: () => ({
    speakable: { type: GraphQLList(SpeakableSpecification) },
    breadcrumb: { type: GraphQLList(BreadcrumbList) },
    significantLink: { type: GraphQLList(GraphQLString) },
    relatedLink: { type: GraphQLList(GraphQLString) },
    lastReviewed: { type: GraphQLList(GraphQLString) },
    mainContentOfPage: { type: GraphQLList(WebPageElement) },
    reviewedBy: { type: GraphQLList(reviewedBy) },
    primaryImageOfPage: { type: GraphQLList(ImageObject) },
    significantLinks: { type: GraphQLList(GraphQLString) },
    specialty: { type: GraphQLList(Specialty) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const WebApplicationInput = new GraphQLInputObjectType({
  name: 'WebApplicationInput',
  fields: () => ({
    browserRequirements: { type: GraphQLList(GraphQLString) },
    downloadUrl: { type: GraphQLList(GraphQLString) },
    softwareRequirements: { type: GraphQLList(GraphQLString) },
    permissions: { type: GraphQLList(GraphQLString) },
    processorRequirements: { type: GraphQLList(GraphQLString) },
    availableOnDevice: { type: GraphQLList(GraphQLString) },
    featureList: { type: GraphQLList(GraphQLString) },
    applicationSubCategory: { type: GraphQLList(GraphQLString) },
    device: { type: GraphQLList(GraphQLString) },
    applicationCategory: { type: GraphQLList(GraphQLString) },
    softwareVersion: { type: GraphQLList(GraphQLString) },
    storageRequirements: { type: GraphQLList(GraphQLString) },
    applicationSuite: { type: GraphQLList(GraphQLString) },
    memoryRequirements: { type: GraphQLList(GraphQLString) },
    screenshot: { type: GraphQLList(ImageObject) },
    countriesSupported: { type: GraphQLList(GraphQLString) },
    softwareHelp: { type: GraphQLList(CreativeWork) },
    softwareAddOn: { type: GraphQLList(SoftwareApplication) },
    releaseNotes: { type: GraphQLList(GraphQLString) },
    supportingData: { type: GraphQLList(DataFeed) },
    requirements: { type: GraphQLList(GraphQLString) },
    countriesNotSupported: { type: GraphQLList(GraphQLString) },
    operatingSystem: { type: GraphQLList(GraphQLString) },
    fileSize: { type: GraphQLList(GraphQLString) },
    installUrl: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const BroadcastFrequencySpecificationInput = new GraphQLInputObjectType({
  name: 'BroadcastFrequencySpecificationInput',
  fields: () => ({
    broadcastFrequencyValue: { type: GraphQLList(QuantitativeValue) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const BlogPostingInput = new GraphQLInputObjectType({
  name: 'BlogPostingInput',
  fields: () => ({
    sharedContent: { type: GraphQLList(CreativeWork) },
    pagination: { type: GraphQLList(GraphQLString) },
    wordCount: { type: GraphQLList(GraphQLInt) },
    speakable: { type: GraphQLList(SpeakableSpecification) },
    pageEnd: { type: GraphQLList(GraphQLString) },
    articleSection: { type: GraphQLList(GraphQLString) },
    articleBody: { type: GraphQLList(GraphQLString) },
    pageStart: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const LodgingReservationInput = new GraphQLInputObjectType({
  name: 'LodgingReservationInput',
  fields: () => ({
    checkinTime: { type: GraphQLList(GraphQLString) },
    numChildren: { type: GraphQLList(QuantitativeValue) },
    lodgingUnitDescription: { type: GraphQLList(GraphQLString) },
    checkoutTime: { type: GraphQLList(GraphQLString) },
    lodgingUnitType: { type: GraphQLList(QualitativeValue) },
    numAdults: { type: GraphQLList(QuantitativeValue) },
    provider: { type: GraphQLList(provider) },
    programMembershipUsed: { type: GraphQLList(ProgramMembership) },
    reservationStatus: { type: GraphQLList(ReservationStatusType) },
    underName: { type: GraphQLList(underName) },
    bookingAgent: { type: GraphQLList(bookingAgent) },
    totalPrice: { type: GraphQLList(PriceSpecification) },
    reservationFor: { type: GraphQLList(Thing) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    broker: { type: GraphQLList(broker) },
    modifiedTime: { type: GraphQLList(GraphQLString) },
    bookingTime: { type: GraphQLList(GraphQLString) },
    reservationId: { type: GraphQLList(GraphQLString) },
    reservedTicket: { type: GraphQLList(Ticket) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const PreOrderActionInput = new GraphQLInputObjectType({
  name: 'PreOrderActionInput',
  fields: () => ({
    priceSpecification: { type: GraphQLList(PriceSpecification) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    price: { type: GraphQLList(GraphQLString) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const MediaSubscriptionInput = new GraphQLInputObjectType({
  name: 'MediaSubscriptionInput',
  fields: () => ({
    authenticator: { type: GraphQLList(Organization) },
    expectsAcceptanceOf: { type: GraphQLList(Offer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const PresentationDigitalDocumentInput = new GraphQLInputObjectType({
  name: 'PresentationDigitalDocumentInput',
  fields: () => ({
    hasDigitalDocumentPermission: { type: GraphQLList(DigitalDocumentPermission) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ReportInput = new GraphQLInputObjectType({
  name: 'ReportInput',
  fields: () => ({
    reportNumber: { type: GraphQLList(GraphQLString) },
    pagination: { type: GraphQLList(GraphQLString) },
    wordCount: { type: GraphQLList(GraphQLInt) },
    speakable: { type: GraphQLList(SpeakableSpecification) },
    pageEnd: { type: GraphQLList(GraphQLString) },
    articleSection: { type: GraphQLList(GraphQLString) },
    articleBody: { type: GraphQLList(GraphQLString) },
    pageStart: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const BookInput = new GraphQLInputObjectType({
  name: 'BookInput',
  fields: () => ({
    isbn: { type: GraphQLList(GraphQLString) },
    bookEdition: { type: GraphQLList(GraphQLString) },
    bookFormat: { type: GraphQLList(BookFormatType) },
    illustrator: { type: GraphQLList(Person) },
    numberOfPages: { type: GraphQLList(GraphQLInt) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const OfferItemConditionInput = new GraphQLInputObjectType({
  name: 'OfferItemConditionInput',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const LocationFeatureSpecificationInput = new GraphQLInputObjectType({
  name: 'LocationFeatureSpecificationInput',
  fields: () => ({
    hoursAvailable: { type: GraphQLList(OpeningHoursSpecification) },
    validFrom: { type: GraphQLList(GraphQLString) },
    validThrough: { type: GraphQLList(GraphQLString) },
    unitCode: { type: GraphQLList(GraphQLString) },
    minValue: { type: GraphQLList(GraphQLFloat) },
    propertyID: { type: GraphQLList(GraphQLString) },
    value: { type: GraphQLList(StructuredValue) },
    valueReference: { type: GraphQLList(valueReference) },
    maxValue: { type: GraphQLList(GraphQLFloat) },
    unitText: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const MusicReleaseInput = new GraphQLInputObjectType({
  name: 'MusicReleaseInput',
  fields: () => ({
    recordLabel: { type: GraphQLList(Organization) },
    catalogNumber: { type: GraphQLList(GraphQLString) },
    creditedTo: { type: GraphQLList(creditedTo) },
    releaseOf: { type: GraphQLList(MusicAlbum) },
    duration: { type: GraphQLList(Duration) },
    musicReleaseFormat: { type: GraphQLList(MusicReleaseFormatType) },
    numTracks: { type: GraphQLList(GraphQLInt) },
    track: { type: GraphQLList(track) },
    tracks: { type: GraphQLList(MusicRecording) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const TechArticleInput = new GraphQLInputObjectType({
  name: 'TechArticleInput',
  fields: () => ({
    dependencies: { type: GraphQLList(GraphQLString) },
    proficiencyLevel: { type: GraphQLList(GraphQLString) },
    pagination: { type: GraphQLList(GraphQLString) },
    wordCount: { type: GraphQLList(GraphQLInt) },
    speakable: { type: GraphQLList(SpeakableSpecification) },
    pageEnd: { type: GraphQLList(GraphQLString) },
    articleSection: { type: GraphQLList(GraphQLString) },
    articleBody: { type: GraphQLList(GraphQLString) },
    pageStart: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const SculptureInput = new GraphQLInputObjectType({
  name: 'SculptureInput',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ComputerStoreInput = new GraphQLInputObjectType({
  name: 'ComputerStoreInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const RadioStationInput = new GraphQLInputObjectType({
  name: 'RadioStationInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const MapInput = new GraphQLInputObjectType({
  name: 'MapInput',
  fields: () => ({
    mapType: { type: GraphQLList(MapCategoryType) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const GolfCourseInput = new GraphQLInputObjectType({
  name: 'GolfCourseInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const DepartActionInput = new GraphQLInputObjectType({
  name: 'DepartActionInput',
  fields: () => ({
    toLocation: { type: GraphQLList(Place) },
    fromLocation: { type: GraphQLList(Place) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ActionAccessSpecificationInput = new GraphQLInputObjectType({
  name: 'ActionAccessSpecificationInput',
  fields: () => ({
    availabilityStarts: { type: GraphQLList(GraphQLString) },
    requiresSubscription: { type: GraphQLList(MediaSubscription) },
    category: { type: GraphQLList(Thing) },
    availabilityEnds: { type: GraphQLList(GraphQLString) },
    expectsAcceptanceOf: { type: GraphQLList(Offer) },
    eligibleRegion: { type: GraphQLList(eligibleRegion) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const CommentInput = new GraphQLInputObjectType({
  name: 'CommentInput',
  fields: () => ({
    upvoteCount: { type: GraphQLList(GraphQLInt) },
    parentItem: { type: GraphQLList(Question) },
    downvoteCount: { type: GraphQLList(GraphQLInt) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ShoeStoreInput = new GraphQLInputObjectType({
  name: 'ShoeStoreInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const SuspendActionInput = new GraphQLInputObjectType({
  name: 'SuspendActionInput',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const WPSideBarInput = new GraphQLInputObjectType({
  name: 'WPSideBarInput',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const FlightReservationInput = new GraphQLInputObjectType({
  name: 'FlightReservationInput',
  fields: () => ({
    boardingGroup: { type: GraphQLList(GraphQLString) },
    passengerSequenceNumber: { type: GraphQLList(GraphQLString) },
    securityScreening: { type: GraphQLList(GraphQLString) },
    passengerPriorityStatus: { type: GraphQLList(QualitativeValue) },
    provider: { type: GraphQLList(provider) },
    programMembershipUsed: { type: GraphQLList(ProgramMembership) },
    reservationStatus: { type: GraphQLList(ReservationStatusType) },
    underName: { type: GraphQLList(underName) },
    bookingAgent: { type: GraphQLList(bookingAgent) },
    totalPrice: { type: GraphQLList(PriceSpecification) },
    reservationFor: { type: GraphQLList(Thing) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    broker: { type: GraphQLList(broker) },
    modifiedTime: { type: GraphQLList(GraphQLString) },
    bookingTime: { type: GraphQLList(GraphQLString) },
    reservationId: { type: GraphQLList(GraphQLString) },
    reservedTicket: { type: GraphQLList(Ticket) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const AlignmentObjectInput = new GraphQLInputObjectType({
  name: 'AlignmentObjectInput',
  fields: () => ({
    targetDescription: { type: GraphQLList(GraphQLString) },
    alignmentType: { type: GraphQLList(GraphQLString) },
    targetUrl: { type: GraphQLList(GraphQLString) },
    targetName: { type: GraphQLList(GraphQLString) },
    educationalFramework: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const SellActionInput = new GraphQLInputObjectType({
  name: 'SellActionInput',
  fields: () => ({
    buyer: { type: GraphQLList(Person) },
    warrantyPromise: { type: GraphQLList(WarrantyPromise) },
    priceSpecification: { type: GraphQLList(PriceSpecification) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    price: { type: GraphQLList(GraphQLString) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const PetStoreInput = new GraphQLInputObjectType({
  name: 'PetStoreInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const OnDemandEventInput = new GraphQLInputObjectType({
  name: 'OnDemandEventInput',
  fields: () => ({
    publishedOn: { type: GraphQLList(BroadcastService) },
    free: { type: GraphQLList(GraphQLBoolean) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const AutoDealerInput = new GraphQLInputObjectType({
  name: 'AutoDealerInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const ChooseActionInput = new GraphQLInputObjectType({
  name: 'ChooseActionInput',
  fields: () => ({
    candidate: { type: GraphQLList(Person) },
    actionOption: { type: GraphQLList(Thing) },
    option: { type: GraphQLList(Thing) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const RestrictedDietInput = new GraphQLInputObjectType({
  name: 'RestrictedDietInput',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const GovernmentOfficeInput = new GraphQLInputObjectType({
  name: 'GovernmentOfficeInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const PlaceInput = new GraphQLInputObjectType({
  name: 'PlaceInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const QualitativeValueInput = new GraphQLInputObjectType({
  name: 'QualitativeValueInput',
  fields: () => ({
    greater: { type: GraphQLList(QualitativeValue) },
    equal: { type: GraphQLList(QualitativeValue) },
    nonEqual: { type: GraphQLList(QualitativeValue) },
    greaterOrEqual: { type: GraphQLList(QualitativeValue) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    lesser: { type: GraphQLList(QualitativeValue) },
    valueReference: { type: GraphQLList(valueReference) },
    lesserOrEqual: { type: GraphQLList(QualitativeValue) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const SendActionInput = new GraphQLInputObjectType({
  name: 'SendActionInput',
  fields: () => ({
    recipient: { type: GraphQLList(recipient) },
    deliveryMethod: { type: GraphQLList(DeliveryMethod) },
    toLocation: { type: GraphQLList(Place) },
    fromLocation: { type: GraphQLList(Place) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const LeaveActionInput = new GraphQLInputObjectType({
  name: 'LeaveActionInput',
  fields: () => ({
    event: { type: GraphQLList(Event) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const GasStationInput = new GraphQLInputObjectType({
  name: 'GasStationInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const MosqueInput = new GraphQLInputObjectType({
  name: 'MosqueInput',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const CommentActionInput = new GraphQLInputObjectType({
  name: 'CommentActionInput',
  fields: () => ({
    resultComment: { type: GraphQLList(Comment) },
    about: { type: GraphQLList(Thing) },
    inLanguage: { type: GraphQLList(Language) },
    recipient: { type: GraphQLList(recipient) },
    language: { type: GraphQLList(Language) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const LibraryInput = new GraphQLInputObjectType({
  name: 'LibraryInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const TouristInformationCenterInput = new GraphQLInputObjectType({
  name: 'TouristInformationCenterInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const MusicCompositionInput = new GraphQLInputObjectType({
  name: 'MusicCompositionInput',
  fields: () => ({
    musicCompositionForm: { type: GraphQLList(GraphQLString) },
    includedComposition: { type: GraphQLList(MusicComposition) },
    lyricist: { type: GraphQLList(Person) },
    recordedAs: { type: GraphQLList(MusicRecording) },
    firstPerformance: { type: GraphQLList(Event) },
    musicArrangement: { type: GraphQLList(MusicComposition) },
    lyrics: { type: GraphQLList(CreativeWork) },
    iswcCode: { type: GraphQLList(GraphQLString) },
    composer: { type: GraphQLList(composer) },
    musicalKey: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ProfessionalServiceInput = new GraphQLInputObjectType({
  name: 'ProfessionalServiceInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const AquariumInput = new GraphQLInputObjectType({
  name: 'AquariumInput',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const SelfStorageInput = new GraphQLInputObjectType({
  name: 'SelfStorageInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const ScholarlyArticleInput = new GraphQLInputObjectType({
  name: 'ScholarlyArticleInput',
  fields: () => ({
    pagination: { type: GraphQLList(GraphQLString) },
    wordCount: { type: GraphQLList(GraphQLInt) },
    speakable: { type: GraphQLList(SpeakableSpecification) },
    pageEnd: { type: GraphQLList(GraphQLString) },
    articleSection: { type: GraphQLList(GraphQLString) },
    articleBody: { type: GraphQLList(GraphQLString) },
    pageStart: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const GeoShapeInput = new GraphQLInputObjectType({
  name: 'GeoShapeInput',
  fields: () => ({
    geoRadius: { type: GraphQLList(Distance) },
    geoMidpoint: { type: GraphQLList(GeoCoordinates) },
    address: { type: GraphQLList(PostalAddress) },
    circle: { type: GraphQLList(GraphQLString) },
    box: { type: GraphQLList(GraphQLString) },
    addressCountry: { type: GraphQLList(Country) },
    postalCode: { type: GraphQLList(GraphQLString) },
    elevation: { type: GraphQLList(GraphQLString) },
    polygon: { type: GraphQLList(GraphQLString) },
    line: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const EntertainmentBusinessInput = new GraphQLInputObjectType({
  name: 'EntertainmentBusinessInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const BroadcastChannelInput = new GraphQLInputObjectType({
  name: 'BroadcastChannelInput',
  fields: () => ({
    broadcastFrequency: { type: GraphQLList(BroadcastFrequencySpecification) },
    broadcastChannelId: { type: GraphQLList(GraphQLString) },
    broadcastServiceTier: { type: GraphQLList(GraphQLString) },
    inBroadcastLineup: { type: GraphQLList(CableOrSatelliteService) },
    providesBroadcastService: { type: GraphQLList(BroadcastService) },
    genre: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const FloristInput = new GraphQLInputObjectType({
  name: 'FloristInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const MassInput = new GraphQLInputObjectType({
  name: 'MassInput',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const HowToToolInput = new GraphQLInputObjectType({
  name: 'HowToToolInput',
  fields: () => ({
    requiredQuantity: { type: GraphQLList(QuantitativeValue) },
    nextItem: { type: GraphQLList(ListItem) },
    position: { type: GraphQLList(GraphQLString) },
    previousItem: { type: GraphQLList(ListItem) },
    item: { type: GraphQLList(Thing) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const PaymentMethodInput = new GraphQLInputObjectType({
  name: 'PaymentMethodInput',
  fields: () => ({
    loanTerm: { type: GraphQLList(QuantitativeValue) },
    currency: { type: GraphQLList(GraphQLString) },
    amount: { type: GraphQLList(MonetaryAmount) },
    requiredCollateral: { type: GraphQLList(Thing) },
    interestRate: { type: GraphQLList(QuantitativeValue) },
    feesAndCommissionsSpecification: { type: GraphQLList(GraphQLString) },
    annualPercentageRate: { type: GraphQLList(QuantitativeValue) },
    serviceArea: { type: GraphQLList(serviceArea) },
    provider: { type: GraphQLList(provider) },
    serviceAudience: { type: GraphQLList(Audience) },
    audience: { type: GraphQLList(Audience) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    hoursAvailable: { type: GraphQLList(OpeningHoursSpecification) },
    providerMobility: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    broker: { type: GraphQLList(broker) },
    serviceOutput: { type: GraphQLList(Thing) },
    logo: { type: GraphQLList(ImageObject) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    availableChannel: { type: GraphQLList(ServiceChannel) },
    review: { type: GraphQLList(Review) },
    serviceType: { type: GraphQLList(GraphQLString) },
    produces: { type: GraphQLList(Thing) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const UserPlusOnesInput = new GraphQLInputObjectType({
  name: 'UserPlusOnesInput',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const BarcodeInput = new GraphQLInputObjectType({
  name: 'BarcodeInput',
  fields: () => ({
    exifData: { type: GraphQLList(GraphQLString) },
    representativeOfPage: { type: GraphQLList(GraphQLBoolean) },
    thumbnail: { type: GraphQLList(ImageObject) },
    caption: { type: GraphQLList(MediaObject) },
    startTime: { type: GraphQLList(GraphQLString) },
    uploadDate: { type: GraphQLList(GraphQLString) },
    playerType: { type: GraphQLList(GraphQLString) },
    height: { type: GraphQLList(height) },
    bitrate: { type: GraphQLList(GraphQLString) },
    requiresSubscription: { type: GraphQLList(MediaSubscription) },
    regionsAllowed: { type: GraphQLList(Place) },
    endTime: { type: GraphQLList(GraphQLString) },
    contentSize: { type: GraphQLList(GraphQLString) },
    embedUrl: { type: GraphQLList(GraphQLString) },
    width: { type: GraphQLList(width) },
    contentUrl: { type: GraphQLList(GraphQLString) },
    associatedArticle: { type: GraphQLList(NewsArticle) },
    productionCompany: { type: GraphQLList(Organization) },
    duration: { type: GraphQLList(Duration) },
    encodesCreativeWork: { type: GraphQLList(CreativeWork) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const WebPageInput = new GraphQLInputObjectType({
  name: 'WebPageInput',
  fields: () => ({
    speakable: { type: GraphQLList(SpeakableSpecification) },
    breadcrumb: { type: GraphQLList(BreadcrumbList) },
    significantLink: { type: GraphQLList(GraphQLString) },
    relatedLink: { type: GraphQLList(GraphQLString) },
    lastReviewed: { type: GraphQLList(GraphQLString) },
    mainContentOfPage: { type: GraphQLList(WebPageElement) },
    reviewedBy: { type: GraphQLList(reviewedBy) },
    primaryImageOfPage: { type: GraphQLList(ImageObject) },
    significantLinks: { type: GraphQLList(GraphQLString) },
    specialty: { type: GraphQLList(Specialty) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ResidenceInput = new GraphQLInputObjectType({
  name: 'ResidenceInput',
  fields: () => ({
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const UserPageVisitsInput = new GraphQLInputObjectType({
  name: 'UserPageVisitsInput',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ContinentInput = new GraphQLInputObjectType({
  name: 'ContinentInput',
  fields: () => ({
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const BusTripInput = new GraphQLInputObjectType({
  name: 'BusTripInput',
  fields: () => ({
    busName: { type: GraphQLList(GraphQLString) },
    departureBusStop: { type: GraphQLList(departureBusStop) },
    arrivalBusStop: { type: GraphQLList(arrivalBusStop) },
    busNumber: { type: GraphQLList(GraphQLString) },
    provider: { type: GraphQLList(provider) },
    offers: { type: GraphQLList(Offer) },
    arrivalTime: { type: GraphQLList(GraphQLString) },
    departureTime: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const UnRegisterActionInput = new GraphQLInputObjectType({
  name: 'UnRegisterActionInput',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const LoseActionInput = new GraphQLInputObjectType({
  name: 'LoseActionInput',
  fields: () => ({
    winner: { type: GraphQLList(Person) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ShoppingCenterInput = new GraphQLInputObjectType({
  name: 'ShoppingCenterInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const FlightInput = new GraphQLInputObjectType({
  name: 'FlightInput',
  fields: () => ({
    arrivalAirport: { type: GraphQLList(Airport) },
    arrivalGate: { type: GraphQLList(GraphQLString) },
    carrier: { type: GraphQLList(Organization) },
    boardingPolicy: { type: GraphQLList(BoardingPolicyType) },
    aircraft: { type: GraphQLList(Vehicle) },
    seller: { type: GraphQLList(seller) },
    webCheckinTime: { type: GraphQLList(GraphQLString) },
    mealService: { type: GraphQLList(GraphQLString) },
    departureGate: { type: GraphQLList(GraphQLString) },
    departureTerminal: { type: GraphQLList(GraphQLString) },
    estimatedFlightDuration: { type: GraphQLList(Duration) },
    flightDistance: { type: GraphQLList(Distance) },
    arrivalTerminal: { type: GraphQLList(GraphQLString) },
    departureAirport: { type: GraphQLList(Airport) },
    flightNumber: { type: GraphQLList(GraphQLString) },
    provider: { type: GraphQLList(provider) },
    offers: { type: GraphQLList(Offer) },
    arrivalTime: { type: GraphQLList(GraphQLString) },
    departureTime: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const HowToStepInput = new GraphQLInputObjectType({
  name: 'HowToStepInput',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    nextItem: { type: GraphQLList(ListItem) },
    previousItem: { type: GraphQLList(ListItem) },
    item: { type: GraphQLList(Thing) },
    itemListElement: { type: GraphQLList(itemListElement) },
    itemListOrder: { type: GraphQLList(ItemListOrderType) },
    numberOfItems: { type: GraphQLList(GraphQLInt) },

  })
});

const OfferCatalogInput = new GraphQLInputObjectType({
  name: 'OfferCatalogInput',
  fields: () => ({
    itemListElement: { type: GraphQLList(itemListElement) },
    itemListOrder: { type: GraphQLList(ItemListOrderType) },
    numberOfItems: { type: GraphQLList(GraphQLInt) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const CreativeWorkSeriesInput = new GraphQLInputObjectType({
  name: 'CreativeWorkSeriesInput',
  fields: () => ({
    seasons: { type: GraphQLList(CreativeWorkSeason) },
    actor: { type: GraphQLList(Person) },
    numberOfEpisodes: { type: GraphQLList(GraphQLInt) },
    trailer: { type: GraphQLList(VideoObject) },
    season: { type: GraphQLList(CreativeWorkSeason) },
    episodes: { type: GraphQLList(Episode) },
    countryOfOrigin: { type: GraphQLList(Country) },
    musicBy: { type: GraphQLList(musicBy) },
    containsSeason: { type: GraphQLList(CreativeWorkSeason) },
    directors: { type: GraphQLList(Person) },
    numberOfSeasons: { type: GraphQLList(GraphQLInt) },
    director: { type: GraphQLList(Person) },
    productionCompany: { type: GraphQLList(Organization) },
    actors: { type: GraphQLList(Person) },
    episode: { type: GraphQLList(Episode) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    endDate: { type: GraphQLList(GraphQLString) },
    issn: { type: GraphQLList(GraphQLString) },
    startDate: { type: GraphQLList(GraphQLString) },

  })
});

const NightClubInput = new GraphQLInputObjectType({
  name: 'NightClubInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const ConfirmActionInput = new GraphQLInputObjectType({
  name: 'ConfirmActionInput',
  fields: () => ({
    event: { type: GraphQLList(Event) },
    about: { type: GraphQLList(Thing) },
    inLanguage: { type: GraphQLList(Language) },
    recipient: { type: GraphQLList(recipient) },
    language: { type: GraphQLList(Language) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const DataFeedInput = new GraphQLInputObjectType({
  name: 'DataFeedInput',
  fields: () => ({
    dataFeedElement: { type: GraphQLList(dataFeedElement) },
    includedInDataCatalog: { type: GraphQLList(DataCatalog) },
    datasetTimeInterval: { type: GraphQLList(GraphQLString) },
    issn: { type: GraphQLList(GraphQLString) },
    catalog: { type: GraphQLList(DataCatalog) },
    includedDataCatalog: { type: GraphQLList(DataCatalog) },
    distribution: { type: GraphQLList(DataDownload) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const StateInput = new GraphQLInputObjectType({
  name: 'StateInput',
  fields: () => ({
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const PlaygroundInput = new GraphQLInputObjectType({
  name: 'PlaygroundInput',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const AppendActionInput = new GraphQLInputObjectType({
  name: 'AppendActionInput',
  fields: () => ({
    toLocation: { type: GraphQLList(Place) },
    collection: { type: GraphQLList(Thing) },
    targetCollection: { type: GraphQLList(Thing) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const InteractionCounterInput = new GraphQLInputObjectType({
  name: 'InteractionCounterInput',
  fields: () => ({
    interactionService: { type: GraphQLList(interactionService) },
    userInteractionCount: { type: GraphQLList(GraphQLInt) },
    interactionType: { type: GraphQLList(Action) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ParkingFacilityInput = new GraphQLInputObjectType({
  name: 'ParkingFacilityInput',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const CookActionInput = new GraphQLInputObjectType({
  name: 'CookActionInput',
  fields: () => ({
    foodEstablishment: { type: GraphQLList(foodEstablishment) },
    recipe: { type: GraphQLList(Recipe) },
    foodEvent: { type: GraphQLList(FoodEvent) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const AuthorizeActionInput = new GraphQLInputObjectType({
  name: 'AuthorizeActionInput',
  fields: () => ({
    recipient: { type: GraphQLList(recipient) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const BookSeriesInput = new GraphQLInputObjectType({
  name: 'BookSeriesInput',
  fields: () => ({
    endDate: { type: GraphQLList(GraphQLString) },
    issn: { type: GraphQLList(GraphQLString) },
    startDate: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },

  })
});

const UserDownloadsInput = new GraphQLInputObjectType({
  name: 'UserDownloadsInput',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const PawnShopInput = new GraphQLInputObjectType({
  name: 'PawnShopInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const AssignActionInput = new GraphQLInputObjectType({
  name: 'AssignActionInput',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const PayActionInput = new GraphQLInputObjectType({
  name: 'PayActionInput',
  fields: () => ({
    recipient: { type: GraphQLList(recipient) },
    priceSpecification: { type: GraphQLList(PriceSpecification) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    price: { type: GraphQLList(GraphQLString) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const HighSchoolInput = new GraphQLInputObjectType({
  name: 'HighSchoolInput',
  fields: () => ({
    alumni: { type: GraphQLList(Person) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const TypeAndQuantityNodeInput = new GraphQLInputObjectType({
  name: 'TypeAndQuantityNodeInput',
  fields: () => ({
    unitCode: { type: GraphQLList(GraphQLString) },
    typeOfGood: { type: GraphQLList(typeOfGood) },
    amountOfThisGood: { type: GraphQLList(GraphQLFloat) },
    businessFunction: { type: GraphQLList(BusinessFunction) },
    unitText: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const SteeringPositionValueInput = new GraphQLInputObjectType({
  name: 'SteeringPositionValueInput',
  fields: () => ({
    greater: { type: GraphQLList(QualitativeValue) },
    equal: { type: GraphQLList(QualitativeValue) },
    nonEqual: { type: GraphQLList(QualitativeValue) },
    greaterOrEqual: { type: GraphQLList(QualitativeValue) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    lesser: { type: GraphQLList(QualitativeValue) },
    valueReference: { type: GraphQLList(valueReference) },
    lesserOrEqual: { type: GraphQLList(QualitativeValue) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const SportsClubInput = new GraphQLInputObjectType({
  name: 'SportsClubInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const TrainTripInput = new GraphQLInputObjectType({
  name: 'TrainTripInput',
  fields: () => ({
    departureStation: { type: GraphQLList(TrainStation) },
    arrivalPlatform: { type: GraphQLList(GraphQLString) },
    departurePlatform: { type: GraphQLList(GraphQLString) },
    trainName: { type: GraphQLList(GraphQLString) },
    trainNumber: { type: GraphQLList(GraphQLString) },
    arrivalStation: { type: GraphQLList(TrainStation) },
    provider: { type: GraphQLList(provider) },
    offers: { type: GraphQLList(Offer) },
    arrivalTime: { type: GraphQLList(GraphQLString) },
    departureTime: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const BridgeInput = new GraphQLInputObjectType({
  name: 'BridgeInput',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const TrainStationInput = new GraphQLInputObjectType({
  name: 'TrainStationInput',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ConversationInput = new GraphQLInputObjectType({
  name: 'ConversationInput',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const DatedMoneySpecificationInput = new GraphQLInputObjectType({
  name: 'DatedMoneySpecificationInput',
  fields: () => ({
    endDate: { type: GraphQLList(GraphQLString) },
    currency: { type: GraphQLList(GraphQLString) },
    amount: { type: GraphQLList(MonetaryAmount) },
    startDate: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ReserveActionInput = new GraphQLInputObjectType({
  name: 'ReserveActionInput',
  fields: () => ({
    scheduledTime: { type: GraphQLList(GraphQLString) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const SoftwareSourceCodeInput = new GraphQLInputObjectType({
  name: 'SoftwareSourceCodeInput',
  fields: () => ({
    targetProduct: { type: GraphQLList(SoftwareApplication) },
    codeRepository: { type: GraphQLList(GraphQLString) },
    programmingLanguage: { type: GraphQLList(ComputerLanguage) },
    codeSampleType: { type: GraphQLList(GraphQLString) },
    runtimePlatform: { type: GraphQLList(GraphQLString) },
    sampleType: { type: GraphQLList(GraphQLString) },
    runtime: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const PaymentServiceInput = new GraphQLInputObjectType({
  name: 'PaymentServiceInput',
  fields: () => ({
    interestRate: { type: GraphQLList(QuantitativeValue) },
    feesAndCommissionsSpecification: { type: GraphQLList(GraphQLString) },
    annualPercentageRate: { type: GraphQLList(QuantitativeValue) },
    serviceArea: { type: GraphQLList(serviceArea) },
    provider: { type: GraphQLList(provider) },
    serviceAudience: { type: GraphQLList(Audience) },
    audience: { type: GraphQLList(Audience) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    hoursAvailable: { type: GraphQLList(OpeningHoursSpecification) },
    providerMobility: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    broker: { type: GraphQLList(broker) },
    serviceOutput: { type: GraphQLList(Thing) },
    logo: { type: GraphQLList(ImageObject) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    availableChannel: { type: GraphQLList(ServiceChannel) },
    review: { type: GraphQLList(Review) },
    serviceType: { type: GraphQLList(GraphQLString) },
    produces: { type: GraphQLList(Thing) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const SpeakableSpecificationInput = new GraphQLInputObjectType({
  name: 'SpeakableSpecificationInput',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const InteractActionInput = new GraphQLInputObjectType({
  name: 'InteractActionInput',
  fields: () => ({
    resultComment: { type: GraphQLList(Comment) },
    about: { type: GraphQLList(Thing) },
    inLanguage: { type: GraphQLList(Language) },
    recipient: { type: GraphQLList(recipient) },
    language: { type: GraphQLList(Language) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const AMRadioChannelInput = new GraphQLInputObjectType({
  name: 'AMRadioChannelInput',
  fields: () => ({
    broadcastFrequency: { type: GraphQLList(BroadcastFrequencySpecification) },
    broadcastChannelId: { type: GraphQLList(GraphQLString) },
    broadcastServiceTier: { type: GraphQLList(GraphQLString) },
    inBroadcastLineup: { type: GraphQLList(CableOrSatelliteService) },
    providesBroadcastService: { type: GraphQLList(BroadcastService) },
    genre: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const AutoBodyShopInput = new GraphQLInputObjectType({
  name: 'AutoBodyShopInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const PermitInput = new GraphQLInputObjectType({
  name: 'PermitInput',
  fields: () => ({
    validFor: { type: GraphQLList(Duration) },
    validUntil: { type: GraphQLList(GraphQLString) },
    validFrom: { type: GraphQLList(GraphQLString) },
    issuedBy: { type: GraphQLList(Organization) },
    issuedThrough: { type: GraphQLList(Service) },
    permitAudience: { type: GraphQLList(Audience) },
    validIn: { type: GraphQLList(AdministrativeArea) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ConvenienceStoreInput = new GraphQLInputObjectType({
  name: 'ConvenienceStoreInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const SchoolInput = new GraphQLInputObjectType({
  name: 'SchoolInput',
  fields: () => ({
    alumni: { type: GraphQLList(Person) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const TelevisionStationInput = new GraphQLInputObjectType({
  name: 'TelevisionStationInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const HomeGoodsStoreInput = new GraphQLInputObjectType({
  name: 'HomeGoodsStoreInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const LakeBodyOfWaterInput = new GraphQLInputObjectType({
  name: 'LakeBodyOfWaterInput',
  fields: () => ({
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const BodyOfWaterInput = new GraphQLInputObjectType({
  name: 'BodyOfWaterInput',
  fields: () => ({
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const RadioSeriesInput = new GraphQLInputObjectType({
  name: 'RadioSeriesInput',
  fields: () => ({
    seasons: { type: GraphQLList(CreativeWorkSeason) },
    actor: { type: GraphQLList(Person) },
    numberOfEpisodes: { type: GraphQLList(GraphQLInt) },
    trailer: { type: GraphQLList(VideoObject) },
    season: { type: GraphQLList(CreativeWorkSeason) },
    episodes: { type: GraphQLList(Episode) },
    musicBy: { type: GraphQLList(musicBy) },
    containsSeason: { type: GraphQLList(CreativeWorkSeason) },
    directors: { type: GraphQLList(Person) },
    numberOfSeasons: { type: GraphQLList(GraphQLInt) },
    director: { type: GraphQLList(Person) },
    productionCompany: { type: GraphQLList(Organization) },
    actors: { type: GraphQLList(Person) },
    episode: { type: GraphQLList(Episode) },
    endDate: { type: GraphQLList(GraphQLString) },
    issn: { type: GraphQLList(GraphQLString) },
    startDate: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },

  })
});

const MusicVideoObjectInput = new GraphQLInputObjectType({
  name: 'MusicVideoObjectInput',
  fields: () => ({
    startTime: { type: GraphQLList(GraphQLString) },
    uploadDate: { type: GraphQLList(GraphQLString) },
    playerType: { type: GraphQLList(GraphQLString) },
    height: { type: GraphQLList(height) },
    bitrate: { type: GraphQLList(GraphQLString) },
    requiresSubscription: { type: GraphQLList(MediaSubscription) },
    regionsAllowed: { type: GraphQLList(Place) },
    endTime: { type: GraphQLList(GraphQLString) },
    contentSize: { type: GraphQLList(GraphQLString) },
    embedUrl: { type: GraphQLList(GraphQLString) },
    width: { type: GraphQLList(width) },
    contentUrl: { type: GraphQLList(GraphQLString) },
    associatedArticle: { type: GraphQLList(NewsArticle) },
    productionCompany: { type: GraphQLList(Organization) },
    duration: { type: GraphQLList(Duration) },
    encodesCreativeWork: { type: GraphQLList(CreativeWork) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const BeachInput = new GraphQLInputObjectType({
  name: 'BeachInput',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const SpreadsheetDigitalDocumentInput = new GraphQLInputObjectType({
  name: 'SpreadsheetDigitalDocumentInput',
  fields: () => ({
    hasDigitalDocumentPermission: { type: GraphQLList(DigitalDocumentPermission) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const HowToItemInput = new GraphQLInputObjectType({
  name: 'HowToItemInput',
  fields: () => ({
    requiredQuantity: { type: GraphQLList(QuantitativeValue) },
    nextItem: { type: GraphQLList(ListItem) },
    position: { type: GraphQLList(GraphQLString) },
    previousItem: { type: GraphQLList(ListItem) },
    item: { type: GraphQLList(Thing) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ShareActionInput = new GraphQLInputObjectType({
  name: 'ShareActionInput',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    inLanguage: { type: GraphQLList(Language) },
    recipient: { type: GraphQLList(recipient) },
    language: { type: GraphQLList(Language) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const WPHeaderInput = new GraphQLInputObjectType({
  name: 'WPHeaderInput',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const LandmarksOrHistoricalBuildingsInput = new GraphQLInputObjectType({
  name: 'LandmarksOrHistoricalBuildingsInput',
  fields: () => ({
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const MarryActionInput = new GraphQLInputObjectType({
  name: 'MarryActionInput',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const NotaryInput = new GraphQLInputObjectType({
  name: 'NotaryInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const ReactActionInput = new GraphQLInputObjectType({
  name: 'ReactActionInput',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const MessageInput = new GraphQLInputObjectType({
  name: 'MessageInput',
  fields: () => ({
    dateRead: { type: GraphQLList(GraphQLString) },
    bccRecipient: { type: GraphQLList(bccRecipient) },
    dateSent: { type: GraphQLList(GraphQLString) },
    ccRecipient: { type: GraphQLList(ccRecipient) },
    recipient: { type: GraphQLList(recipient) },
    messageAttachment: { type: GraphQLList(CreativeWork) },
    dateReceived: { type: GraphQLList(GraphQLString) },
    toRecipient: { type: GraphQLList(toRecipient) },
    sender: { type: GraphQLList(sender) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const InvestmentOrDepositInput = new GraphQLInputObjectType({
  name: 'InvestmentOrDepositInput',
  fields: () => ({
    amount: { type: GraphQLList(MonetaryAmount) },
    interestRate: { type: GraphQLList(QuantitativeValue) },
    feesAndCommissionsSpecification: { type: GraphQLList(GraphQLString) },
    annualPercentageRate: { type: GraphQLList(QuantitativeValue) },
    serviceArea: { type: GraphQLList(serviceArea) },
    provider: { type: GraphQLList(provider) },
    serviceAudience: { type: GraphQLList(Audience) },
    audience: { type: GraphQLList(Audience) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    hoursAvailable: { type: GraphQLList(OpeningHoursSpecification) },
    providerMobility: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    broker: { type: GraphQLList(broker) },
    serviceOutput: { type: GraphQLList(Thing) },
    logo: { type: GraphQLList(ImageObject) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    availableChannel: { type: GraphQLList(ServiceChannel) },
    review: { type: GraphQLList(Review) },
    serviceType: { type: GraphQLList(GraphQLString) },
    produces: { type: GraphQLList(Thing) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const DryCleaningOrLaundryInput = new GraphQLInputObjectType({
  name: 'DryCleaningOrLaundryInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const DeactivateActionInput = new GraphQLInputObjectType({
  name: 'DeactivateActionInput',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const FastFoodRestaurantInput = new GraphQLInputObjectType({
  name: 'FastFoodRestaurantInput',
  fields: () => ({
    servesCuisine: { type: GraphQLList(GraphQLString) },
    hasMenu: { type: GraphQLList(Menu) },
    menu: { type: GraphQLList(Menu) },
    starRating: { type: GraphQLList(Rating) },
    acceptsReservations: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const DataFeedItemInput = new GraphQLInputObjectType({
  name: 'DataFeedItemInput',
  fields: () => ({
    dateModified: { type: GraphQLList(GraphQLString) },
    dateDeleted: { type: GraphQLList(GraphQLString) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    item: { type: GraphQLList(Thing) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const OrderStatusInput = new GraphQLInputObjectType({
  name: 'OrderStatusInput',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const SocialMediaPostingInput = new GraphQLInputObjectType({
  name: 'SocialMediaPostingInput',
  fields: () => ({
    sharedContent: { type: GraphQLList(CreativeWork) },
    pagination: { type: GraphQLList(GraphQLString) },
    wordCount: { type: GraphQLList(GraphQLInt) },
    speakable: { type: GraphQLList(SpeakableSpecification) },
    pageEnd: { type: GraphQLList(GraphQLString) },
    articleSection: { type: GraphQLList(GraphQLString) },
    articleBody: { type: GraphQLList(GraphQLString) },
    pageStart: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ParkInput = new GraphQLInputObjectType({
  name: 'ParkInput',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const VoteActionInput = new GraphQLInputObjectType({
  name: 'VoteActionInput',
  fields: () => ({
    candidate: { type: GraphQLList(Person) },
    actionOption: { type: GraphQLList(Thing) },
    option: { type: GraphQLList(Thing) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const BookFormatTypeInput = new GraphQLInputObjectType({
  name: 'BookFormatTypeInput',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const LoanOrCreditInput = new GraphQLInputObjectType({
  name: 'LoanOrCreditInput',
  fields: () => ({
    loanTerm: { type: GraphQLList(QuantitativeValue) },
    currency: { type: GraphQLList(GraphQLString) },
    amount: { type: GraphQLList(MonetaryAmount) },
    requiredCollateral: { type: GraphQLList(Thing) },
    interestRate: { type: GraphQLList(QuantitativeValue) },
    feesAndCommissionsSpecification: { type: GraphQLList(GraphQLString) },
    annualPercentageRate: { type: GraphQLList(QuantitativeValue) },
    serviceArea: { type: GraphQLList(serviceArea) },
    provider: { type: GraphQLList(provider) },
    serviceAudience: { type: GraphQLList(Audience) },
    audience: { type: GraphQLList(Audience) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    hoursAvailable: { type: GraphQLList(OpeningHoursSpecification) },
    providerMobility: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    broker: { type: GraphQLList(broker) },
    serviceOutput: { type: GraphQLList(Thing) },
    logo: { type: GraphQLList(ImageObject) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    availableChannel: { type: GraphQLList(ServiceChannel) },
    review: { type: GraphQLList(Review) },
    serviceType: { type: GraphQLList(GraphQLString) },
    produces: { type: GraphQLList(Thing) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ItemListOrderTypeInput = new GraphQLInputObjectType({
  name: 'ItemListOrderTypeInput',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ComedyClubInput = new GraphQLInputObjectType({
  name: 'ComedyClubInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const ServiceChannelInput = new GraphQLInputObjectType({
  name: 'ServiceChannelInput',
  fields: () => ({
    providesService: { type: GraphQLList(Service) },
    serviceLocation: { type: GraphQLList(Place) },
    servicePostalAddress: { type: GraphQLList(PostalAddress) },
    availableLanguage: { type: GraphQLList(Language) },
    serviceSmsNumber: { type: GraphQLList(ContactPoint) },
    serviceUrl: { type: GraphQLList(GraphQLString) },
    servicePhone: { type: GraphQLList(ContactPoint) },
    processingTime: { type: GraphQLList(Duration) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ExhibitionEventInput = new GraphQLInputObjectType({
  name: 'ExhibitionEventInput',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const RentActionInput = new GraphQLInputObjectType({
  name: 'RentActionInput',
  fields: () => ({
    landlord: { type: GraphQLList(landlord) },
    realEstateAgent: { type: GraphQLList(RealEstateAgent) },
    priceSpecification: { type: GraphQLList(PriceSpecification) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    price: { type: GraphQLList(GraphQLString) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const EmployeeRoleInput = new GraphQLInputObjectType({
  name: 'EmployeeRoleInput',
  fields: () => ({
    salaryCurrency: { type: GraphQLList(GraphQLString) },
    baseSalary: { type: GraphQLList(baseSalary) },
    numberedPosition: { type: GraphQLList(GraphQLFloat) },
    endDate: { type: GraphQLList(GraphQLString) },
    startDate: { type: GraphQLList(GraphQLString) },
    namedPosition: { type: GraphQLList(GraphQLString) },
    roleName: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const EmploymentAgencyInput = new GraphQLInputObjectType({
  name: 'EmploymentAgencyInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const PrependActionInput = new GraphQLInputObjectType({
  name: 'PrependActionInput',
  fields: () => ({
    toLocation: { type: GraphQLList(Place) },
    collection: { type: GraphQLList(Thing) },
    targetCollection: { type: GraphQLList(Thing) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const FireStationInput = new GraphQLInputObjectType({
  name: 'FireStationInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const CourseInstanceInput = new GraphQLInputObjectType({
  name: 'CourseInstanceInput',
  fields: () => ({
    instructor: { type: GraphQLList(Person) },
    courseMode: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const HotelInput = new GraphQLInputObjectType({
  name: 'HotelInput',
  fields: () => ({
    audience: { type: GraphQLList(Audience) },
    checkinTime: { type: GraphQLList(GraphQLString) },
    petsAllowed: { type: GraphQLList(GraphQLString) },
    availableLanguage: { type: GraphQLList(Language) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    starRating: { type: GraphQLList(Rating) },
    checkoutTime: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const IndividualProductInput = new GraphQLInputObjectType({
  name: 'IndividualProductInput',
  fields: () => ({
    serialNumber: { type: GraphQLList(GraphQLString) },
    manufacturer: { type: GraphQLList(Organization) },
    sku: { type: GraphQLList(GraphQLString) },
    productionDate: { type: GraphQLList(GraphQLString) },
    audience: { type: GraphQLList(Audience) },
    mpn: { type: GraphQLList(GraphQLString) },
    height: { type: GraphQLList(height) },
    gtin8: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    isConsumableFor: { type: GraphQLList(Product) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    width: { type: GraphQLList(width) },
    awards: { type: GraphQLList(GraphQLString) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    isAccessoryOrSparePartFor: { type: GraphQLList(Product) },
    logo: { type: GraphQLList(ImageObject) },
    gtin14: { type: GraphQLList(GraphQLString) },
    gtin13: { type: GraphQLList(GraphQLString) },
    gtin12: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    weight: { type: GraphQLList(QuantitativeValue) },
    depth: { type: GraphQLList(depth) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    model: { type: GraphQLList(ProductModel) },
    color: { type: GraphQLList(GraphQLString) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    productID: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    purchaseDate: { type: GraphQLList(GraphQLString) },
    itemCondition: { type: GraphQLList(OfferItemCondition) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    releaseDate: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const StructuredValueInput = new GraphQLInputObjectType({
  name: 'StructuredValueInput',
  fields: () => ({
    address: { type: GraphQLList(PostalAddress) },
    latitude: { type: GraphQLList(GraphQLString) },
    longitude: { type: GraphQLList(GraphQLString) },
    addressCountry: { type: GraphQLList(Country) },
    postalCode: { type: GraphQLList(GraphQLString) },
    elevation: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const RadioClipInput = new GraphQLInputObjectType({
  name: 'RadioClipInput',
  fields: () => ({
    actor: { type: GraphQLList(Person) },
    partOfEpisode: { type: GraphQLList(Episode) },
    partOfSeries: { type: GraphQLList(CreativeWorkSeries) },
    partOfSeason: { type: GraphQLList(CreativeWorkSeason) },
    musicBy: { type: GraphQLList(musicBy) },
    directors: { type: GraphQLList(Person) },
    director: { type: GraphQLList(Person) },
    actors: { type: GraphQLList(Person) },
    clipNumber: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const IntangibleInput = new GraphQLInputObjectType({
  name: 'IntangibleInput',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ElectronicsStoreInput = new GraphQLInputObjectType({
  name: 'ElectronicsStoreInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const OrderInput = new GraphQLInputObjectType({
  name: 'OrderInput',
  fields: () => ({
    paymentDue: { type: GraphQLList(GraphQLString) },
    orderNumber: { type: GraphQLList(GraphQLString) },
    paymentUrl: { type: GraphQLList(GraphQLString) },
    orderStatus: { type: GraphQLList(OrderStatus) },
    billingAddress: { type: GraphQLList(PostalAddress) },
    partOfInvoice: { type: GraphQLList(Invoice) },
    confirmationNumber: { type: GraphQLList(GraphQLString) },
    orderDate: { type: GraphQLList(GraphQLString) },
    customer: { type: GraphQLList(customer) },
    merchant: { type: GraphQLList(merchant) },
    broker: { type: GraphQLList(broker) },
    isGift: { type: GraphQLList(GraphQLBoolean) },
    paymentMethod: { type: GraphQLList(PaymentMethod) },
    seller: { type: GraphQLList(seller) },
    paymentMethodId: { type: GraphQLList(GraphQLString) },
    discount: { type: GraphQLList(GraphQLString) },
    orderDelivery: { type: GraphQLList(ParcelDelivery) },
    orderedItem: { type: GraphQLList(orderedItem) },
    acceptedOffer: { type: GraphQLList(Offer) },
    discountCurrency: { type: GraphQLList(GraphQLString) },
    paymentDueDate: { type: GraphQLList(GraphQLString) },
    discountCode: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const TVClipInput = new GraphQLInputObjectType({
  name: 'TVClipInput',
  fields: () => ({
    partOfTVSeries: { type: GraphQLList(TVSeries) },
    actor: { type: GraphQLList(Person) },
    partOfEpisode: { type: GraphQLList(Episode) },
    partOfSeries: { type: GraphQLList(CreativeWorkSeries) },
    partOfSeason: { type: GraphQLList(CreativeWorkSeason) },
    musicBy: { type: GraphQLList(musicBy) },
    directors: { type: GraphQLList(Person) },
    director: { type: GraphQLList(Person) },
    actors: { type: GraphQLList(Person) },
    clipNumber: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const NailSalonInput = new GraphQLInputObjectType({
  name: 'NailSalonInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const ContactPointInput = new GraphQLInputObjectType({
  name: 'ContactPointInput',
  fields: () => ({
    postOfficeBoxNumber: { type: GraphQLList(GraphQLString) },
    streetAddress: { type: GraphQLList(GraphQLString) },
    addressCountry: { type: GraphQLList(Country) },
    addressRegion: { type: GraphQLList(GraphQLString) },
    postalCode: { type: GraphQLList(GraphQLString) },
    addressLocality: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    hoursAvailable: { type: GraphQLList(OpeningHoursSpecification) },
    contactOption: { type: GraphQLList(ContactPointOption) },
    availableLanguage: { type: GraphQLList(Language) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    contactType: { type: GraphQLList(GraphQLString) },
    productSupported: { type: GraphQLList(Product) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const TelevisionChannelInput = new GraphQLInputObjectType({
  name: 'TelevisionChannelInput',
  fields: () => ({
    broadcastFrequency: { type: GraphQLList(BroadcastFrequencySpecification) },
    broadcastChannelId: { type: GraphQLList(GraphQLString) },
    broadcastServiceTier: { type: GraphQLList(GraphQLString) },
    inBroadcastLineup: { type: GraphQLList(CableOrSatelliteService) },
    providesBroadcastService: { type: GraphQLList(BroadcastService) },
    genre: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const GovernmentBuildingInput = new GraphQLInputObjectType({
  name: 'GovernmentBuildingInput',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const EmergencyServiceInput = new GraphQLInputObjectType({
  name: 'EmergencyServiceInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const FinancialServiceInput = new GraphQLInputObjectType({
  name: 'FinancialServiceInput',
  fields: () => ({
    feesAndCommissionsSpecification: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const VideoObjectInput = new GraphQLInputObjectType({
  name: 'VideoObjectInput',
  fields: () => ({
    actor: { type: GraphQLList(Person) },
    videoFrameSize: { type: GraphQLList(GraphQLString) },
    musicBy: { type: GraphQLList(musicBy) },
    directors: { type: GraphQLList(Person) },
    videoQuality: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    transcript: { type: GraphQLList(GraphQLString) },
    thumbnail: { type: GraphQLList(ImageObject) },
    caption: { type: GraphQLList(MediaObject) },
    actors: { type: GraphQLList(Person) },
    startTime: { type: GraphQLList(GraphQLString) },
    uploadDate: { type: GraphQLList(GraphQLString) },
    playerType: { type: GraphQLList(GraphQLString) },
    height: { type: GraphQLList(height) },
    bitrate: { type: GraphQLList(GraphQLString) },
    requiresSubscription: { type: GraphQLList(MediaSubscription) },
    regionsAllowed: { type: GraphQLList(Place) },
    endTime: { type: GraphQLList(GraphQLString) },
    contentSize: { type: GraphQLList(GraphQLString) },
    embedUrl: { type: GraphQLList(GraphQLString) },
    width: { type: GraphQLList(width) },
    contentUrl: { type: GraphQLList(GraphQLString) },
    associatedArticle: { type: GraphQLList(NewsArticle) },
    productionCompany: { type: GraphQLList(Organization) },
    duration: { type: GraphQLList(Duration) },
    encodesCreativeWork: { type: GraphQLList(CreativeWork) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const MenuInput = new GraphQLInputObjectType({
  name: 'MenuInput',
  fields: () => ({
    hasMenuItem: { type: GraphQLList(MenuItem) },
    hasMenuSection: { type: GraphQLList(MenuSection) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const PeriodicalInput = new GraphQLInputObjectType({
  name: 'PeriodicalInput',
  fields: () => ({
    endDate: { type: GraphQLList(GraphQLString) },
    issn: { type: GraphQLList(GraphQLString) },
    startDate: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },

  })
});

const MovieSeriesInput = new GraphQLInputObjectType({
  name: 'MovieSeriesInput',
  fields: () => ({
    actor: { type: GraphQLList(Person) },
    trailer: { type: GraphQLList(VideoObject) },
    musicBy: { type: GraphQLList(musicBy) },
    directors: { type: GraphQLList(Person) },
    director: { type: GraphQLList(Person) },
    productionCompany: { type: GraphQLList(Organization) },
    actors: { type: GraphQLList(Person) },
    endDate: { type: GraphQLList(GraphQLString) },
    issn: { type: GraphQLList(GraphQLString) },
    startDate: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },

  })
});

const SeriesInput = new GraphQLInputObjectType({
  name: 'SeriesInput',
  fields: () => ({
    seasons: { type: GraphQLList(CreativeWorkSeason) },
    actor: { type: GraphQLList(Person) },
    numberOfEpisodes: { type: GraphQLList(GraphQLInt) },
    trailer: { type: GraphQLList(VideoObject) },
    season: { type: GraphQLList(CreativeWorkSeason) },
    episodes: { type: GraphQLList(Episode) },
    countryOfOrigin: { type: GraphQLList(Country) },
    musicBy: { type: GraphQLList(musicBy) },
    containsSeason: { type: GraphQLList(CreativeWorkSeason) },
    directors: { type: GraphQLList(Person) },
    numberOfSeasons: { type: GraphQLList(GraphQLInt) },
    director: { type: GraphQLList(Person) },
    productionCompany: { type: GraphQLList(Organization) },
    actors: { type: GraphQLList(Person) },
    episode: { type: GraphQLList(Episode) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    endDate: { type: GraphQLList(GraphQLString) },
    issn: { type: GraphQLList(GraphQLString) },
    startDate: { type: GraphQLList(GraphQLString) },

  })
});

const ElectricianInput = new GraphQLInputObjectType({
  name: 'ElectricianInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const WarrantyScopeInput = new GraphQLInputObjectType({
  name: 'WarrantyScopeInput',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const CollectionPageInput = new GraphQLInputObjectType({
  name: 'CollectionPageInput',
  fields: () => ({
    speakable: { type: GraphQLList(SpeakableSpecification) },
    breadcrumb: { type: GraphQLList(BreadcrumbList) },
    significantLink: { type: GraphQLList(GraphQLString) },
    relatedLink: { type: GraphQLList(GraphQLString) },
    lastReviewed: { type: GraphQLList(GraphQLString) },
    mainContentOfPage: { type: GraphQLList(WebPageElement) },
    reviewedBy: { type: GraphQLList(reviewedBy) },
    primaryImageOfPage: { type: GraphQLList(ImageObject) },
    significantLinks: { type: GraphQLList(GraphQLString) },
    specialty: { type: GraphQLList(Specialty) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const PhotographActionInput = new GraphQLInputObjectType({
  name: 'PhotographActionInput',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const HealthAndBeautyBusinessInput = new GraphQLInputObjectType({
  name: 'HealthAndBeautyBusinessInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const LegislativeBuildingInput = new GraphQLInputObjectType({
  name: 'LegislativeBuildingInput',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const UserCheckinsInput = new GraphQLInputObjectType({
  name: 'UserCheckinsInput',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const VideoGameSeriesInput = new GraphQLInputObjectType({
  name: 'VideoGameSeriesInput',
  fields: () => ({
    gameItem: { type: GraphQLList(Thing) },
    seasons: { type: GraphQLList(CreativeWorkSeason) },
    gamePlatform: { type: GraphQLList(Thing) },
    actor: { type: GraphQLList(Person) },
    numberOfEpisodes: { type: GraphQLList(GraphQLInt) },
    trailer: { type: GraphQLList(VideoObject) },
    season: { type: GraphQLList(CreativeWorkSeason) },
    episodes: { type: GraphQLList(Episode) },
    cheatCode: { type: GraphQLList(CreativeWork) },
    characterAttribute: { type: GraphQLList(Thing) },
    gameLocation: { type: GraphQLList(gameLocation) },
    musicBy: { type: GraphQLList(musicBy) },
    containsSeason: { type: GraphQLList(CreativeWorkSeason) },
    directors: { type: GraphQLList(Person) },
    playMode: { type: GraphQLList(GamePlayMode) },
    numberOfSeasons: { type: GraphQLList(GraphQLInt) },
    director: { type: GraphQLList(Person) },
    productionCompany: { type: GraphQLList(Organization) },
    quest: { type: GraphQLList(Thing) },
    numberOfPlayers: { type: GraphQLList(QuantitativeValue) },
    actors: { type: GraphQLList(Person) },
    episode: { type: GraphQLList(Episode) },
    endDate: { type: GraphQLList(GraphQLString) },
    issn: { type: GraphQLList(GraphQLString) },
    startDate: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },

  })
});

const BroadcastServiceInput = new GraphQLInputObjectType({
  name: 'BroadcastServiceInput',
  fields: () => ({
    broadcastFrequency: { type: GraphQLList(BroadcastFrequencySpecification) },
    broadcastTimezone: { type: GraphQLList(GraphQLString) },
    videoFormat: { type: GraphQLList(GraphQLString) },
    parentService: { type: GraphQLList(BroadcastService) },
    broadcastDisplayName: { type: GraphQLList(GraphQLString) },
    broadcastAffiliateOf: { type: GraphQLList(Organization) },
    area: { type: GraphQLList(Place) },
    hasBroadcastChannel: { type: GraphQLList(BroadcastChannel) },
    broadcaster: { type: GraphQLList(Organization) },
    serviceArea: { type: GraphQLList(serviceArea) },
    provider: { type: GraphQLList(provider) },
    serviceAudience: { type: GraphQLList(Audience) },
    audience: { type: GraphQLList(Audience) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    hoursAvailable: { type: GraphQLList(OpeningHoursSpecification) },
    providerMobility: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    broker: { type: GraphQLList(broker) },
    serviceOutput: { type: GraphQLList(Thing) },
    logo: { type: GraphQLList(ImageObject) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    availableChannel: { type: GraphQLList(ServiceChannel) },
    review: { type: GraphQLList(Review) },
    serviceType: { type: GraphQLList(GraphQLString) },
    produces: { type: GraphQLList(Thing) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const WearActionInput = new GraphQLInputObjectType({
  name: 'WearActionInput',
  fields: () => ({
    actionAccessibilityRequirement: { type: GraphQLList(ActionAccessSpecification) },
    expectsAcceptanceOf: { type: GraphQLList(Offer) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const TravelAgencyInput = new GraphQLInputObjectType({
  name: 'TravelAgencyInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const HostelInput = new GraphQLInputObjectType({
  name: 'HostelInput',
  fields: () => ({
    audience: { type: GraphQLList(Audience) },
    checkinTime: { type: GraphQLList(GraphQLString) },
    petsAllowed: { type: GraphQLList(GraphQLString) },
    availableLanguage: { type: GraphQLList(Language) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    starRating: { type: GraphQLList(Rating) },
    checkoutTime: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const BankOrCreditUnionInput = new GraphQLInputObjectType({
  name: 'BankOrCreditUnionInput',
  fields: () => ({
    feesAndCommissionsSpecification: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const QuantityInput = new GraphQLInputObjectType({
  name: 'QuantityInput',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const VideoGalleryInput = new GraphQLInputObjectType({
  name: 'VideoGalleryInput',
  fields: () => ({
    speakable: { type: GraphQLList(SpeakableSpecification) },
    breadcrumb: { type: GraphQLList(BreadcrumbList) },
    significantLink: { type: GraphQLList(GraphQLString) },
    relatedLink: { type: GraphQLList(GraphQLString) },
    lastReviewed: { type: GraphQLList(GraphQLString) },
    mainContentOfPage: { type: GraphQLList(WebPageElement) },
    reviewedBy: { type: GraphQLList(reviewedBy) },
    primaryImageOfPage: { type: GraphQLList(ImageObject) },
    significantLinks: { type: GraphQLList(GraphQLString) },
    specialty: { type: GraphQLList(Specialty) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const EducationalAudienceInput = new GraphQLInputObjectType({
  name: 'EducationalAudienceInput',
  fields: () => ({
    educationalRole: { type: GraphQLList(GraphQLString) },
    audienceType: { type: GraphQLList(GraphQLString) },
    geographicArea: { type: GraphQLList(AdministrativeArea) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const CityHallInput = new GraphQLInputObjectType({
  name: 'CityHallInput',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ComedyEventInput = new GraphQLInputObjectType({
  name: 'ComedyEventInput',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const DonateActionInput = new GraphQLInputObjectType({
  name: 'DonateActionInput',
  fields: () => ({
    recipient: { type: GraphQLList(recipient) },
    priceSpecification: { type: GraphQLList(PriceSpecification) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    price: { type: GraphQLList(GraphQLString) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const BrandInput = new GraphQLInputObjectType({
  name: 'BrandInput',
  fields: () => ({
    aggregateRating: { type: GraphQLList(AggregateRating) },
    logo: { type: GraphQLList(ImageObject) },
    review: { type: GraphQLList(Review) },
    slogan: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const MovingCompanyInput = new GraphQLInputObjectType({
  name: 'MovingCompanyInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const QuestionInput = new GraphQLInputObjectType({
  name: 'QuestionInput',
  fields: () => ({
    answerCount: { type: GraphQLList(GraphQLInt) },
    acceptedAnswer: { type: GraphQLList(acceptedAnswer) },
    upvoteCount: { type: GraphQLList(GraphQLInt) },
    suggestedAnswer: { type: GraphQLList(suggestedAnswer) },
    downvoteCount: { type: GraphQLList(GraphQLInt) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const BorrowActionInput = new GraphQLInputObjectType({
  name: 'BorrowActionInput',
  fields: () => ({
    lender: { type: GraphQLList(lender) },
    toLocation: { type: GraphQLList(Place) },
    fromLocation: { type: GraphQLList(Place) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const GardenStoreInput = new GraphQLInputObjectType({
  name: 'GardenStoreInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const ReviewActionInput = new GraphQLInputObjectType({
  name: 'ReviewActionInput',
  fields: () => ({
    resultReview: { type: GraphQLList(Review) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const UserCommentsInput = new GraphQLInputObjectType({
  name: 'UserCommentsInput',
  fields: () => ({
    discusses: { type: GraphQLList(CreativeWork) },
    commentText: { type: GraphQLList(GraphQLString) },
    commentTime: { type: GraphQLList(GraphQLString) },
    creator: { type: GraphQLList(creator) },
    replyToUrl: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const PaintActionInput = new GraphQLInputObjectType({
  name: 'PaintActionInput',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const BlogInput = new GraphQLInputObjectType({
  name: 'BlogInput',
  fields: () => ({
    blogPosts: { type: GraphQLList(BlogPosting) },
    blogPost: { type: GraphQLList(BlogPosting) },
    issn: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const SportsActivityLocationInput = new GraphQLInputObjectType({
  name: 'SportsActivityLocationInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const WarrantyPromiseInput = new GraphQLInputObjectType({
  name: 'WarrantyPromiseInput',
  fields: () => ({
    durationOfWarranty: { type: GraphQLList(QuantitativeValue) },
    warrantyScope: { type: GraphQLList(WarrantyScope) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const EmployerAggregateRatingInput = new GraphQLInputObjectType({
  name: 'EmployerAggregateRatingInput',
  fields: () => ({
    itemReviewed: { type: GraphQLList(Thing) },
    reviewCount: { type: GraphQLList(GraphQLInt) },
    ratingCount: { type: GraphQLList(GraphQLInt) },
    ratingValue: { type: GraphQLList(GraphQLString) },
    bestRating: { type: GraphQLList(GraphQLString) },
    reviewAspect: { type: GraphQLList(GraphQLString) },
    author: { type: GraphQLList(author) },
    worstRating: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const EventInput = new GraphQLInputObjectType({
  name: 'EventInput',
  fields: () => ({
    awayTeam: { type: GraphQLList(awayTeam) },
    homeTeam: { type: GraphQLList(homeTeam) },
    competitor: { type: GraphQLList(competitor) },
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const HouseInput = new GraphQLInputObjectType({
  name: 'HouseInput',
  fields: () => ({
    occupancy: { type: GraphQLList(QuantitativeValue) },
    numberOfRooms: { type: GraphQLList(QuantitativeValue) },
    floorSize: { type: GraphQLList(QuantitativeValue) },
    petsAllowed: { type: GraphQLList(GraphQLString) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    permittedUsage: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const AdultEntertainmentInput = new GraphQLInputObjectType({
  name: 'AdultEntertainmentInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const DriveWheelConfigurationValueInput = new GraphQLInputObjectType({
  name: 'DriveWheelConfigurationValueInput',
  fields: () => ({
    greater: { type: GraphQLList(QualitativeValue) },
    equal: { type: GraphQLList(QualitativeValue) },
    nonEqual: { type: GraphQLList(QualitativeValue) },
    greaterOrEqual: { type: GraphQLList(QualitativeValue) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    lesser: { type: GraphQLList(QualitativeValue) },
    valueReference: { type: GraphQLList(valueReference) },
    lesserOrEqual: { type: GraphQLList(QualitativeValue) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const RoleInput = new GraphQLInputObjectType({
  name: 'RoleInput',
  fields: () => ({
    numberedPosition: { type: GraphQLList(GraphQLFloat) },
    endDate: { type: GraphQLList(GraphQLString) },
    startDate: { type: GraphQLList(GraphQLString) },
    namedPosition: { type: GraphQLList(GraphQLString) },
    roleName: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const CityInput = new GraphQLInputObjectType({
  name: 'CityInput',
  fields: () => ({
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ConsumeActionInput = new GraphQLInputObjectType({
  name: 'ConsumeActionInput',
  fields: () => ({
    actionAccessibilityRequirement: { type: GraphQLList(ActionAccessSpecification) },
    expectsAcceptanceOf: { type: GraphQLList(Offer) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ScreeningEventInput = new GraphQLInputObjectType({
  name: 'ScreeningEventInput',
  fields: () => ({
    videoFormat: { type: GraphQLList(GraphQLString) },
    subtitleLanguage: { type: GraphQLList(Language) },
    workPresented: { type: GraphQLList(Movie) },
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ArriveActionInput = new GraphQLInputObjectType({
  name: 'ArriveActionInput',
  fields: () => ({
    toLocation: { type: GraphQLList(Place) },
    fromLocation: { type: GraphQLList(Place) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const BookmarkActionInput = new GraphQLInputObjectType({
  name: 'BookmarkActionInput',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const CreateActionInput = new GraphQLInputObjectType({
  name: 'CreateActionInput',
  fields: () => ({
    inLanguage: { type: GraphQLList(Language) },
    language: { type: GraphQLList(Language) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ScheduleActionInput = new GraphQLInputObjectType({
  name: 'ScheduleActionInput',
  fields: () => ({
    scheduledTime: { type: GraphQLList(GraphQLString) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const DentistInput = new GraphQLInputObjectType({
  name: 'DentistInput',
  fields: () => ({
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const DiscoverActionInput = new GraphQLInputObjectType({
  name: 'DiscoverActionInput',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const EndorsementRatingInput = new GraphQLInputObjectType({
  name: 'EndorsementRatingInput',
  fields: () => ({
    ratingValue: { type: GraphQLList(GraphQLString) },
    bestRating: { type: GraphQLList(GraphQLString) },
    reviewAspect: { type: GraphQLList(GraphQLString) },
    author: { type: GraphQLList(author) },
    worstRating: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ReservoirInput = new GraphQLInputObjectType({
  name: 'ReservoirInput',
  fields: () => ({
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const MusicEventInput = new GraphQLInputObjectType({
  name: 'MusicEventInput',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const StoreInput = new GraphQLInputObjectType({
  name: 'StoreInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const MonetaryAmountInput = new GraphQLInputObjectType({
  name: 'MonetaryAmountInput',
  fields: () => ({
    minValue: { type: GraphQLList(GraphQLFloat) },
    value: { type: GraphQLList(StructuredValue) },
    currency: { type: GraphQLList(GraphQLString) },
    validFrom: { type: GraphQLList(GraphQLString) },
    validThrough: { type: GraphQLList(GraphQLString) },
    maxValue: { type: GraphQLList(GraphQLFloat) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const HairSalonInput = new GraphQLInputObjectType({
  name: 'HairSalonInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const DaySpaInput = new GraphQLInputObjectType({
  name: 'DaySpaInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const EngineSpecificationInput = new GraphQLInputObjectType({
  name: 'EngineSpecificationInput',
  fields: () => ({
    fuelType: { type: GraphQLList(QualitativeValue) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ActivateActionInput = new GraphQLInputObjectType({
  name: 'ActivateActionInput',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const EventVenueInput = new GraphQLInputObjectType({
  name: 'EventVenueInput',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const RadioEpisodeInput = new GraphQLInputObjectType({
  name: 'RadioEpisodeInput',
  fields: () => ({
    actor: { type: GraphQLList(Person) },
    trailer: { type: GraphQLList(VideoObject) },
    partOfSeries: { type: GraphQLList(CreativeWorkSeries) },
    partOfSeason: { type: GraphQLList(CreativeWorkSeason) },
    musicBy: { type: GraphQLList(musicBy) },
    directors: { type: GraphQLList(Person) },
    episodeNumber: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    productionCompany: { type: GraphQLList(Organization) },
    actors: { type: GraphQLList(Person) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ElementarySchoolInput = new GraphQLInputObjectType({
  name: 'ElementarySchoolInput',
  fields: () => ({
    alumni: { type: GraphQLList(Person) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ReplaceActionInput = new GraphQLInputObjectType({
  name: 'ReplaceActionInput',
  fields: () => ({
    replacee: { type: GraphQLList(Thing) },
    replacer: { type: GraphQLList(Thing) },
    collection: { type: GraphQLList(Thing) },
    targetCollection: { type: GraphQLList(Thing) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const CreditCardInput = new GraphQLInputObjectType({
  name: 'CreditCardInput',
  fields: () => ({
    loanTerm: { type: GraphQLList(QuantitativeValue) },
    currency: { type: GraphQLList(GraphQLString) },
    amount: { type: GraphQLList(MonetaryAmount) },
    requiredCollateral: { type: GraphQLList(Thing) },
    interestRate: { type: GraphQLList(QuantitativeValue) },
    feesAndCommissionsSpecification: { type: GraphQLList(GraphQLString) },
    annualPercentageRate: { type: GraphQLList(QuantitativeValue) },
    serviceArea: { type: GraphQLList(serviceArea) },
    provider: { type: GraphQLList(provider) },
    serviceAudience: { type: GraphQLList(Audience) },
    audience: { type: GraphQLList(Audience) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    hoursAvailable: { type: GraphQLList(OpeningHoursSpecification) },
    providerMobility: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    broker: { type: GraphQLList(broker) },
    serviceOutput: { type: GraphQLList(Thing) },
    logo: { type: GraphQLList(ImageObject) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    availableChannel: { type: GraphQLList(ServiceChannel) },
    review: { type: GraphQLList(Review) },
    serviceType: { type: GraphQLList(GraphQLString) },
    produces: { type: GraphQLList(Thing) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const OpeningHoursSpecificationInput = new GraphQLInputObjectType({
  name: 'OpeningHoursSpecificationInput',
  fields: () => ({
    validFrom: { type: GraphQLList(GraphQLString) },
    validThrough: { type: GraphQLList(GraphQLString) },
    opens: { type: GraphQLList(GraphQLString) },
    closes: { type: GraphQLList(GraphQLString) },
    dayOfWeek: { type: GraphQLList(DayOfWeek) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const DislikeActionInput = new GraphQLInputObjectType({
  name: 'DislikeActionInput',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const PlayActionInput = new GraphQLInputObjectType({
  name: 'PlayActionInput',
  fields: () => ({
    audience: { type: GraphQLList(Audience) },
    event: { type: GraphQLList(Event) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const FAQPageInput = new GraphQLInputObjectType({
  name: 'FAQPageInput',
  fields: () => ({
    speakable: { type: GraphQLList(SpeakableSpecification) },
    breadcrumb: { type: GraphQLList(BreadcrumbList) },
    significantLink: { type: GraphQLList(GraphQLString) },
    relatedLink: { type: GraphQLList(GraphQLString) },
    lastReviewed: { type: GraphQLList(GraphQLString) },
    mainContentOfPage: { type: GraphQLList(WebPageElement) },
    reviewedBy: { type: GraphQLList(reviewedBy) },
    primaryImageOfPage: { type: GraphQLList(ImageObject) },
    significantLinks: { type: GraphQLList(GraphQLString) },
    specialty: { type: GraphQLList(Specialty) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const TieActionInput = new GraphQLInputObjectType({
  name: 'TieActionInput',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const CorporationInput = new GraphQLInputObjectType({
  name: 'CorporationInput',
  fields: () => ({
    tickerSymbol: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ItemListInput = new GraphQLInputObjectType({
  name: 'ItemListInput',
  fields: () => ({
    itemListElement: { type: GraphQLList(itemListElement) },
    itemListOrder: { type: GraphQLList(ItemListOrderType) },
    numberOfItems: { type: GraphQLList(GraphQLInt) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const DeliveryMethodInput = new GraphQLInputObjectType({
  name: 'DeliveryMethodInput',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const WineryInput = new GraphQLInputObjectType({
  name: 'WineryInput',
  fields: () => ({
    servesCuisine: { type: GraphQLList(GraphQLString) },
    hasMenu: { type: GraphQLList(Menu) },
    menu: { type: GraphQLList(Menu) },
    starRating: { type: GraphQLList(Rating) },
    acceptsReservations: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const InformActionInput = new GraphQLInputObjectType({
  name: 'InformActionInput',
  fields: () => ({
    event: { type: GraphQLList(Event) },
    about: { type: GraphQLList(Thing) },
    inLanguage: { type: GraphQLList(Language) },
    recipient: { type: GraphQLList(recipient) },
    language: { type: GraphQLList(Language) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ReturnActionInput = new GraphQLInputObjectType({
  name: 'ReturnActionInput',
  fields: () => ({
    recipient: { type: GraphQLList(recipient) },
    toLocation: { type: GraphQLList(Place) },
    fromLocation: { type: GraphQLList(Place) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const MeetingRoomInput = new GraphQLInputObjectType({
  name: 'MeetingRoomInput',
  fields: () => ({
    floorSize: { type: GraphQLList(QuantitativeValue) },
    petsAllowed: { type: GraphQLList(GraphQLString) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    numberOfRooms: { type: GraphQLList(QuantitativeValue) },
    permittedUsage: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const MonetaryAmountDistributionInput = new GraphQLInputObjectType({
  name: 'MonetaryAmountDistributionInput',
  fields: () => ({
    currency: { type: GraphQLList(GraphQLString) },
    percentile10: { type: GraphQLList(GraphQLFloat) },
    percentile25: { type: GraphQLList(GraphQLFloat) },
    median: { type: GraphQLList(GraphQLFloat) },
    duration: { type: GraphQLList(Duration) },
    percentile90: { type: GraphQLList(GraphQLFloat) },
    percentile75: { type: GraphQLList(GraphQLFloat) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const JoinActionInput = new GraphQLInputObjectType({
  name: 'JoinActionInput',
  fields: () => ({
    event: { type: GraphQLList(Event) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const RiverBodyOfWaterInput = new GraphQLInputObjectType({
  name: 'RiverBodyOfWaterInput',
  fields: () => ({
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const BuyActionInput = new GraphQLInputObjectType({
  name: 'BuyActionInput',
  fields: () => ({
    vendor: { type: GraphQLList(vendor) },
    seller: { type: GraphQLList(seller) },
    warrantyPromise: { type: GraphQLList(WarrantyPromise) },
    priceSpecification: { type: GraphQLList(PriceSpecification) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    price: { type: GraphQLList(GraphQLString) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const SearchActionInput = new GraphQLInputObjectType({
  name: 'SearchActionInput',
  fields: () => ({
    query: { type: GraphQLList(GraphQLString) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const HVACBusinessInput = new GraphQLInputObjectType({
  name: 'HVACBusinessInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const TaxiStandInput = new GraphQLInputObjectType({
  name: 'TaxiStandInput',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ProductModelInput = new GraphQLInputObjectType({
  name: 'ProductModelInput',
  fields: () => ({
    predecessorOf: { type: GraphQLList(ProductModel) },
    successorOf: { type: GraphQLList(ProductModel) },
    isVariantOf: { type: GraphQLList(ProductModel) },
    manufacturer: { type: GraphQLList(Organization) },
    sku: { type: GraphQLList(GraphQLString) },
    productionDate: { type: GraphQLList(GraphQLString) },
    audience: { type: GraphQLList(Audience) },
    mpn: { type: GraphQLList(GraphQLString) },
    height: { type: GraphQLList(height) },
    gtin8: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    isConsumableFor: { type: GraphQLList(Product) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    width: { type: GraphQLList(width) },
    awards: { type: GraphQLList(GraphQLString) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    isAccessoryOrSparePartFor: { type: GraphQLList(Product) },
    logo: { type: GraphQLList(ImageObject) },
    gtin14: { type: GraphQLList(GraphQLString) },
    gtin13: { type: GraphQLList(GraphQLString) },
    gtin12: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    weight: { type: GraphQLList(QuantitativeValue) },
    depth: { type: GraphQLList(depth) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    model: { type: GraphQLList(ProductModel) },
    color: { type: GraphQLList(GraphQLString) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    productID: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    purchaseDate: { type: GraphQLList(GraphQLString) },
    itemCondition: { type: GraphQLList(OfferItemCondition) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    releaseDate: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const CatholicChurchInput = new GraphQLInputObjectType({
  name: 'CatholicChurchInput',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const MovieClipInput = new GraphQLInputObjectType({
  name: 'MovieClipInput',
  fields: () => ({
    actor: { type: GraphQLList(Person) },
    partOfEpisode: { type: GraphQLList(Episode) },
    partOfSeries: { type: GraphQLList(CreativeWorkSeries) },
    partOfSeason: { type: GraphQLList(CreativeWorkSeason) },
    musicBy: { type: GraphQLList(musicBy) },
    directors: { type: GraphQLList(Person) },
    director: { type: GraphQLList(Person) },
    actors: { type: GraphQLList(Person) },
    clipNumber: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ActionStatusTypeInput = new GraphQLInputObjectType({
  name: 'ActionStatusTypeInput',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const WriteActionInput = new GraphQLInputObjectType({
  name: 'WriteActionInput',
  fields: () => ({
    inLanguage: { type: GraphQLList(Language) },
    language: { type: GraphQLList(Language) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const MusicAlbumProductionTypeInput = new GraphQLInputObjectType({
  name: 'MusicAlbumProductionTypeInput',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ApplyActionInput = new GraphQLInputObjectType({
  name: 'ApplyActionInput',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const LocksmithInput = new GraphQLInputObjectType({
  name: 'LocksmithInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const LandformInput = new GraphQLInputObjectType({
  name: 'LandformInput',
  fields: () => ({
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const EpisodeInput = new GraphQLInputObjectType({
  name: 'EpisodeInput',
  fields: () => ({
    actor: { type: GraphQLList(Person) },
    trailer: { type: GraphQLList(VideoObject) },
    partOfSeries: { type: GraphQLList(CreativeWorkSeries) },
    partOfSeason: { type: GraphQLList(CreativeWorkSeason) },
    musicBy: { type: GraphQLList(musicBy) },
    directors: { type: GraphQLList(Person) },
    episodeNumber: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    productionCompany: { type: GraphQLList(Organization) },
    actors: { type: GraphQLList(Person) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const OceanBodyOfWaterInput = new GraphQLInputObjectType({
  name: 'OceanBodyOfWaterInput',
  fields: () => ({
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const MedicalOrganizationInput = new GraphQLInputObjectType({
  name: 'MedicalOrganizationInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const TrainReservationInput = new GraphQLInputObjectType({
  name: 'TrainReservationInput',
  fields: () => ({
    provider: { type: GraphQLList(provider) },
    programMembershipUsed: { type: GraphQLList(ProgramMembership) },
    reservationStatus: { type: GraphQLList(ReservationStatusType) },
    underName: { type: GraphQLList(underName) },
    bookingAgent: { type: GraphQLList(bookingAgent) },
    totalPrice: { type: GraphQLList(PriceSpecification) },
    reservationFor: { type: GraphQLList(Thing) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    broker: { type: GraphQLList(broker) },
    modifiedTime: { type: GraphQLList(GraphQLString) },
    bookingTime: { type: GraphQLList(GraphQLString) },
    reservationId: { type: GraphQLList(GraphQLString) },
    reservedTicket: { type: GraphQLList(Ticket) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const MusicVenueInput = new GraphQLInputObjectType({
  name: 'MusicVenueInput',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ReviewInput = new GraphQLInputObjectType({
  name: 'ReviewInput',
  fields: () => ({
    claimReviewed: { type: GraphQLList(GraphQLString) },
    reviewRating: { type: GraphQLList(Rating) },
    reviewAspect: { type: GraphQLList(GraphQLString) },
    itemReviewed: { type: GraphQLList(Thing) },
    reviewBody: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const PostalAddressInput = new GraphQLInputObjectType({
  name: 'PostalAddressInput',
  fields: () => ({
    postOfficeBoxNumber: { type: GraphQLList(GraphQLString) },
    streetAddress: { type: GraphQLList(GraphQLString) },
    addressCountry: { type: GraphQLList(Country) },
    addressRegion: { type: GraphQLList(GraphQLString) },
    postalCode: { type: GraphQLList(GraphQLString) },
    addressLocality: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    hoursAvailable: { type: GraphQLList(OpeningHoursSpecification) },
    contactOption: { type: GraphQLList(ContactPointOption) },
    availableLanguage: { type: GraphQLList(Language) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    contactType: { type: GraphQLList(GraphQLString) },
    productSupported: { type: GraphQLList(Product) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ClaimReviewInput = new GraphQLInputObjectType({
  name: 'ClaimReviewInput',
  fields: () => ({
    claimReviewed: { type: GraphQLList(GraphQLString) },
    reviewRating: { type: GraphQLList(Rating) },
    reviewAspect: { type: GraphQLList(GraphQLString) },
    itemReviewed: { type: GraphQLList(Thing) },
    reviewBody: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const CollegeOrUniversityInput = new GraphQLInputObjectType({
  name: 'CollegeOrUniversityInput',
  fields: () => ({
    alumni: { type: GraphQLList(Person) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ClipInput = new GraphQLInputObjectType({
  name: 'ClipInput',
  fields: () => ({
    actor: { type: GraphQLList(Person) },
    partOfEpisode: { type: GraphQLList(Episode) },
    partOfSeries: { type: GraphQLList(CreativeWorkSeries) },
    partOfSeason: { type: GraphQLList(CreativeWorkSeason) },
    musicBy: { type: GraphQLList(musicBy) },
    directors: { type: GraphQLList(Person) },
    director: { type: GraphQLList(Person) },
    actors: { type: GraphQLList(Person) },
    clipNumber: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const SeatInput = new GraphQLInputObjectType({
  name: 'SeatInput',
  fields: () => ({
    seatRow: { type: GraphQLList(GraphQLString) },
    seatingType: { type: GraphQLList(QualitativeValue) },
    seatSection: { type: GraphQLList(GraphQLString) },
    seatNumber: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const WantActionInput = new GraphQLInputObjectType({
  name: 'WantActionInput',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ReadActionInput = new GraphQLInputObjectType({
  name: 'ReadActionInput',
  fields: () => ({
    actionAccessibilityRequirement: { type: GraphQLList(ActionAccessSpecification) },
    expectsAcceptanceOf: { type: GraphQLList(Offer) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const SpecialtyInput = new GraphQLInputObjectType({
  name: 'SpecialtyInput',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const TaxiServiceInput = new GraphQLInputObjectType({
  name: 'TaxiServiceInput',
  fields: () => ({
    serviceArea: { type: GraphQLList(serviceArea) },
    provider: { type: GraphQLList(provider) },
    serviceAudience: { type: GraphQLList(Audience) },
    audience: { type: GraphQLList(Audience) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    hoursAvailable: { type: GraphQLList(OpeningHoursSpecification) },
    providerMobility: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    broker: { type: GraphQLList(broker) },
    serviceOutput: { type: GraphQLList(Thing) },
    logo: { type: GraphQLList(ImageObject) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    availableChannel: { type: GraphQLList(ServiceChannel) },
    review: { type: GraphQLList(Review) },
    serviceType: { type: GraphQLList(GraphQLString) },
    produces: { type: GraphQLList(Thing) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ItemAvailabilityInput = new GraphQLInputObjectType({
  name: 'ItemAvailabilityInput',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const TicketInput = new GraphQLInputObjectType({
  name: 'TicketInput',
  fields: () => ({
    underName: { type: GraphQLList(underName) },
    totalPrice: { type: GraphQLList(PriceSpecification) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    ticketNumber: { type: GraphQLList(GraphQLString) },
    issuedBy: { type: GraphQLList(Organization) },
    ticketToken: { type: GraphQLList(GraphQLString) },
    ticketedSeat: { type: GraphQLList(Seat) },
    dateIssued: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const OccupationInput = new GraphQLInputObjectType({
  name: 'OccupationInput',
  fields: () => ({
    occupationLocation: { type: GraphQLList(AdministrativeArea) },
    skills: { type: GraphQLList(GraphQLString) },
    responsibilities: { type: GraphQLList(GraphQLString) },
    occupationalCategory: { type: GraphQLList(GraphQLString) },
    experienceRequirements: { type: GraphQLList(GraphQLString) },
    estimatedSalary: { type: GraphQLList(MonetaryAmountDistribution) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ArtGalleryInput = new GraphQLInputObjectType({
  name: 'ArtGalleryInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const PlumberInput = new GraphQLInputObjectType({
  name: 'PlumberInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const PreschoolInput = new GraphQLInputObjectType({
  name: 'PreschoolInput',
  fields: () => ({
    alumni: { type: GraphQLList(Person) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const RejectActionInput = new GraphQLInputObjectType({
  name: 'RejectActionInput',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const TattooParlorInput = new GraphQLInputObjectType({
  name: 'TattooParlorInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const GeoCircleInput = new GraphQLInputObjectType({
  name: 'GeoCircleInput',
  fields: () => ({
    geoRadius: { type: GraphQLList(Distance) },
    geoMidpoint: { type: GraphQLList(GeoCoordinates) },
    address: { type: GraphQLList(PostalAddress) },
    circle: { type: GraphQLList(GraphQLString) },
    box: { type: GraphQLList(GraphQLString) },
    addressCountry: { type: GraphQLList(Country) },
    postalCode: { type: GraphQLList(GraphQLString) },
    elevation: { type: GraphQLList(GraphQLString) },
    polygon: { type: GraphQLList(GraphQLString) },
    line: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const BusinessFunctionInput = new GraphQLInputObjectType({
  name: 'BusinessFunctionInput',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const EnergyInput = new GraphQLInputObjectType({
  name: 'EnergyInput',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const FurnitureStoreInput = new GraphQLInputObjectType({
  name: 'FurnitureStoreInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const BusStopInput = new GraphQLInputObjectType({
  name: 'BusStopInput',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const MotorcycleRepairInput = new GraphQLInputObjectType({
  name: 'MotorcycleRepairInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const GovernmentPermitInput = new GraphQLInputObjectType({
  name: 'GovernmentPermitInput',
  fields: () => ({
    validFor: { type: GraphQLList(Duration) },
    validUntil: { type: GraphQLList(GraphQLString) },
    validFrom: { type: GraphQLList(GraphQLString) },
    issuedBy: { type: GraphQLList(Organization) },
    issuedThrough: { type: GraphQLList(Service) },
    permitAudience: { type: GraphQLList(Audience) },
    validIn: { type: GraphQLList(AdministrativeArea) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const InsertActionInput = new GraphQLInputObjectType({
  name: 'InsertActionInput',
  fields: () => ({
    toLocation: { type: GraphQLList(Place) },
    collection: { type: GraphQLList(Thing) },
    targetCollection: { type: GraphQLList(Thing) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ResortInput = new GraphQLInputObjectType({
  name: 'ResortInput',
  fields: () => ({
    audience: { type: GraphQLList(Audience) },
    checkinTime: { type: GraphQLList(GraphQLString) },
    petsAllowed: { type: GraphQLList(GraphQLString) },
    availableLanguage: { type: GraphQLList(Language) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    starRating: { type: GraphQLList(Rating) },
    checkoutTime: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const InvoiceInput = new GraphQLInputObjectType({
  name: 'InvoiceInput',
  fields: () => ({
    provider: { type: GraphQLList(provider) },
    paymentDue: { type: GraphQLList(GraphQLString) },
    billingPeriod: { type: GraphQLList(Duration) },
    confirmationNumber: { type: GraphQLList(GraphQLString) },
    accountId: { type: GraphQLList(GraphQLString) },
    scheduledPaymentDate: { type: GraphQLList(GraphQLString) },
    customer: { type: GraphQLList(customer) },
    category: { type: GraphQLList(Thing) },
    paymentStatus: { type: GraphQLList(PaymentStatusType) },
    broker: { type: GraphQLList(broker) },
    referencesOrder: { type: GraphQLList(Order) },
    paymentMethod: { type: GraphQLList(PaymentMethod) },
    paymentMethodId: { type: GraphQLList(GraphQLString) },
    minimumPaymentDue: { type: GraphQLList(minimumPaymentDue) },
    totalPaymentDue: { type: GraphQLList(totalPaymentDue) },
    paymentDueDate: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const TableInput = new GraphQLInputObjectType({
  name: 'TableInput',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const CompoundPriceSpecificationInput = new GraphQLInputObjectType({
  name: 'CompoundPriceSpecificationInput',
  fields: () => ({
    priceComponent: { type: GraphQLList(UnitPriceSpecification) },
    minPrice: { type: GraphQLList(GraphQLFloat) },
    eligibleTransactionVolume: { type: GraphQLList(PriceSpecification) },
    maxPrice: { type: GraphQLList(GraphQLFloat) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    eligibleQuantity: { type: GraphQLList(QuantitativeValue) },
    validFrom: { type: GraphQLList(GraphQLString) },
    validThrough: { type: GraphQLList(GraphQLString) },
    price: { type: GraphQLList(GraphQLString) },
    valueAddedTaxIncluded: { type: GraphQLList(GraphQLBoolean) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const PeopleAudienceInput = new GraphQLInputObjectType({
  name: 'PeopleAudienceInput',
  fields: () => ({
    childMaxAge: { type: GraphQLList(GraphQLFloat) },
    childMinAge: { type: GraphQLList(GraphQLFloat) },
    suggestedMaxAge: { type: GraphQLList(GraphQLFloat) },
    requiredMinAge: { type: GraphQLList(GraphQLInt) },
    requiredGender: { type: GraphQLList(GraphQLString) },
    suggestedGender: { type: GraphQLList(GraphQLString) },
    requiredMaxAge: { type: GraphQLList(GraphQLInt) },
    suggestedMinAge: { type: GraphQLList(GraphQLFloat) },
    audienceType: { type: GraphQLList(GraphQLString) },
    geographicArea: { type: GraphQLList(AdministrativeArea) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const GovernmentOrganizationInput = new GraphQLInputObjectType({
  name: 'GovernmentOrganizationInput',
  fields: () => ({
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const FoodEstablishmentReservationInput = new GraphQLInputObjectType({
  name: 'FoodEstablishmentReservationInput',
  fields: () => ({
    startTime: { type: GraphQLList(GraphQLString) },
    endTime: { type: GraphQLList(GraphQLString) },
    partySize: { type: GraphQLList(QuantitativeValue) },
    provider: { type: GraphQLList(provider) },
    programMembershipUsed: { type: GraphQLList(ProgramMembership) },
    reservationStatus: { type: GraphQLList(ReservationStatusType) },
    underName: { type: GraphQLList(underName) },
    bookingAgent: { type: GraphQLList(bookingAgent) },
    totalPrice: { type: GraphQLList(PriceSpecification) },
    reservationFor: { type: GraphQLList(Thing) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    broker: { type: GraphQLList(broker) },
    modifiedTime: { type: GraphQLList(GraphQLString) },
    bookingTime: { type: GraphQLList(GraphQLString) },
    reservationId: { type: GraphQLList(GraphQLString) },
    reservedTicket: { type: GraphQLList(Ticket) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const DataCatalogInput = new GraphQLInputObjectType({
  name: 'DataCatalogInput',
  fields: () => ({
    dataset: { type: GraphQLList(Dataset) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const PaymentChargeSpecificationInput = new GraphQLInputObjectType({
  name: 'PaymentChargeSpecificationInput',
  fields: () => ({
    appliesToPaymentMethod: { type: GraphQLList(PaymentMethod) },
    appliesToDeliveryMethod: { type: GraphQLList(DeliveryMethod) },
    minPrice: { type: GraphQLList(GraphQLFloat) },
    eligibleTransactionVolume: { type: GraphQLList(PriceSpecification) },
    maxPrice: { type: GraphQLList(GraphQLFloat) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    eligibleQuantity: { type: GraphQLList(QuantitativeValue) },
    validFrom: { type: GraphQLList(GraphQLString) },
    validThrough: { type: GraphQLList(GraphQLString) },
    price: { type: GraphQLList(GraphQLString) },
    valueAddedTaxIncluded: { type: GraphQLList(GraphQLBoolean) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const BusReservationInput = new GraphQLInputObjectType({
  name: 'BusReservationInput',
  fields: () => ({
    provider: { type: GraphQLList(provider) },
    programMembershipUsed: { type: GraphQLList(ProgramMembership) },
    reservationStatus: { type: GraphQLList(ReservationStatusType) },
    underName: { type: GraphQLList(underName) },
    bookingAgent: { type: GraphQLList(bookingAgent) },
    totalPrice: { type: GraphQLList(PriceSpecification) },
    reservationFor: { type: GraphQLList(Thing) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    broker: { type: GraphQLList(broker) },
    modifiedTime: { type: GraphQLList(GraphQLString) },
    bookingTime: { type: GraphQLList(GraphQLString) },
    reservationId: { type: GraphQLList(GraphQLString) },
    reservedTicket: { type: GraphQLList(Ticket) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const TaxiInput = new GraphQLInputObjectType({
  name: 'TaxiInput',
  fields: () => ({
    serviceArea: { type: GraphQLList(serviceArea) },
    provider: { type: GraphQLList(provider) },
    serviceAudience: { type: GraphQLList(Audience) },
    audience: { type: GraphQLList(Audience) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    hoursAvailable: { type: GraphQLList(OpeningHoursSpecification) },
    providerMobility: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    broker: { type: GraphQLList(broker) },
    serviceOutput: { type: GraphQLList(Thing) },
    logo: { type: GraphQLList(ImageObject) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    availableChannel: { type: GraphQLList(ServiceChannel) },
    review: { type: GraphQLList(Review) },
    serviceType: { type: GraphQLList(GraphQLString) },
    produces: { type: GraphQLList(Thing) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ItemPageInput = new GraphQLInputObjectType({
  name: 'ItemPageInput',
  fields: () => ({
    speakable: { type: GraphQLList(SpeakableSpecification) },
    breadcrumb: { type: GraphQLList(BreadcrumbList) },
    significantLink: { type: GraphQLList(GraphQLString) },
    relatedLink: { type: GraphQLList(GraphQLString) },
    lastReviewed: { type: GraphQLList(GraphQLString) },
    mainContentOfPage: { type: GraphQLList(WebPageElement) },
    reviewedBy: { type: GraphQLList(reviewedBy) },
    primaryImageOfPage: { type: GraphQLList(ImageObject) },
    significantLinks: { type: GraphQLList(GraphQLString) },
    specialty: { type: GraphQLList(Specialty) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const PhysicianInput = new GraphQLInputObjectType({
  name: 'PhysicianInput',
  fields: () => ({
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const RsvpResponseTypeInput = new GraphQLInputObjectType({
  name: 'RsvpResponseTypeInput',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const OrderItemInput = new GraphQLInputObjectType({
  name: 'OrderItemInput',
  fields: () => ({
    orderItemStatus: { type: GraphQLList(OrderStatus) },
    orderQuantity: { type: GraphQLList(GraphQLFloat) },
    orderDelivery: { type: GraphQLList(ParcelDelivery) },
    orderedItem: { type: GraphQLList(orderedItem) },
    orderItemNumber: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const BusinessEntityTypeInput = new GraphQLInputObjectType({
  name: 'BusinessEntityTypeInput',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const TipActionInput = new GraphQLInputObjectType({
  name: 'TipActionInput',
  fields: () => ({
    recipient: { type: GraphQLList(recipient) },
    priceSpecification: { type: GraphQLList(PriceSpecification) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    price: { type: GraphQLList(GraphQLString) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const HowToDirectionInput = new GraphQLInputObjectType({
  name: 'HowToDirectionInput',
  fields: () => ({
    beforeMedia: { type: GraphQLList(MediaObject) },
    prepTime: { type: GraphQLList(Duration) },
    tool: { type: GraphQLList(HowToTool) },
    performTime: { type: GraphQLList(Duration) },
    totalTime: { type: GraphQLList(Duration) },
    supply: { type: GraphQLList(HowToSupply) },
    afterMedia: { type: GraphQLList(MediaObject) },
    duringMedia: { type: GraphQLList(MediaObject) },
    nextItem: { type: GraphQLList(ListItem) },
    position: { type: GraphQLList(GraphQLString) },
    previousItem: { type: GraphQLList(ListItem) },
    item: { type: GraphQLList(Thing) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },

  })
});

const ApartmentInput = new GraphQLInputObjectType({
  name: 'ApartmentInput',
  fields: () => ({
    occupancy: { type: GraphQLList(QuantitativeValue) },
    numberOfRooms: { type: GraphQLList(QuantitativeValue) },
    floorSize: { type: GraphQLList(QuantitativeValue) },
    petsAllowed: { type: GraphQLList(GraphQLString) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    permittedUsage: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const NoteDigitalDocumentInput = new GraphQLInputObjectType({
  name: 'NoteDigitalDocumentInput',
  fields: () => ({
    hasDigitalDocumentPermission: { type: GraphQLList(DigitalDocumentPermission) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ServiceInput = new GraphQLInputObjectType({
  name: 'ServiceInput',
  fields: () => ({
    interestRate: { type: GraphQLList(QuantitativeValue) },
    feesAndCommissionsSpecification: { type: GraphQLList(GraphQLString) },
    annualPercentageRate: { type: GraphQLList(QuantitativeValue) },
    serviceArea: { type: GraphQLList(serviceArea) },
    provider: { type: GraphQLList(provider) },
    serviceAudience: { type: GraphQLList(Audience) },
    audience: { type: GraphQLList(Audience) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    hoursAvailable: { type: GraphQLList(OpeningHoursSpecification) },
    providerMobility: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    broker: { type: GraphQLList(broker) },
    serviceOutput: { type: GraphQLList(Thing) },
    logo: { type: GraphQLList(ImageObject) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    availableChannel: { type: GraphQLList(ServiceChannel) },
    review: { type: GraphQLList(Review) },
    serviceType: { type: GraphQLList(GraphQLString) },
    produces: { type: GraphQLList(Thing) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const CampgroundInput = new GraphQLInputObjectType({
  name: 'CampgroundInput',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    audience: { type: GraphQLList(Audience) },
    checkinTime: { type: GraphQLList(GraphQLString) },
    petsAllowed: { type: GraphQLList(GraphQLString) },
    availableLanguage: { type: GraphQLList(Language) },
    starRating: { type: GraphQLList(Rating) },
    checkoutTime: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    members: { type: GraphQLList(members) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    employees: { type: GraphQLList(Person) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },

  })
});

const TennisComplexInput = new GraphQLInputObjectType({
  name: 'TennisComplexInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const ThingInput = new GraphQLInputObjectType({
  name: 'ThingInput',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const SubwayStationInput = new GraphQLInputObjectType({
  name: 'SubwayStationInput',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const CourthouseInput = new GraphQLInputObjectType({
  name: 'CourthouseInput',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ReservationStatusTypeInput = new GraphQLInputObjectType({
  name: 'ReservationStatusTypeInput',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const HardwareStoreInput = new GraphQLInputObjectType({
  name: 'HardwareStoreInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const AskActionInput = new GraphQLInputObjectType({
  name: 'AskActionInput',
  fields: () => ({
    question: { type: GraphQLList(Question) },
    about: { type: GraphQLList(Thing) },
    inLanguage: { type: GraphQLList(Language) },
    recipient: { type: GraphQLList(recipient) },
    language: { type: GraphQLList(Language) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const VisualArtsEventInput = new GraphQLInputObjectType({
  name: 'VisualArtsEventInput',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const DigitalDocumentInput = new GraphQLInputObjectType({
  name: 'DigitalDocumentInput',
  fields: () => ({
    hasDigitalDocumentPermission: { type: GraphQLList(DigitalDocumentPermission) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const DanceGroupInput = new GraphQLInputObjectType({
  name: 'DanceGroupInput',
  fields: () => ({
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const BeautySalonInput = new GraphQLInputObjectType({
  name: 'BeautySalonInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const CommunicateActionInput = new GraphQLInputObjectType({
  name: 'CommunicateActionInput',
  fields: () => ({
    resultComment: { type: GraphQLList(Comment) },
    about: { type: GraphQLList(Thing) },
    inLanguage: { type: GraphQLList(Language) },
    recipient: { type: GraphQLList(recipient) },
    language: { type: GraphQLList(Language) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const MenuItemInput = new GraphQLInputObjectType({
  name: 'MenuItemInput',
  fields: () => ({
    menuAddOn: { type: GraphQLList(menuAddOn) },
    nutrition: { type: GraphQLList(NutritionInformation) },
    offers: { type: GraphQLList(Offer) },
    suitableForDiet: { type: GraphQLList(RestrictedDiet) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const RoofingContractorInput = new GraphQLInputObjectType({
  name: 'RoofingContractorInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const GovernmentServiceInput = new GraphQLInputObjectType({
  name: 'GovernmentServiceInput',
  fields: () => ({
    serviceOperator: { type: GraphQLList(Organization) },
    serviceArea: { type: GraphQLList(serviceArea) },
    provider: { type: GraphQLList(provider) },
    serviceAudience: { type: GraphQLList(Audience) },
    audience: { type: GraphQLList(Audience) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    hoursAvailable: { type: GraphQLList(OpeningHoursSpecification) },
    providerMobility: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    broker: { type: GraphQLList(broker) },
    serviceOutput: { type: GraphQLList(Thing) },
    logo: { type: GraphQLList(ImageObject) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    availableChannel: { type: GraphQLList(ServiceChannel) },
    review: { type: GraphQLList(Review) },
    serviceType: { type: GraphQLList(GraphQLString) },
    produces: { type: GraphQLList(Thing) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const DeliveryEventInput = new GraphQLInputObjectType({
  name: 'DeliveryEventInput',
  fields: () => ({
    hasDeliveryMethod: { type: GraphQLList(DeliveryMethod) },
    availableThrough: { type: GraphQLList(GraphQLString) },
    availableFrom: { type: GraphQLList(GraphQLString) },
    accessCode: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const HobbyShopInput = new GraphQLInputObjectType({
  name: 'HobbyShopInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const FollowActionInput = new GraphQLInputObjectType({
  name: 'FollowActionInput',
  fields: () => ({
    followee: { type: GraphQLList(followee) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ChildrensEventInput = new GraphQLInputObjectType({
  name: 'ChildrensEventInput',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const RVParkInput = new GraphQLInputObjectType({
  name: 'RVParkInput',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const SingleFamilyResidenceInput = new GraphQLInputObjectType({
  name: 'SingleFamilyResidenceInput',
  fields: () => ({
    occupancy: { type: GraphQLList(QuantitativeValue) },
    numberOfRooms: { type: GraphQLList(QuantitativeValue) },
    floorSize: { type: GraphQLList(QuantitativeValue) },
    petsAllowed: { type: GraphQLList(GraphQLString) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    permittedUsage: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const WholesaleStoreInput = new GraphQLInputObjectType({
  name: 'WholesaleStoreInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const RentalCarReservationInput = new GraphQLInputObjectType({
  name: 'RentalCarReservationInput',
  fields: () => ({
    dropoffTime: { type: GraphQLList(GraphQLString) },
    dropoffLocation: { type: GraphQLList(Place) },
    pickupLocation: { type: GraphQLList(Place) },
    pickupTime: { type: GraphQLList(GraphQLString) },
    provider: { type: GraphQLList(provider) },
    programMembershipUsed: { type: GraphQLList(ProgramMembership) },
    reservationStatus: { type: GraphQLList(ReservationStatusType) },
    underName: { type: GraphQLList(underName) },
    bookingAgent: { type: GraphQLList(bookingAgent) },
    totalPrice: { type: GraphQLList(PriceSpecification) },
    reservationFor: { type: GraphQLList(Thing) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    broker: { type: GraphQLList(broker) },
    modifiedTime: { type: GraphQLList(GraphQLString) },
    bookingTime: { type: GraphQLList(GraphQLString) },
    reservationId: { type: GraphQLList(GraphQLString) },
    reservedTicket: { type: GraphQLList(Ticket) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const TravelActionInput = new GraphQLInputObjectType({
  name: 'TravelActionInput',
  fields: () => ({
    distance: { type: GraphQLList(Distance) },
    toLocation: { type: GraphQLList(Place) },
    fromLocation: { type: GraphQLList(Place) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const OrganizationRoleInput = new GraphQLInputObjectType({
  name: 'OrganizationRoleInput',
  fields: () => ({
    numberedPosition: { type: GraphQLList(GraphQLFloat) },
    endDate: { type: GraphQLList(GraphQLString) },
    startDate: { type: GraphQLList(GraphQLString) },
    namedPosition: { type: GraphQLList(GraphQLString) },
    roleName: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const SkiResortInput = new GraphQLInputObjectType({
  name: 'SkiResortInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const AutomatedTellerInput = new GraphQLInputObjectType({
  name: 'AutomatedTellerInput',
  fields: () => ({
    feesAndCommissionsSpecification: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const CanalInput = new GraphQLInputObjectType({
  name: 'CanalInput',
  fields: () => ({
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const NGOInput = new GraphQLInputObjectType({
  name: 'NGOInput',
  fields: () => ({
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const TVSeriesInput = new GraphQLInputObjectType({
  name: 'TVSeriesInput',
  fields: () => ({
    seasons: { type: GraphQLList(CreativeWorkSeason) },
    actor: { type: GraphQLList(Person) },
    numberOfEpisodes: { type: GraphQLList(GraphQLInt) },
    trailer: { type: GraphQLList(VideoObject) },
    season: { type: GraphQLList(CreativeWorkSeason) },
    episodes: { type: GraphQLList(Episode) },
    countryOfOrigin: { type: GraphQLList(Country) },
    musicBy: { type: GraphQLList(musicBy) },
    containsSeason: { type: GraphQLList(CreativeWorkSeason) },
    directors: { type: GraphQLList(Person) },
    numberOfSeasons: { type: GraphQLList(GraphQLInt) },
    director: { type: GraphQLList(Person) },
    productionCompany: { type: GraphQLList(Organization) },
    actors: { type: GraphQLList(Person) },
    episode: { type: GraphQLList(Episode) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    endDate: { type: GraphQLList(GraphQLString) },
    issn: { type: GraphQLList(GraphQLString) },
    startDate: { type: GraphQLList(GraphQLString) },

  })
});

const BarOrPubInput = new GraphQLInputObjectType({
  name: 'BarOrPubInput',
  fields: () => ({
    servesCuisine: { type: GraphQLList(GraphQLString) },
    hasMenu: { type: GraphQLList(Menu) },
    menu: { type: GraphQLList(Menu) },
    starRating: { type: GraphQLList(Rating) },
    acceptsReservations: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const FMRadioChannelInput = new GraphQLInputObjectType({
  name: 'FMRadioChannelInput',
  fields: () => ({
    broadcastFrequency: { type: GraphQLList(BroadcastFrequencySpecification) },
    broadcastChannelId: { type: GraphQLList(GraphQLString) },
    broadcastServiceTier: { type: GraphQLList(GraphQLString) },
    inBroadcastLineup: { type: GraphQLList(CableOrSatelliteService) },
    providesBroadcastService: { type: GraphQLList(BroadcastService) },
    genre: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const DistanceInput = new GraphQLInputObjectType({
  name: 'DistanceInput',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const MusicPlaylistInput = new GraphQLInputObjectType({
  name: 'MusicPlaylistInput',
  fields: () => ({
    numTracks: { type: GraphQLList(GraphQLInt) },
    track: { type: GraphQLList(track) },
    tracks: { type: GraphQLList(MusicRecording) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const QuantitativeValueInput = new GraphQLInputObjectType({
  name: 'QuantitativeValueInput',
  fields: () => ({
    unitCode: { type: GraphQLList(GraphQLString) },
    minValue: { type: GraphQLList(GraphQLFloat) },
    value: { type: GraphQLList(StructuredValue) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    valueReference: { type: GraphQLList(valueReference) },
    maxValue: { type: GraphQLList(GraphQLFloat) },
    unitText: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const BedDetailsInput = new GraphQLInputObjectType({
  name: 'BedDetailsInput',
  fields: () => ({
    typeOfBed: { type: GraphQLList(BedType) },
    numberOfBeds: { type: GraphQLList(GraphQLFloat) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const OwnershipInfoInput = new GraphQLInputObjectType({
  name: 'OwnershipInfoInput',
  fields: () => ({
    typeOfGood: { type: GraphQLList(typeOfGood) },
    ownedThrough: { type: GraphQLList(GraphQLString) },
    acquiredFrom: { type: GraphQLList(acquiredFrom) },
    ownedFrom: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const MensClothingStoreInput = new GraphQLInputObjectType({
  name: 'MensClothingStoreInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const AcceptActionInput = new GraphQLInputObjectType({
  name: 'AcceptActionInput',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const LanguageInput = new GraphQLInputObjectType({
  name: 'LanguageInput',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const NewsArticleInput = new GraphQLInputObjectType({
  name: 'NewsArticleInput',
  fields: () => ({
    printColumn: { type: GraphQLList(GraphQLString) },
    printEdition: { type: GraphQLList(GraphQLString) },
    printSection: { type: GraphQLList(GraphQLString) },
    printPage: { type: GraphQLList(GraphQLString) },
    dateline: { type: GraphQLList(GraphQLString) },
    pagination: { type: GraphQLList(GraphQLString) },
    wordCount: { type: GraphQLList(GraphQLInt) },
    speakable: { type: GraphQLList(SpeakableSpecification) },
    pageEnd: { type: GraphQLList(GraphQLString) },
    articleSection: { type: GraphQLList(GraphQLString) },
    articleBody: { type: GraphQLList(GraphQLString) },
    pageStart: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const TheaterGroupInput = new GraphQLInputObjectType({
  name: 'TheaterGroupInput',
  fields: () => ({
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ParcelDeliveryInput = new GraphQLInputObjectType({
  name: 'ParcelDeliveryInput',
  fields: () => ({
    provider: { type: GraphQLList(provider) },
    trackingUrl: { type: GraphQLList(GraphQLString) },
    deliveryAddress: { type: GraphQLList(PostalAddress) },
    trackingNumber: { type: GraphQLList(GraphQLString) },
    hasDeliveryMethod: { type: GraphQLList(DeliveryMethod) },
    deliveryStatus: { type: GraphQLList(DeliveryEvent) },
    carrier: { type: GraphQLList(Organization) },
    originAddress: { type: GraphQLList(PostalAddress) },
    itemShipped: { type: GraphQLList(Product) },
    partOfOrder: { type: GraphQLList(Order) },
    expectedArrivalFrom: { type: GraphQLList(GraphQLString) },
    expectedArrivalUntil: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const BoardingPolicyTypeInput = new GraphQLInputObjectType({
  name: 'BoardingPolicyTypeInput',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const PondInput = new GraphQLInputObjectType({
  name: 'PondInput',
  fields: () => ({
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const AnswerInput = new GraphQLInputObjectType({
  name: 'AnswerInput',
  fields: () => ({
    upvoteCount: { type: GraphQLList(GraphQLInt) },
    parentItem: { type: GraphQLList(Question) },
    downvoteCount: { type: GraphQLList(GraphQLInt) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const BreweryInput = new GraphQLInputObjectType({
  name: 'BreweryInput',
  fields: () => ({
    servesCuisine: { type: GraphQLList(GraphQLString) },
    hasMenu: { type: GraphQLList(Menu) },
    menu: { type: GraphQLList(Menu) },
    starRating: { type: GraphQLList(Rating) },
    acceptsReservations: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const AllocateActionInput = new GraphQLInputObjectType({
  name: 'AllocateActionInput',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ParentAudienceInput = new GraphQLInputObjectType({
  name: 'ParentAudienceInput',
  fields: () => ({
    childMaxAge: { type: GraphQLList(GraphQLFloat) },
    childMinAge: { type: GraphQLList(GraphQLFloat) },
    suggestedMaxAge: { type: GraphQLList(GraphQLFloat) },
    requiredMinAge: { type: GraphQLList(GraphQLInt) },
    requiredGender: { type: GraphQLList(GraphQLString) },
    suggestedGender: { type: GraphQLList(GraphQLString) },
    requiredMaxAge: { type: GraphQLList(GraphQLInt) },
    suggestedMinAge: { type: GraphQLList(GraphQLFloat) },
    audienceType: { type: GraphQLList(GraphQLString) },
    geographicArea: { type: GraphQLList(AdministrativeArea) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const RadioChannelInput = new GraphQLInputObjectType({
  name: 'RadioChannelInput',
  fields: () => ({
    broadcastFrequency: { type: GraphQLList(BroadcastFrequencySpecification) },
    broadcastChannelId: { type: GraphQLList(GraphQLString) },
    broadcastServiceTier: { type: GraphQLList(GraphQLString) },
    inBroadcastLineup: { type: GraphQLList(CableOrSatelliteService) },
    providesBroadcastService: { type: GraphQLList(BroadcastService) },
    genre: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const RoomInput = new GraphQLInputObjectType({
  name: 'RoomInput',
  fields: () => ({
    floorSize: { type: GraphQLList(QuantitativeValue) },
    petsAllowed: { type: GraphQLList(GraphQLString) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    numberOfRooms: { type: GraphQLList(QuantitativeValue) },
    permittedUsage: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const PublicSwimmingPoolInput = new GraphQLInputObjectType({
  name: 'PublicSwimmingPoolInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const JobPostingInput = new GraphQLInputObjectType({
  name: 'JobPostingInput',
  fields: () => ({
    benefits: { type: GraphQLList(GraphQLString) },
    incentiveCompensation: { type: GraphQLList(GraphQLString) },
    workHours: { type: GraphQLList(GraphQLString) },
    salaryCurrency: { type: GraphQLList(GraphQLString) },
    jobBenefits: { type: GraphQLList(GraphQLString) },
    datePosted: { type: GraphQLList(GraphQLString) },
    skills: { type: GraphQLList(GraphQLString) },
    incentives: { type: GraphQLList(GraphQLString) },
    responsibilities: { type: GraphQLList(GraphQLString) },
    baseSalary: { type: GraphQLList(baseSalary) },
    validThrough: { type: GraphQLList(GraphQLString) },
    hiringOrganization: { type: GraphQLList(Organization) },
    relevantOccupation: { type: GraphQLList(Occupation) },
    specialCommitments: { type: GraphQLList(GraphQLString) },
    occupationalCategory: { type: GraphQLList(GraphQLString) },
    experienceRequirements: { type: GraphQLList(GraphQLString) },
    employmentType: { type: GraphQLList(GraphQLString) },
    jobLocation: { type: GraphQLList(Place) },
    title: { type: GraphQLList(GraphQLString) },
    industry: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const MusicReleaseFormatTypeInput = new GraphQLInputObjectType({
  name: 'MusicReleaseFormatTypeInput',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const FinancialProductInput = new GraphQLInputObjectType({
  name: 'FinancialProductInput',
  fields: () => ({
    interestRate: { type: GraphQLList(QuantitativeValue) },
    feesAndCommissionsSpecification: { type: GraphQLList(GraphQLString) },
    annualPercentageRate: { type: GraphQLList(QuantitativeValue) },
    serviceArea: { type: GraphQLList(serviceArea) },
    provider: { type: GraphQLList(provider) },
    serviceAudience: { type: GraphQLList(Audience) },
    audience: { type: GraphQLList(Audience) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    hoursAvailable: { type: GraphQLList(OpeningHoursSpecification) },
    providerMobility: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    broker: { type: GraphQLList(broker) },
    serviceOutput: { type: GraphQLList(Thing) },
    logo: { type: GraphQLList(ImageObject) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    availableChannel: { type: GraphQLList(ServiceChannel) },
    review: { type: GraphQLList(Review) },
    serviceType: { type: GraphQLList(GraphQLString) },
    produces: { type: GraphQLList(Thing) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const PerformingGroupInput = new GraphQLInputObjectType({
  name: 'PerformingGroupInput',
  fields: () => ({
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const MediaObjectInput = new GraphQLInputObjectType({
  name: 'MediaObjectInput',
  fields: () => ({
    startTime: { type: GraphQLList(GraphQLString) },
    uploadDate: { type: GraphQLList(GraphQLString) },
    playerType: { type: GraphQLList(GraphQLString) },
    height: { type: GraphQLList(height) },
    bitrate: { type: GraphQLList(GraphQLString) },
    requiresSubscription: { type: GraphQLList(MediaSubscription) },
    regionsAllowed: { type: GraphQLList(Place) },
    endTime: { type: GraphQLList(GraphQLString) },
    contentSize: { type: GraphQLList(GraphQLString) },
    embedUrl: { type: GraphQLList(GraphQLString) },
    width: { type: GraphQLList(width) },
    contentUrl: { type: GraphQLList(GraphQLString) },
    associatedArticle: { type: GraphQLList(NewsArticle) },
    productionCompany: { type: GraphQLList(Organization) },
    duration: { type: GraphQLList(Duration) },
    encodesCreativeWork: { type: GraphQLList(CreativeWork) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const CemeteryInput = new GraphQLInputObjectType({
  name: 'CemeteryInput',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const AccountingServiceInput = new GraphQLInputObjectType({
  name: 'AccountingServiceInput',
  fields: () => ({
    feesAndCommissionsSpecification: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const CheckInActionInput = new GraphQLInputObjectType({
  name: 'CheckInActionInput',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    inLanguage: { type: GraphQLList(Language) },
    recipient: { type: GraphQLList(recipient) },
    language: { type: GraphQLList(Language) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const DayOfWeekInput = new GraphQLInputObjectType({
  name: 'DayOfWeekInput',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const BusinessAudienceInput = new GraphQLInputObjectType({
  name: 'BusinessAudienceInput',
  fields: () => ({
    yearsInOperation: { type: GraphQLList(QuantitativeValue) },
    yearlyRevenue: { type: GraphQLList(QuantitativeValue) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    audienceType: { type: GraphQLList(GraphQLString) },
    geographicArea: { type: GraphQLList(AdministrativeArea) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const LodgingBusinessInput = new GraphQLInputObjectType({
  name: 'LodgingBusinessInput',
  fields: () => ({
    audience: { type: GraphQLList(Audience) },
    checkinTime: { type: GraphQLList(GraphQLString) },
    petsAllowed: { type: GraphQLList(GraphQLString) },
    availableLanguage: { type: GraphQLList(Language) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    starRating: { type: GraphQLList(Rating) },
    checkoutTime: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const AirportInput = new GraphQLInputObjectType({
  name: 'AirportInput',
  fields: () => ({
    iataCode: { type: GraphQLList(GraphQLString) },
    icaoCode: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const EventStatusTypeInput = new GraphQLInputObjectType({
  name: 'EventStatusTypeInput',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const CreativeWorkSeasonInput = new GraphQLInputObjectType({
  name: 'CreativeWorkSeasonInput',
  fields: () => ({
    actor: { type: GraphQLList(Person) },
    numberOfEpisodes: { type: GraphQLList(GraphQLInt) },
    trailer: { type: GraphQLList(VideoObject) },
    endDate: { type: GraphQLList(GraphQLString) },
    partOfSeries: { type: GraphQLList(CreativeWorkSeries) },
    episodes: { type: GraphQLList(Episode) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    productionCompany: { type: GraphQLList(Organization) },
    episode: { type: GraphQLList(Episode) },
    seasonNumber: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ReservationInput = new GraphQLInputObjectType({
  name: 'ReservationInput',
  fields: () => ({
    provider: { type: GraphQLList(provider) },
    programMembershipUsed: { type: GraphQLList(ProgramMembership) },
    reservationStatus: { type: GraphQLList(ReservationStatusType) },
    underName: { type: GraphQLList(underName) },
    bookingAgent: { type: GraphQLList(bookingAgent) },
    totalPrice: { type: GraphQLList(PriceSpecification) },
    reservationFor: { type: GraphQLList(Thing) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    broker: { type: GraphQLList(broker) },
    modifiedTime: { type: GraphQLList(GraphQLString) },
    bookingTime: { type: GraphQLList(GraphQLString) },
    reservationId: { type: GraphQLList(GraphQLString) },
    reservedTicket: { type: GraphQLList(Ticket) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const FindActionInput = new GraphQLInputObjectType({
  name: 'FindActionInput',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const RecyclingCenterInput = new GraphQLInputObjectType({
  name: 'RecyclingCenterInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const HospitalInput = new GraphQLInputObjectType({
  name: 'HospitalInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const FestivalInput = new GraphQLInputObjectType({
  name: 'FestivalInput',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const LockerDeliveryInput = new GraphQLInputObjectType({
  name: 'LockerDeliveryInput',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const RadioSeasonInput = new GraphQLInputObjectType({
  name: 'RadioSeasonInput',
  fields: () => ({
    actor: { type: GraphQLList(Person) },
    numberOfEpisodes: { type: GraphQLList(GraphQLInt) },
    trailer: { type: GraphQLList(VideoObject) },
    endDate: { type: GraphQLList(GraphQLString) },
    partOfSeries: { type: GraphQLList(CreativeWorkSeries) },
    episodes: { type: GraphQLList(Episode) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    productionCompany: { type: GraphQLList(Organization) },
    episode: { type: GraphQLList(Episode) },
    seasonNumber: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const UpdateActionInput = new GraphQLInputObjectType({
  name: 'UpdateActionInput',
  fields: () => ({
    collection: { type: GraphQLList(Thing) },
    targetCollection: { type: GraphQLList(Thing) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const AggregateRatingInput = new GraphQLInputObjectType({
  name: 'AggregateRatingInput',
  fields: () => ({
    itemReviewed: { type: GraphQLList(Thing) },
    reviewCount: { type: GraphQLList(GraphQLInt) },
    ratingCount: { type: GraphQLList(GraphQLInt) },
    ratingValue: { type: GraphQLList(GraphQLString) },
    bestRating: { type: GraphQLList(GraphQLString) },
    reviewAspect: { type: GraphQLList(GraphQLString) },
    author: { type: GraphQLList(author) },
    worstRating: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ReplyActionInput = new GraphQLInputObjectType({
  name: 'ReplyActionInput',
  fields: () => ({
    resultComment: { type: GraphQLList(Comment) },
    about: { type: GraphQLList(Thing) },
    inLanguage: { type: GraphQLList(Language) },
    recipient: { type: GraphQLList(recipient) },
    language: { type: GraphQLList(Language) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const EmailMessageInput = new GraphQLInputObjectType({
  name: 'EmailMessageInput',
  fields: () => ({
    dateRead: { type: GraphQLList(GraphQLString) },
    bccRecipient: { type: GraphQLList(bccRecipient) },
    dateSent: { type: GraphQLList(GraphQLString) },
    ccRecipient: { type: GraphQLList(ccRecipient) },
    recipient: { type: GraphQLList(recipient) },
    messageAttachment: { type: GraphQLList(CreativeWork) },
    dateReceived: { type: GraphQLList(GraphQLString) },
    toRecipient: { type: GraphQLList(toRecipient) },
    sender: { type: GraphQLList(sender) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const BusStationInput = new GraphQLInputObjectType({
  name: 'BusStationInput',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const BowlingAlleyInput = new GraphQLInputObjectType({
  name: 'BowlingAlleyInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const ImageGalleryInput = new GraphQLInputObjectType({
  name: 'ImageGalleryInput',
  fields: () => ({
    speakable: { type: GraphQLList(SpeakableSpecification) },
    breadcrumb: { type: GraphQLList(BreadcrumbList) },
    significantLink: { type: GraphQLList(GraphQLString) },
    relatedLink: { type: GraphQLList(GraphQLString) },
    lastReviewed: { type: GraphQLList(GraphQLString) },
    mainContentOfPage: { type: GraphQLList(WebPageElement) },
    reviewedBy: { type: GraphQLList(reviewedBy) },
    primaryImageOfPage: { type: GraphQLList(ImageObject) },
    significantLinks: { type: GraphQLList(GraphQLString) },
    specialty: { type: GraphQLList(Specialty) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const OfferInput = new GraphQLInputObjectType({
  name: 'OfferInput',
  fields: () => ({
    sku: { type: GraphQLList(GraphQLString) },
    availabilityStarts: { type: GraphQLList(GraphQLString) },
    availableDeliveryMethod: { type: GraphQLList(DeliveryMethod) },
    mpn: { type: GraphQLList(GraphQLString) },
    serialNumber: { type: GraphQLList(GraphQLString) },
    ineligibleRegion: { type: GraphQLList(ineligibleRegion) },
    gtin8: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    availability: { type: GraphQLList(ItemAvailability) },
    priceSpecification: { type: GraphQLList(PriceSpecification) },
    inventoryLevel: { type: GraphQLList(QuantitativeValue) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    eligibleTransactionVolume: { type: GraphQLList(PriceSpecification) },
    availableAtOrFrom: { type: GraphQLList(Place) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    priceValidUntil: { type: GraphQLList(GraphQLString) },
    addOn: { type: GraphQLList(Offer) },
    warranty: { type: GraphQLList(WarrantyPromise) },
    eligibleQuantity: { type: GraphQLList(QuantitativeValue) },
    validFrom: { type: GraphQLList(GraphQLString) },
    validThrough: { type: GraphQLList(GraphQLString) },
    price: { type: GraphQLList(GraphQLString) },
    gtin14: { type: GraphQLList(GraphQLString) },
    gtin13: { type: GraphQLList(GraphQLString) },
    gtin12: { type: GraphQLList(GraphQLString) },
    seller: { type: GraphQLList(seller) },
    deliveryLeadTime: { type: GraphQLList(QuantitativeValue) },
    availabilityEnds: { type: GraphQLList(GraphQLString) },
    includesObject: { type: GraphQLList(TypeAndQuantityNode) },
    review: { type: GraphQLList(Review) },
    businessFunction: { type: GraphQLList(BusinessFunction) },
    eligibleCustomerType: { type: GraphQLList(BusinessEntityType) },
    itemCondition: { type: GraphQLList(OfferItemCondition) },
    itemOffered: { type: GraphQLList(itemOffered) },
    offeredBy: { type: GraphQLList(offeredBy) },
    eligibleDuration: { type: GraphQLList(QuantitativeValue) },
    acceptedPaymentMethod: { type: GraphQLList(acceptedPaymentMethod) },
    areaServed: { type: GraphQLList(areaServed) },
    eligibleRegion: { type: GraphQLList(eligibleRegion) },
    advanceBookingRequirement: { type: GraphQLList(QuantitativeValue) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const DataDownloadInput = new GraphQLInputObjectType({
  name: 'DataDownloadInput',
  fields: () => ({
    startTime: { type: GraphQLList(GraphQLString) },
    uploadDate: { type: GraphQLList(GraphQLString) },
    playerType: { type: GraphQLList(GraphQLString) },
    height: { type: GraphQLList(height) },
    bitrate: { type: GraphQLList(GraphQLString) },
    requiresSubscription: { type: GraphQLList(MediaSubscription) },
    regionsAllowed: { type: GraphQLList(Place) },
    endTime: { type: GraphQLList(GraphQLString) },
    contentSize: { type: GraphQLList(GraphQLString) },
    embedUrl: { type: GraphQLList(GraphQLString) },
    width: { type: GraphQLList(width) },
    contentUrl: { type: GraphQLList(GraphQLString) },
    associatedArticle: { type: GraphQLList(NewsArticle) },
    productionCompany: { type: GraphQLList(Organization) },
    duration: { type: GraphQLList(Duration) },
    encodesCreativeWork: { type: GraphQLList(CreativeWork) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const ProductInput = new GraphQLInputObjectType({
  name: 'ProductInput',
  fields: () => ({
    manufacturer: { type: GraphQLList(Organization) },
    sku: { type: GraphQLList(GraphQLString) },
    productionDate: { type: GraphQLList(GraphQLString) },
    audience: { type: GraphQLList(Audience) },
    mpn: { type: GraphQLList(GraphQLString) },
    height: { type: GraphQLList(height) },
    gtin8: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    isConsumableFor: { type: GraphQLList(Product) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    width: { type: GraphQLList(width) },
    awards: { type: GraphQLList(GraphQLString) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    isAccessoryOrSparePartFor: { type: GraphQLList(Product) },
    logo: { type: GraphQLList(ImageObject) },
    gtin14: { type: GraphQLList(GraphQLString) },
    gtin13: { type: GraphQLList(GraphQLString) },
    gtin12: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    weight: { type: GraphQLList(QuantitativeValue) },
    depth: { type: GraphQLList(depth) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    model: { type: GraphQLList(ProductModel) },
    color: { type: GraphQLList(GraphQLString) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    productID: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    purchaseDate: { type: GraphQLList(GraphQLString) },
    itemCondition: { type: GraphQLList(OfferItemCondition) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    releaseDate: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const CampingPitchInput = new GraphQLInputObjectType({
  name: 'CampingPitchInput',
  fields: () => ({
    floorSize: { type: GraphQLList(QuantitativeValue) },
    petsAllowed: { type: GraphQLList(GraphQLString) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    numberOfRooms: { type: GraphQLList(QuantitativeValue) },
    permittedUsage: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const GeoCoordinatesInput = new GraphQLInputObjectType({
  name: 'GeoCoordinatesInput',
  fields: () => ({
    address: { type: GraphQLList(PostalAddress) },
    latitude: { type: GraphQLList(GraphQLString) },
    longitude: { type: GraphQLList(GraphQLString) },
    addressCountry: { type: GraphQLList(Country) },
    postalCode: { type: GraphQLList(GraphQLString) },
    elevation: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const MiddleSchoolInput = new GraphQLInputObjectType({
  name: 'MiddleSchoolInput',
  fields: () => ({
    alumni: { type: GraphQLList(Person) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const AutomotiveBusinessInput = new GraphQLInputObjectType({
  name: 'AutomotiveBusinessInput',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },

  })
});

const LiteraryEventInput = new GraphQLInputObjectType({
  name: 'LiteraryEventInput',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const SocialEventInput = new GraphQLInputObjectType({
  name: 'SocialEventInput',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const EatActionInput = new GraphQLInputObjectType({
  name: 'EatActionInput',
  fields: () => ({
    actionAccessibilityRequirement: { type: GraphQLList(ActionAccessSpecification) },
    expectsAcceptanceOf: { type: GraphQLList(Offer) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const TheaterEventInput = new GraphQLInputObjectType({
  name: 'TheaterEventInput',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const TakeActionInput = new GraphQLInputObjectType({
  name: 'TakeActionInput',
  fields: () => ({
    toLocation: { type: GraphQLList(Place) },
    fromLocation: { type: GraphQLList(Place) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const SportsEventInput = new GraphQLInputObjectType({
  name: 'SportsEventInput',
  fields: () => ({
    awayTeam: { type: GraphQLList(awayTeam) },
    homeTeam: { type: GraphQLList(homeTeam) },
    competitor: { type: GraphQLList(competitor) },
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

const GamePlayModeInput = new GraphQLInputObjectType({
  name: 'GamePlayModeInput',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },

  })
});

/* union type for input types definition */

const funderInput = UnionInputType({
  name: 'funderInput',
  inputTypes: [
    OrganizationInput,
    PersonInput,
    
  ],
});

const performersInput = UnionInputType({
  name: 'performersInput',
  inputTypes: [
    OrganizationInput,
    PersonInput,
    
  ],
});

const contributorInput = UnionInputType({
  name: 'contributorInput',
  inputTypes: [
    OrganizationInput,
    PersonInput,
    
  ],
});

const organizerInput = UnionInputType({
  name: 'organizerInput',
  inputTypes: [
    OrganizationInput,
    PersonInput,
    
  ],
});

const attendeesInput = UnionInputType({
  name: 'attendeesInput',
  inputTypes: [
    OrganizationInput,
    PersonInput,
    
  ],
});

const attendeeInput = UnionInputType({
  name: 'attendeeInput',
  inputTypes: [
    OrganizationInput,
    PersonInput,
    
  ],
});

const translatorInput = UnionInputType({
  name: 'translatorInput',
  inputTypes: [
    OrganizationInput,
    PersonInput,
    
  ],
});

const sponsorInput = UnionInputType({
  name: 'sponsorInput',
  inputTypes: [
    OrganizationInput,
    PersonInput,
    
  ],
});

const locationInput = UnionInputType({
  name: 'locationInput',
  inputTypes: [
    PlaceInput,
    PostalAddressInput,
    
  ],
});

const composerInput = UnionInputType({
  name: 'composerInput',
  inputTypes: [
    OrganizationInput,
    PersonInput,
    
  ],
});

const performerInput = UnionInputType({
  name: 'performerInput',
  inputTypes: [
    OrganizationInput,
    PersonInput,
    
  ],
});

const subjectOfInput = UnionInputType({
  name: 'subjectOfInput',
  inputTypes: [
    EventInput,
    CreativeWorkInput,
    
  ],
});

const serviceAreaInput = UnionInputType({
  name: 'serviceAreaInput',
  inputTypes: [
    AdministrativeAreaInput,
    GeoShapeInput,
    PlaceInput,
    
  ],
});

const memberOfInput = UnionInputType({
  name: 'memberOfInput',
  inputTypes: [
    ProgramMembershipInput,
    OrganizationInput,
    
  ],
});

const membersInput = UnionInputType({
  name: 'membersInput',
  inputTypes: [
    OrganizationInput,
    PersonInput,
    
  ],
});

const memberInput = UnionInputType({
  name: 'memberInput',
  inputTypes: [
    OrganizationInput,
    PersonInput,
    
  ],
});

const ownsInput = UnionInputType({
  name: 'ownsInput',
  inputTypes: [
    ProductInput,
    OwnershipInfoInput,
    
  ],
});

const brandInput = UnionInputType({
  name: 'brandInput',
  inputTypes: [
    OrganizationInput,
    BrandInput,
    
  ],
});

const areaServedInput = UnionInputType({
  name: 'areaServedInput',
  inputTypes: [
    AdministrativeAreaInput,
    GeoShapeInput,
    PlaceInput,
    
  ],
});

const photoInput = UnionInputType({
  name: 'photoInput',
  inputTypes: [
    PhotographInput,
    ImageObjectInput,
    
  ],
});

const photosInput = UnionInputType({
  name: 'photosInput',
  inputTypes: [
    PhotographInput,
    ImageObjectInput,
    
  ],
});

const geoInput = UnionInputType({
  name: 'geoInput',
  inputTypes: [
    GeoCoordinatesInput,
    GeoShapeInput,
    
  ],
});

const providerInput = UnionInputType({
  name: 'providerInput',
  inputTypes: [
    OrganizationInput,
    PersonInput,
    
  ],
});

const brokerInput = UnionInputType({
  name: 'brokerInput',
  inputTypes: [
    OrganizationInput,
    PersonInput,
    
  ],
});

const isSimilarToInput = UnionInputType({
  name: 'isSimilarToInput',
  inputTypes: [
    ServiceInput,
    ProductInput,
    
  ],
});

const isRelatedToInput = UnionInputType({
  name: 'isRelatedToInput',
  inputTypes: [
    ServiceInput,
    ProductInput,
    
  ],
});

const recipeInstructionsInput = UnionInputType({
  name: 'recipeInstructionsInput',
  inputTypes: [
    ItemListInput,
    CreativeWorkInput,
    
  ],
});

const stepsInput = UnionInputType({
  name: 'stepsInput',
  inputTypes: [
    ItemListInput,
    CreativeWorkInput,
    
  ],
});

const stepInput = UnionInputType({
  name: 'stepInput',
  inputTypes: [
    HowToSectionInput,
    HowToStepInput,
    CreativeWorkInput,
    
  ],
});

const audioInput = UnionInputType({
  name: 'audioInput',
  inputTypes: [
    ClipInput,
    AudioObjectInput,
    
  ],
});

const videoInput = UnionInputType({
  name: 'videoInput',
  inputTypes: [
    VideoObjectInput,
    ClipInput,
    
  ],
});

const publisherInput = UnionInputType({
  name: 'publisherInput',
  inputTypes: [
    OrganizationInput,
    PersonInput,
    
  ],
});

const copyrightHolderInput = UnionInputType({
  name: 'copyrightHolderInput',
  inputTypes: [
    OrganizationInput,
    PersonInput,
    
  ],
});

const authorInput = UnionInputType({
  name: 'authorInput',
  inputTypes: [
    OrganizationInput,
    PersonInput,
    
  ],
});

const isBasedOnUrlInput = UnionInputType({
  name: 'isBasedOnUrlInput',
  inputTypes: [
    ProductInput,
    CreativeWorkInput,
    
  ],
});

const isBasedOnInput = UnionInputType({
  name: 'isBasedOnInput',
  inputTypes: [
    ProductInput,
    CreativeWorkInput,
    
  ],
});

const creatorInput = UnionInputType({
  name: 'creatorInput',
  inputTypes: [
    OrganizationInput,
    PersonInput,
    
  ],
});

const producerInput = UnionInputType({
  name: 'producerInput',
  inputTypes: [
    OrganizationInput,
    PersonInput,
    
  ],
});

const ineligibleRegionInput = UnionInputType({
  name: 'ineligibleRegionInput',
  inputTypes: [
    PlaceInput,
    GeoShapeInput,
    
  ],
});

const sellerInput = UnionInputType({
  name: 'sellerInput',
  inputTypes: [
    OrganizationInput,
    PersonInput,
    
  ],
});

const itemOfferedInput = UnionInputType({
  name: 'itemOfferedInput',
  inputTypes: [
    ServiceInput,
    ProductInput,
    
  ],
});

const acceptedPaymentMethodInput = UnionInputType({
  name: 'acceptedPaymentMethodInput',
  inputTypes: [
    LoanOrCreditInput,
    PaymentMethodInput,
    
  ],
});

const eligibleRegionInput = UnionInputType({
  name: 'eligibleRegionInput',
  inputTypes: [
    PlaceInput,
    GeoShapeInput,
    
  ],
});

const reviewedByInput = UnionInputType({
  name: 'reviewedByInput',
  inputTypes: [
    OrganizationInput,
    PersonInput,
    
  ],
});

const agentInput = UnionInputType({
  name: 'agentInput',
  inputTypes: [
    OrganizationInput,
    PersonInput,
    
  ],
});

const participantInput = UnionInputType({
  name: 'participantInput',
  inputTypes: [
    OrganizationInput,
    PersonInput,
    
  ],
});

const dataFeedElementInput = UnionInputType({
  name: 'dataFeedElementInput',
  inputTypes: [
    DataFeedItemInput,
    ThingInput,
    
  ],
});

const heightInput = UnionInputType({
  name: 'heightInput',
  inputTypes: [
    DistanceInput,
    QuantitativeValueInput,
    
  ],
});

const widthInput = UnionInputType({
  name: 'widthInput',
  inputTypes: [
    DistanceInput,
    QuantitativeValueInput,
    
  ],
});

const underNameInput = UnionInputType({
  name: 'underNameInput',
  inputTypes: [
    OrganizationInput,
    PersonInput,
    
  ],
});

const bookingAgentInput = UnionInputType({
  name: 'bookingAgentInput',
  inputTypes: [
    OrganizationInput,
    PersonInput,
    
  ],
});

const depthInput = UnionInputType({
  name: 'depthInput',
  inputTypes: [
    DistanceInput,
    QuantitativeValueInput,
    
  ],
});

const coursePrerequisitesInput = UnionInputType({
  name: 'coursePrerequisitesInput',
  inputTypes: [
    CourseInput,
    AlignmentObjectInput,
    
  ],
});

const itemListElementInput = UnionInputType({
  name: 'itemListElementInput',
  inputTypes: [
    ListItemInput,
    ThingInput,
    
  ],
});

const byArtistInput = UnionInputType({
  name: 'byArtistInput',
  inputTypes: [
    MusicGroupInput,
    PersonInput,
    
  ],
});

const trackInput = UnionInputType({
  name: 'trackInput',
  inputTypes: [
    MusicRecordingInput,
    ItemListInput,
    
  ],
});

const workLocationInput = UnionInputType({
  name: 'workLocationInput',
  inputTypes: [
    PlaceInput,
    ContactPointInput,
    
  ],
});

const alumniOfInput = UnionInputType({
  name: 'alumniOfInput',
  inputTypes: [
    OrganizationInput,
    EducationalOrganizationInput,
    
  ],
});

const homeLocationInput = UnionInputType({
  name: 'homeLocationInput',
  inputTypes: [
    PlaceInput,
    ContactPointInput,
    
  ],
});

const netWorthInput = UnionInputType({
  name: 'netWorthInput',
  inputTypes: [
    PriceSpecificationInput,
    MonetaryAmountInput,
    
  ],
});

const recipientInput = UnionInputType({
  name: 'recipientInput',
  inputTypes: [
    OrganizationInput,
    AudienceInput,
    PersonInput,
    ContactPointInput,
    
  ],
});

const bedInput = UnionInputType({
  name: 'bedInput',
  inputTypes: [
    BedTypeInput,
    BedDetailsInput,
    
  ],
});

const offeredByInput = UnionInputType({
  name: 'offeredByInput',
  inputTypes: [
    OrganizationInput,
    PersonInput,
    
  ],
});

const granteeInput = UnionInputType({
  name: 'granteeInput',
  inputTypes: [
    OrganizationInput,
    AudienceInput,
    PersonInput,
    ContactPointInput,
    
  ],
});

const musicByInput = UnionInputType({
  name: 'musicByInput',
  inputTypes: [
    MusicGroupInput,
    PersonInput,
    
  ],
});

const gameLocationInput = UnionInputType({
  name: 'gameLocationInput',
  inputTypes: [
    PlaceInput,
    PostalAddressInput,
    
  ],
});

const endorseeInput = UnionInputType({
  name: 'endorseeInput',
  inputTypes: [
    OrganizationInput,
    PersonInput,
    
  ],
});

const valueReferenceInput = UnionInputType({
  name: 'valueReferenceInput',
  inputTypes: [
    QualitativeValueInput,
    StructuredValueInput,
    QuantitativeValueInput,
    EnumerationInput,
    
  ],
});

const senderInput = UnionInputType({
  name: 'senderInput',
  inputTypes: [
    OrganizationInput,
    AudienceInput,
    PersonInput,
    
  ],
});

const creditedToInput = UnionInputType({
  name: 'creditedToInput',
  inputTypes: [
    OrganizationInput,
    PersonInput,
    
  ],
});

const departureBusStopInput = UnionInputType({
  name: 'departureBusStopInput',
  inputTypes: [
    BusStationInput,
    BusStopInput,
    
  ],
});

const arrivalBusStopInput = UnionInputType({
  name: 'arrivalBusStopInput',
  inputTypes: [
    BusStationInput,
    BusStopInput,
    
  ],
});

const interactionServiceInput = UnionInputType({
  name: 'interactionServiceInput',
  inputTypes: [
    SoftwareApplicationInput,
    WebSiteInput,
    
  ],
});

const foodEstablishmentInput = UnionInputType({
  name: 'foodEstablishmentInput',
  inputTypes: [
    PlaceInput,
    FoodEstablishmentInput,
    
  ],
});

const typeOfGoodInput = UnionInputType({
  name: 'typeOfGoodInput',
  inputTypes: [
    ServiceInput,
    ProductInput,
    
  ],
});

const bccRecipientInput = UnionInputType({
  name: 'bccRecipientInput',
  inputTypes: [
    OrganizationInput,
    PersonInput,
    ContactPointInput,
    
  ],
});

const ccRecipientInput = UnionInputType({
  name: 'ccRecipientInput',
  inputTypes: [
    OrganizationInput,
    PersonInput,
    ContactPointInput,
    
  ],
});

const toRecipientInput = UnionInputType({
  name: 'toRecipientInput',
  inputTypes: [
    OrganizationInput,
    AudienceInput,
    PersonInput,
    ContactPointInput,
    
  ],
});

const landlordInput = UnionInputType({
  name: 'landlordInput',
  inputTypes: [
    OrganizationInput,
    PersonInput,
    
  ],
});

const baseSalaryInput = UnionInputType({
  name: 'baseSalaryInput',
  inputTypes: [
    PriceSpecificationInput,
    MonetaryAmountInput,
    
  ],
});

const customerInput = UnionInputType({
  name: 'customerInput',
  inputTypes: [
    OrganizationInput,
    PersonInput,
    
  ],
});

const merchantInput = UnionInputType({
  name: 'merchantInput',
  inputTypes: [
    OrganizationInput,
    PersonInput,
    
  ],
});

const orderedItemInput = UnionInputType({
  name: 'orderedItemInput',
  inputTypes: [
    OrderItemInput,
    ProductInput,
    
  ],
});

const acceptedAnswerInput = UnionInputType({
  name: 'acceptedAnswerInput',
  inputTypes: [
    ItemListInput,
    AnswerInput,
    
  ],
});

const suggestedAnswerInput = UnionInputType({
  name: 'suggestedAnswerInput',
  inputTypes: [
    ItemListInput,
    AnswerInput,
    
  ],
});

const lenderInput = UnionInputType({
  name: 'lenderInput',
  inputTypes: [
    OrganizationInput,
    PersonInput,
    
  ],
});

const awayTeamInput = UnionInputType({
  name: 'awayTeamInput',
  inputTypes: [
    SportsTeamInput,
    PersonInput,
    
  ],
});

const homeTeamInput = UnionInputType({
  name: 'homeTeamInput',
  inputTypes: [
    SportsTeamInput,
    PersonInput,
    
  ],
});

const competitorInput = UnionInputType({
  name: 'competitorInput',
  inputTypes: [
    SportsTeamInput,
    PersonInput,
    
  ],
});

const vendorInput = UnionInputType({
  name: 'vendorInput',
  inputTypes: [
    OrganizationInput,
    PersonInput,
    
  ],
});

const minimumPaymentDueInput = UnionInputType({
  name: 'minimumPaymentDueInput',
  inputTypes: [
    PriceSpecificationInput,
    MonetaryAmountInput,
    
  ],
});

const totalPaymentDueInput = UnionInputType({
  name: 'totalPaymentDueInput',
  inputTypes: [
    PriceSpecificationInput,
    MonetaryAmountInput,
    
  ],
});

const menuAddOnInput = UnionInputType({
  name: 'menuAddOnInput',
  inputTypes: [
    MenuItemInput,
    MenuSectionInput,
    
  ],
});

const followeeInput = UnionInputType({
  name: 'followeeInput',
  inputTypes: [
    OrganizationInput,
    PersonInput,
    
  ],
});

const acquiredFromInput = UnionInputType({
  name: 'acquiredFromInput',
  inputTypes: [
    OrganizationInput,
    PersonInput,
    
  ],
});

/* AnyInput definition */
const AnyInput = UnionInputType({
  name: 'AnyInput',
  inputTypes: [
    UserLikesInput, 
    CafeOrCoffeeShopInput, 
    FoodServiceInput, 
    RecipeInput, 
    PhotographInput, 
    VolcanoInput, 
    SportsTeamInput, 
    GroceryStoreInput, 
    DemandInput, 
    AboutPageInput, 
    ExerciseActionInput, 
    UserPlaysInput, 
    StadiumOrArenaInput, 
    TripInput, 
    DatasetInput, 
    ActionInput, 
    InsuranceAgencyInput, 
    AudioObjectInput, 
    TaxiReservationInput, 
    VehicleInput, 
    AutoPartsStoreInput, 
    WPAdBlockInput, 
    SomeProductsInput, 
    MoveActionInput, 
    CreativeWorkInput, 
    AddActionInput, 
    JewelryStoreInput, 
    ViewActionInput, 
    WPFooterInput, 
    QAPageInput, 
    LikeActionInput, 
    PublicationEventInput, 
    CourseInput, 
    MobileApplicationInput, 
    ParcelServiceInput, 
    BefriendActionInput, 
    HowToInput, 
    PoliceStationInput, 
    HealthClubInput, 
    DrinkActionInput, 
    DownloadActionInput, 
    TireShopInput, 
    SynagogueInput, 
    AnimalShelterInput, 
    WorkersUnionInput, 
    HowToSectionInput, 
    MusicAlbumInput, 
    AssessActionInput, 
    PersonInput, 
    DeliveryChargeSpecificationInput, 
    LendActionInput, 
    FoodEstablishmentInput, 
    ListenActionInput, 
    TransferActionInput, 
    NutritionInformationInput, 
    SiteNavigationElementInput, 
    OrganizationInput, 
    DeleteActionInput, 
    TradeActionInput, 
    LegalServiceInput, 
    VisualArtworkInput, 
    AttorneyInput, 
    RsvpActionInput, 
    GeneralContractorInput, 
    RatingInput, 
    ApartmentComplexInput, 
    RegisterActionInput, 
    HousePainterInput, 
    WinActionInput, 
    MovieRentalStoreInput, 
    WatchActionInput, 
    PropertyValueSpecificationInput, 
    EducationEventInput, 
    ResumeActionInput, 
    ToyStoreInput, 
    BedAndBreakfastInput, 
    SuiteInput, 
    GenderTypeInput, 
    InstallActionInput, 
    DistilleryInput, 
    GiveActionInput, 
    PostOfficeInput, 
    CheckoutPageInput, 
    AccommodationInput, 
    PerformingArtsTheaterInput, 
    AggregateOfferInput, 
    MuseumInput, 
    HowToSupplyInput, 
    AutoRepairInput, 
    ExerciseGymInput, 
    EmbassyInput, 
    ProfilePageInput, 
    DisagreeActionInput, 
    DigitalDocumentPermissionInput, 
    ImageObjectInput, 
    ReservationPackageInput, 
    SeaBodyOfWaterInput, 
    TrackActionInput, 
    HomeAndConstructionBusinessInput, 
    ProgramMembershipInput, 
    ControlActionInput, 
    CheckActionInput, 
    GameInput, 
    DiscussionForumPostingInput, 
    IceCreamShopInput, 
    TouristAttractionInput, 
    CarInput, 
    PriceSpecificationInput, 
    AdministrativeAreaInput, 
    SeasonInput, 
    DrawActionInput, 
    PaymentCardInput, 
    PublicationVolumeInput, 
    LocalBusinessInput, 
    CancelActionInput, 
    IgnoreActionInput, 
    MusicRecordingInput, 
    MotorcycleDealerInput, 
    CheckOutActionInput, 
    BankAccountInput, 
    DurationInput, 
    RealEstateAgentInput, 
    MapCategoryTypeInput, 
    SportsOrganizationInput, 
    EndorseActionInput, 
    EducationalOrganizationInput, 
    CableOrSatelliteServiceInput, 
    CurrencyConversionServiceInput, 
    HinduTempleInput, 
    TVSeasonInput, 
    SearchResultsPageInput, 
    UserBlocksInput, 
    DanceEventInput, 
    BookStoreInput, 
    EntryPointInput, 
    SaleEventInput, 
    FoodEventInput, 
    OutletStoreInput, 
    OrderActionInput, 
    InviteActionInput, 
    TVEpisodeInput, 
    MusicGroupInput, 
    AmusementParkInput, 
    ContactPointOptionInput, 
    CasinoInput, 
    SubscribeActionInput, 
    BusinessEventInput, 
    AgreeActionInput, 
    GameServerInput, 
    DepositAccountInput, 
    DigitalDocumentPermissionTypeInput, 
    MotelInput, 
    PaintingInput, 
    ChildCareInput, 
    InternetCafeInput, 
    PaymentStatusTypeInput, 
    MusicAlbumReleaseTypeInput, 
    PharmacyInput, 
    DefenceEstablishmentInput, 
    BreadcrumbListInput, 
    ChurchInput, 
    LiquorStoreInput, 
    PublicationIssueInput, 
    GameServerStatusInput, 
    ArticleInput, 
    UserTweetsInput, 
    EnumerationInput, 
    WebPageElementInput, 
    VideoGameInput, 
    UserInteractionInput, 
    MobilePhoneStoreInput, 
    AirlineInput, 
    LiveBlogPostingInput, 
    BikeStoreInput, 
    BuddhistTempleInput, 
    MenuSectionInput, 
    AutoRentalInput, 
    AchieveActionInput, 
    HotelRoomInput, 
    BroadcastEventInput, 
    ZooInput, 
    WebSiteInput, 
    MovieInput, 
    EventReservationInput, 
    OrganizeActionInput, 
    AudienceInput, 
    RestaurantInput, 
    UseActionInput, 
    APIReferenceInput, 
    DepartmentStoreInput, 
    FilmActionInput, 
    SoftwareApplicationInput, 
    CodeInput, 
    SportingGoodsStoreInput, 
    TextDigitalDocumentInput, 
    QuantitativeValueDistributionInput, 
    WaterfallInput, 
    OfficeEquipmentStoreInput, 
    AutoWashInput, 
    PlanActionInput, 
    MovieTheaterInput, 
    BakeryInput, 
    GatedResidenceCommunityInput, 
    CountryInput, 
    PlaceOfWorshipInput, 
    HowToTipInput, 
    ComputerLanguageInput, 
    PerformanceRoleInput, 
    UnitPriceSpecificationInput, 
    PerformActionInput, 
    BedTypeInput, 
    ClothingStoreInput, 
    MountainInput, 
    CivicStructureInput, 
    ReceiveActionInput, 
    VideoGameClipInput, 
    MusicStoreInput, 
    CrematoriumInput, 
    QuoteActionInput, 
    ListItemInput, 
    ContactPageInput, 
    WebApplicationInput, 
    BroadcastFrequencySpecificationInput, 
    BlogPostingInput, 
    LodgingReservationInput, 
    PreOrderActionInput, 
    MediaSubscriptionInput, 
    PresentationDigitalDocumentInput, 
    ReportInput, 
    BookInput, 
    OfferItemConditionInput, 
    LocationFeatureSpecificationInput, 
    MusicReleaseInput, 
    TechArticleInput, 
    SculptureInput, 
    ComputerStoreInput, 
    RadioStationInput, 
    MapInput, 
    GolfCourseInput, 
    DepartActionInput, 
    ActionAccessSpecificationInput, 
    CommentInput, 
    ShoeStoreInput, 
    SuspendActionInput, 
    WPSideBarInput, 
    FlightReservationInput, 
    AlignmentObjectInput, 
    SellActionInput, 
    PetStoreInput, 
    OnDemandEventInput, 
    AutoDealerInput, 
    ChooseActionInput, 
    RestrictedDietInput, 
    GovernmentOfficeInput, 
    PlaceInput, 
    QualitativeValueInput, 
    SendActionInput, 
    LeaveActionInput, 
    GasStationInput, 
    MosqueInput, 
    CommentActionInput, 
    LibraryInput, 
    TouristInformationCenterInput, 
    MusicCompositionInput, 
    ProfessionalServiceInput, 
    AquariumInput, 
    SelfStorageInput, 
    ScholarlyArticleInput, 
    GeoShapeInput, 
    EntertainmentBusinessInput, 
    BroadcastChannelInput, 
    FloristInput, 
    MassInput, 
    HowToToolInput, 
    PaymentMethodInput, 
    UserPlusOnesInput, 
    BarcodeInput, 
    WebPageInput, 
    ResidenceInput, 
    UserPageVisitsInput, 
    ContinentInput, 
    BusTripInput, 
    UnRegisterActionInput, 
    LoseActionInput, 
    ShoppingCenterInput, 
    FlightInput, 
    HowToStepInput, 
    OfferCatalogInput, 
    CreativeWorkSeriesInput, 
    NightClubInput, 
    ConfirmActionInput, 
    DataFeedInput, 
    StateInput, 
    PlaygroundInput, 
    AppendActionInput, 
    InteractionCounterInput, 
    ParkingFacilityInput, 
    CookActionInput, 
    AuthorizeActionInput, 
    BookSeriesInput, 
    UserDownloadsInput, 
    PawnShopInput, 
    AssignActionInput, 
    PayActionInput, 
    HighSchoolInput, 
    TypeAndQuantityNodeInput, 
    SteeringPositionValueInput, 
    SportsClubInput, 
    TrainTripInput, 
    BridgeInput, 
    TrainStationInput, 
    ConversationInput, 
    DatedMoneySpecificationInput, 
    ReserveActionInput, 
    SoftwareSourceCodeInput, 
    PaymentServiceInput, 
    SpeakableSpecificationInput, 
    InteractActionInput, 
    AMRadioChannelInput, 
    AutoBodyShopInput, 
    PermitInput, 
    ConvenienceStoreInput, 
    SchoolInput, 
    TelevisionStationInput, 
    HomeGoodsStoreInput, 
    LakeBodyOfWaterInput, 
    BodyOfWaterInput, 
    RadioSeriesInput, 
    MusicVideoObjectInput, 
    BeachInput, 
    SpreadsheetDigitalDocumentInput, 
    HowToItemInput, 
    ShareActionInput, 
    WPHeaderInput, 
    LandmarksOrHistoricalBuildingsInput, 
    MarryActionInput, 
    NotaryInput, 
    ReactActionInput, 
    MessageInput, 
    InvestmentOrDepositInput, 
    DryCleaningOrLaundryInput, 
    DeactivateActionInput, 
    FastFoodRestaurantInput, 
    DataFeedItemInput, 
    OrderStatusInput, 
    SocialMediaPostingInput, 
    ParkInput, 
    VoteActionInput, 
    BookFormatTypeInput, 
    LoanOrCreditInput, 
    ItemListOrderTypeInput, 
    ComedyClubInput, 
    ServiceChannelInput, 
    ExhibitionEventInput, 
    RentActionInput, 
    EmployeeRoleInput, 
    EmploymentAgencyInput, 
    PrependActionInput, 
    FireStationInput, 
    CourseInstanceInput, 
    HotelInput, 
    IndividualProductInput, 
    StructuredValueInput, 
    RadioClipInput, 
    IntangibleInput, 
    ElectronicsStoreInput, 
    OrderInput, 
    TVClipInput, 
    NailSalonInput, 
    ContactPointInput, 
    TelevisionChannelInput, 
    GovernmentBuildingInput, 
    EmergencyServiceInput, 
    FinancialServiceInput, 
    VideoObjectInput, 
    MenuInput, 
    PeriodicalInput, 
    MovieSeriesInput, 
    SeriesInput, 
    ElectricianInput, 
    WarrantyScopeInput, 
    CollectionPageInput, 
    PhotographActionInput, 
    HealthAndBeautyBusinessInput, 
    LegislativeBuildingInput, 
    UserCheckinsInput, 
    VideoGameSeriesInput, 
    BroadcastServiceInput, 
    WearActionInput, 
    TravelAgencyInput, 
    HostelInput, 
    BankOrCreditUnionInput, 
    QuantityInput, 
    VideoGalleryInput, 
    EducationalAudienceInput, 
    CityHallInput, 
    ComedyEventInput, 
    DonateActionInput, 
    BrandInput, 
    MovingCompanyInput, 
    QuestionInput, 
    BorrowActionInput, 
    GardenStoreInput, 
    ReviewActionInput, 
    UserCommentsInput, 
    PaintActionInput, 
    BlogInput, 
    SportsActivityLocationInput, 
    WarrantyPromiseInput, 
    EmployerAggregateRatingInput, 
    EventInput, 
    HouseInput, 
    AdultEntertainmentInput, 
    DriveWheelConfigurationValueInput, 
    RoleInput, 
    CityInput, 
    ConsumeActionInput, 
    ScreeningEventInput, 
    ArriveActionInput, 
    BookmarkActionInput, 
    CreateActionInput, 
    ScheduleActionInput, 
    DentistInput, 
    DiscoverActionInput, 
    EndorsementRatingInput, 
    ReservoirInput, 
    MusicEventInput, 
    StoreInput, 
    MonetaryAmountInput, 
    HairSalonInput, 
    DaySpaInput, 
    EngineSpecificationInput, 
    ActivateActionInput, 
    EventVenueInput, 
    RadioEpisodeInput, 
    ElementarySchoolInput, 
    ReplaceActionInput, 
    CreditCardInput, 
    OpeningHoursSpecificationInput, 
    DislikeActionInput, 
    PlayActionInput, 
    FAQPageInput, 
    TieActionInput, 
    CorporationInput, 
    ItemListInput, 
    DeliveryMethodInput, 
    WineryInput, 
    InformActionInput, 
    ReturnActionInput, 
    MeetingRoomInput, 
    MonetaryAmountDistributionInput, 
    JoinActionInput, 
    RiverBodyOfWaterInput, 
    BuyActionInput, 
    SearchActionInput, 
    HVACBusinessInput, 
    TaxiStandInput, 
    ProductModelInput, 
    CatholicChurchInput, 
    MovieClipInput, 
    ActionStatusTypeInput, 
    WriteActionInput, 
    MusicAlbumProductionTypeInput, 
    ApplyActionInput, 
    LocksmithInput, 
    LandformInput, 
    EpisodeInput, 
    OceanBodyOfWaterInput, 
    MedicalOrganizationInput, 
    TrainReservationInput, 
    MusicVenueInput, 
    ReviewInput, 
    PostalAddressInput, 
    ClaimReviewInput, 
    CollegeOrUniversityInput, 
    ClipInput, 
    SeatInput, 
    WantActionInput, 
    ReadActionInput, 
    SpecialtyInput, 
    TaxiServiceInput, 
    ItemAvailabilityInput, 
    TicketInput, 
    OccupationInput, 
    ArtGalleryInput, 
    PlumberInput, 
    PreschoolInput, 
    RejectActionInput, 
    TattooParlorInput, 
    GeoCircleInput, 
    BusinessFunctionInput, 
    EnergyInput, 
    FurnitureStoreInput, 
    BusStopInput, 
    MotorcycleRepairInput, 
    GovernmentPermitInput, 
    InsertActionInput, 
    ResortInput, 
    InvoiceInput, 
    TableInput, 
    CompoundPriceSpecificationInput, 
    PeopleAudienceInput, 
    GovernmentOrganizationInput, 
    FoodEstablishmentReservationInput, 
    DataCatalogInput, 
    PaymentChargeSpecificationInput, 
    BusReservationInput, 
    TaxiInput, 
    ItemPageInput, 
    PhysicianInput, 
    RsvpResponseTypeInput, 
    OrderItemInput, 
    BusinessEntityTypeInput, 
    TipActionInput, 
    HowToDirectionInput, 
    ApartmentInput, 
    NoteDigitalDocumentInput, 
    ServiceInput, 
    CampgroundInput, 
    TennisComplexInput, 
    ThingInput, 
    SubwayStationInput, 
    CourthouseInput, 
    ReservationStatusTypeInput, 
    HardwareStoreInput, 
    AskActionInput, 
    VisualArtsEventInput, 
    DigitalDocumentInput, 
    DanceGroupInput, 
    BeautySalonInput, 
    CommunicateActionInput, 
    MenuItemInput, 
    RoofingContractorInput, 
    GovernmentServiceInput, 
    DeliveryEventInput, 
    HobbyShopInput, 
    FollowActionInput, 
    ChildrensEventInput, 
    RVParkInput, 
    SingleFamilyResidenceInput, 
    WholesaleStoreInput, 
    RentalCarReservationInput, 
    TravelActionInput, 
    OrganizationRoleInput, 
    SkiResortInput, 
    AutomatedTellerInput, 
    CanalInput, 
    NGOInput, 
    TVSeriesInput, 
    BarOrPubInput, 
    FMRadioChannelInput, 
    DistanceInput, 
    MusicPlaylistInput, 
    QuantitativeValueInput, 
    BedDetailsInput, 
    OwnershipInfoInput, 
    MensClothingStoreInput, 
    AcceptActionInput, 
    LanguageInput, 
    NewsArticleInput, 
    TheaterGroupInput, 
    ParcelDeliveryInput, 
    BoardingPolicyTypeInput, 
    PondInput, 
    AnswerInput, 
    BreweryInput, 
    AllocateActionInput, 
    ParentAudienceInput, 
    RadioChannelInput, 
    RoomInput, 
    PublicSwimmingPoolInput, 
    JobPostingInput, 
    MusicReleaseFormatTypeInput, 
    FinancialProductInput, 
    PerformingGroupInput, 
    MediaObjectInput, 
    CemeteryInput, 
    AccountingServiceInput, 
    CheckInActionInput, 
    DayOfWeekInput, 
    BusinessAudienceInput, 
    LodgingBusinessInput, 
    AirportInput, 
    EventStatusTypeInput, 
    CreativeWorkSeasonInput, 
    ReservationInput, 
    FindActionInput, 
    RecyclingCenterInput, 
    HospitalInput, 
    FestivalInput, 
    LockerDeliveryInput, 
    RadioSeasonInput, 
    UpdateActionInput, 
    AggregateRatingInput, 
    ReplyActionInput, 
    EmailMessageInput, 
    BusStationInput, 
    BowlingAlleyInput, 
    ImageGalleryInput, 
    OfferInput, 
    DataDownloadInput, 
    ProductInput, 
    CampingPitchInput, 
    GeoCoordinatesInput, 
    MiddleSchoolInput, 
    AutomotiveBusinessInput, 
    LiteraryEventInput, 
    SocialEventInput, 
    EatActionInput, 
    TheaterEventInput, 
    TakeActionInput, 
    SportsEventInput, 
    GamePlayModeInput, 
    
  ],
  resolveType(name) {
    // The important part: return the type from the schema from its name (e.g. "FirstInputType")
    // console.log(schema.getTypeMap());
    return schema.getTypeMap()[name + 'Input'];
  },
  typeKey: '__typename'
});

/* resolvers */
resolvers = { AnyInput };

/* typeDefs */
const typeDefs = `
scalar AnyInput
scalar UserLikesInput
scalar CafeOrCoffeeShopInput
scalar FoodServiceInput
scalar RecipeInput
scalar PhotographInput
scalar VolcanoInput
scalar SportsTeamInput
scalar GroceryStoreInput
scalar DemandInput
scalar AboutPageInput
scalar ExerciseActionInput
scalar UserPlaysInput
scalar StadiumOrArenaInput
scalar TripInput
scalar DatasetInput
scalar ActionInput
scalar InsuranceAgencyInput
scalar AudioObjectInput
scalar TaxiReservationInput
scalar VehicleInput
scalar AutoPartsStoreInput
scalar WPAdBlockInput
scalar SomeProductsInput
scalar MoveActionInput
scalar CreativeWorkInput
scalar AddActionInput
scalar JewelryStoreInput
scalar ViewActionInput
scalar WPFooterInput
scalar QAPageInput
scalar LikeActionInput
scalar PublicationEventInput
scalar CourseInput
scalar MobileApplicationInput
scalar ParcelServiceInput
scalar BefriendActionInput
scalar HowToInput
scalar PoliceStationInput
scalar HealthClubInput
scalar DrinkActionInput
scalar DownloadActionInput
scalar TireShopInput
scalar SynagogueInput
scalar AnimalShelterInput
scalar WorkersUnionInput
scalar HowToSectionInput
scalar MusicAlbumInput
scalar AssessActionInput
scalar PersonInput
scalar DeliveryChargeSpecificationInput
scalar LendActionInput
scalar FoodEstablishmentInput
scalar ListenActionInput
scalar TransferActionInput
scalar NutritionInformationInput
scalar SiteNavigationElementInput
scalar OrganizationInput
scalar DeleteActionInput
scalar TradeActionInput
scalar LegalServiceInput
scalar VisualArtworkInput
scalar AttorneyInput
scalar RsvpActionInput
scalar GeneralContractorInput
scalar RatingInput
scalar ApartmentComplexInput
scalar RegisterActionInput
scalar HousePainterInput
scalar WinActionInput
scalar MovieRentalStoreInput
scalar WatchActionInput
scalar PropertyValueSpecificationInput
scalar EducationEventInput
scalar ResumeActionInput
scalar ToyStoreInput
scalar BedAndBreakfastInput
scalar SuiteInput
scalar GenderTypeInput
scalar InstallActionInput
scalar DistilleryInput
scalar GiveActionInput
scalar PostOfficeInput
scalar CheckoutPageInput
scalar AccommodationInput
scalar PerformingArtsTheaterInput
scalar AggregateOfferInput
scalar MuseumInput
scalar HowToSupplyInput
scalar AutoRepairInput
scalar ExerciseGymInput
scalar EmbassyInput
scalar ProfilePageInput
scalar DisagreeActionInput
scalar DigitalDocumentPermissionInput
scalar ImageObjectInput
scalar ReservationPackageInput
scalar SeaBodyOfWaterInput
scalar TrackActionInput
scalar HomeAndConstructionBusinessInput
scalar ProgramMembershipInput
scalar ControlActionInput
scalar CheckActionInput
scalar GameInput
scalar DiscussionForumPostingInput
scalar IceCreamShopInput
scalar TouristAttractionInput
scalar CarInput
scalar PriceSpecificationInput
scalar AdministrativeAreaInput
scalar SeasonInput
scalar DrawActionInput
scalar PaymentCardInput
scalar PublicationVolumeInput
scalar LocalBusinessInput
scalar CancelActionInput
scalar IgnoreActionInput
scalar MusicRecordingInput
scalar MotorcycleDealerInput
scalar CheckOutActionInput
scalar BankAccountInput
scalar DurationInput
scalar RealEstateAgentInput
scalar MapCategoryTypeInput
scalar SportsOrganizationInput
scalar EndorseActionInput
scalar EducationalOrganizationInput
scalar CableOrSatelliteServiceInput
scalar CurrencyConversionServiceInput
scalar HinduTempleInput
scalar TVSeasonInput
scalar SearchResultsPageInput
scalar UserBlocksInput
scalar DanceEventInput
scalar BookStoreInput
scalar EntryPointInput
scalar SaleEventInput
scalar FoodEventInput
scalar OutletStoreInput
scalar OrderActionInput
scalar InviteActionInput
scalar TVEpisodeInput
scalar MusicGroupInput
scalar AmusementParkInput
scalar ContactPointOptionInput
scalar CasinoInput
scalar SubscribeActionInput
scalar BusinessEventInput
scalar AgreeActionInput
scalar GameServerInput
scalar DepositAccountInput
scalar DigitalDocumentPermissionTypeInput
scalar MotelInput
scalar PaintingInput
scalar ChildCareInput
scalar InternetCafeInput
scalar PaymentStatusTypeInput
scalar MusicAlbumReleaseTypeInput
scalar PharmacyInput
scalar DefenceEstablishmentInput
scalar BreadcrumbListInput
scalar ChurchInput
scalar LiquorStoreInput
scalar PublicationIssueInput
scalar GameServerStatusInput
scalar ArticleInput
scalar UserTweetsInput
scalar EnumerationInput
scalar WebPageElementInput
scalar VideoGameInput
scalar UserInteractionInput
scalar MobilePhoneStoreInput
scalar AirlineInput
scalar LiveBlogPostingInput
scalar BikeStoreInput
scalar BuddhistTempleInput
scalar MenuSectionInput
scalar AutoRentalInput
scalar AchieveActionInput
scalar HotelRoomInput
scalar BroadcastEventInput
scalar ZooInput
scalar WebSiteInput
scalar MovieInput
scalar EventReservationInput
scalar OrganizeActionInput
scalar AudienceInput
scalar RestaurantInput
scalar UseActionInput
scalar APIReferenceInput
scalar DepartmentStoreInput
scalar FilmActionInput
scalar SoftwareApplicationInput
scalar CodeInput
scalar SportingGoodsStoreInput
scalar TextDigitalDocumentInput
scalar QuantitativeValueDistributionInput
scalar WaterfallInput
scalar OfficeEquipmentStoreInput
scalar AutoWashInput
scalar PlanActionInput
scalar MovieTheaterInput
scalar BakeryInput
scalar GatedResidenceCommunityInput
scalar CountryInput
scalar PlaceOfWorshipInput
scalar HowToTipInput
scalar ComputerLanguageInput
scalar PerformanceRoleInput
scalar UnitPriceSpecificationInput
scalar PerformActionInput
scalar BedTypeInput
scalar ClothingStoreInput
scalar MountainInput
scalar CivicStructureInput
scalar ReceiveActionInput
scalar VideoGameClipInput
scalar MusicStoreInput
scalar CrematoriumInput
scalar QuoteActionInput
scalar ListItemInput
scalar ContactPageInput
scalar WebApplicationInput
scalar BroadcastFrequencySpecificationInput
scalar BlogPostingInput
scalar LodgingReservationInput
scalar PreOrderActionInput
scalar MediaSubscriptionInput
scalar PresentationDigitalDocumentInput
scalar ReportInput
scalar BookInput
scalar OfferItemConditionInput
scalar LocationFeatureSpecificationInput
scalar MusicReleaseInput
scalar TechArticleInput
scalar SculptureInput
scalar ComputerStoreInput
scalar RadioStationInput
scalar MapInput
scalar GolfCourseInput
scalar DepartActionInput
scalar ActionAccessSpecificationInput
scalar CommentInput
scalar ShoeStoreInput
scalar SuspendActionInput
scalar WPSideBarInput
scalar FlightReservationInput
scalar AlignmentObjectInput
scalar SellActionInput
scalar PetStoreInput
scalar OnDemandEventInput
scalar AutoDealerInput
scalar ChooseActionInput
scalar RestrictedDietInput
scalar GovernmentOfficeInput
scalar PlaceInput
scalar QualitativeValueInput
scalar SendActionInput
scalar LeaveActionInput
scalar GasStationInput
scalar MosqueInput
scalar CommentActionInput
scalar LibraryInput
scalar TouristInformationCenterInput
scalar MusicCompositionInput
scalar ProfessionalServiceInput
scalar AquariumInput
scalar SelfStorageInput
scalar ScholarlyArticleInput
scalar GeoShapeInput
scalar EntertainmentBusinessInput
scalar BroadcastChannelInput
scalar FloristInput
scalar MassInput
scalar HowToToolInput
scalar PaymentMethodInput
scalar UserPlusOnesInput
scalar BarcodeInput
scalar WebPageInput
scalar ResidenceInput
scalar UserPageVisitsInput
scalar ContinentInput
scalar BusTripInput
scalar UnRegisterActionInput
scalar LoseActionInput
scalar ShoppingCenterInput
scalar FlightInput
scalar HowToStepInput
scalar OfferCatalogInput
scalar CreativeWorkSeriesInput
scalar NightClubInput
scalar ConfirmActionInput
scalar DataFeedInput
scalar StateInput
scalar PlaygroundInput
scalar AppendActionInput
scalar InteractionCounterInput
scalar ParkingFacilityInput
scalar CookActionInput
scalar AuthorizeActionInput
scalar BookSeriesInput
scalar UserDownloadsInput
scalar PawnShopInput
scalar AssignActionInput
scalar PayActionInput
scalar HighSchoolInput
scalar TypeAndQuantityNodeInput
scalar SteeringPositionValueInput
scalar SportsClubInput
scalar TrainTripInput
scalar BridgeInput
scalar TrainStationInput
scalar ConversationInput
scalar DatedMoneySpecificationInput
scalar ReserveActionInput
scalar SoftwareSourceCodeInput
scalar PaymentServiceInput
scalar SpeakableSpecificationInput
scalar InteractActionInput
scalar AMRadioChannelInput
scalar AutoBodyShopInput
scalar PermitInput
scalar ConvenienceStoreInput
scalar SchoolInput
scalar TelevisionStationInput
scalar HomeGoodsStoreInput
scalar LakeBodyOfWaterInput
scalar BodyOfWaterInput
scalar RadioSeriesInput
scalar MusicVideoObjectInput
scalar BeachInput
scalar SpreadsheetDigitalDocumentInput
scalar HowToItemInput
scalar ShareActionInput
scalar WPHeaderInput
scalar LandmarksOrHistoricalBuildingsInput
scalar MarryActionInput
scalar NotaryInput
scalar ReactActionInput
scalar MessageInput
scalar InvestmentOrDepositInput
scalar DryCleaningOrLaundryInput
scalar DeactivateActionInput
scalar FastFoodRestaurantInput
scalar DataFeedItemInput
scalar OrderStatusInput
scalar SocialMediaPostingInput
scalar ParkInput
scalar VoteActionInput
scalar BookFormatTypeInput
scalar LoanOrCreditInput
scalar ItemListOrderTypeInput
scalar ComedyClubInput
scalar ServiceChannelInput
scalar ExhibitionEventInput
scalar RentActionInput
scalar EmployeeRoleInput
scalar EmploymentAgencyInput
scalar PrependActionInput
scalar FireStationInput
scalar CourseInstanceInput
scalar HotelInput
scalar IndividualProductInput
scalar StructuredValueInput
scalar RadioClipInput
scalar IntangibleInput
scalar ElectronicsStoreInput
scalar OrderInput
scalar TVClipInput
scalar NailSalonInput
scalar ContactPointInput
scalar TelevisionChannelInput
scalar GovernmentBuildingInput
scalar EmergencyServiceInput
scalar FinancialServiceInput
scalar VideoObjectInput
scalar MenuInput
scalar PeriodicalInput
scalar MovieSeriesInput
scalar SeriesInput
scalar ElectricianInput
scalar WarrantyScopeInput
scalar CollectionPageInput
scalar PhotographActionInput
scalar HealthAndBeautyBusinessInput
scalar LegislativeBuildingInput
scalar UserCheckinsInput
scalar VideoGameSeriesInput
scalar BroadcastServiceInput
scalar WearActionInput
scalar TravelAgencyInput
scalar HostelInput
scalar BankOrCreditUnionInput
scalar QuantityInput
scalar VideoGalleryInput
scalar EducationalAudienceInput
scalar CityHallInput
scalar ComedyEventInput
scalar DonateActionInput
scalar BrandInput
scalar MovingCompanyInput
scalar QuestionInput
scalar BorrowActionInput
scalar GardenStoreInput
scalar ReviewActionInput
scalar UserCommentsInput
scalar PaintActionInput
scalar BlogInput
scalar SportsActivityLocationInput
scalar WarrantyPromiseInput
scalar EmployerAggregateRatingInput
scalar EventInput
scalar HouseInput
scalar AdultEntertainmentInput
scalar DriveWheelConfigurationValueInput
scalar RoleInput
scalar CityInput
scalar ConsumeActionInput
scalar ScreeningEventInput
scalar ArriveActionInput
scalar BookmarkActionInput
scalar CreateActionInput
scalar ScheduleActionInput
scalar DentistInput
scalar DiscoverActionInput
scalar EndorsementRatingInput
scalar ReservoirInput
scalar MusicEventInput
scalar StoreInput
scalar MonetaryAmountInput
scalar HairSalonInput
scalar DaySpaInput
scalar EngineSpecificationInput
scalar ActivateActionInput
scalar EventVenueInput
scalar RadioEpisodeInput
scalar ElementarySchoolInput
scalar ReplaceActionInput
scalar CreditCardInput
scalar OpeningHoursSpecificationInput
scalar DislikeActionInput
scalar PlayActionInput
scalar FAQPageInput
scalar TieActionInput
scalar CorporationInput
scalar ItemListInput
scalar DeliveryMethodInput
scalar WineryInput
scalar InformActionInput
scalar ReturnActionInput
scalar MeetingRoomInput
scalar MonetaryAmountDistributionInput
scalar JoinActionInput
scalar RiverBodyOfWaterInput
scalar BuyActionInput
scalar SearchActionInput
scalar HVACBusinessInput
scalar TaxiStandInput
scalar ProductModelInput
scalar CatholicChurchInput
scalar MovieClipInput
scalar ActionStatusTypeInput
scalar WriteActionInput
scalar MusicAlbumProductionTypeInput
scalar ApplyActionInput
scalar LocksmithInput
scalar LandformInput
scalar EpisodeInput
scalar OceanBodyOfWaterInput
scalar MedicalOrganizationInput
scalar TrainReservationInput
scalar MusicVenueInput
scalar ReviewInput
scalar PostalAddressInput
scalar ClaimReviewInput
scalar CollegeOrUniversityInput
scalar ClipInput
scalar SeatInput
scalar WantActionInput
scalar ReadActionInput
scalar SpecialtyInput
scalar TaxiServiceInput
scalar ItemAvailabilityInput
scalar TicketInput
scalar OccupationInput
scalar ArtGalleryInput
scalar PlumberInput
scalar PreschoolInput
scalar RejectActionInput
scalar TattooParlorInput
scalar GeoCircleInput
scalar BusinessFunctionInput
scalar EnergyInput
scalar FurnitureStoreInput
scalar BusStopInput
scalar MotorcycleRepairInput
scalar GovernmentPermitInput
scalar InsertActionInput
scalar ResortInput
scalar InvoiceInput
scalar TableInput
scalar CompoundPriceSpecificationInput
scalar PeopleAudienceInput
scalar GovernmentOrganizationInput
scalar FoodEstablishmentReservationInput
scalar DataCatalogInput
scalar PaymentChargeSpecificationInput
scalar BusReservationInput
scalar TaxiInput
scalar ItemPageInput
scalar PhysicianInput
scalar RsvpResponseTypeInput
scalar OrderItemInput
scalar BusinessEntityTypeInput
scalar TipActionInput
scalar HowToDirectionInput
scalar ApartmentInput
scalar NoteDigitalDocumentInput
scalar ServiceInput
scalar CampgroundInput
scalar TennisComplexInput
scalar ThingInput
scalar SubwayStationInput
scalar CourthouseInput
scalar ReservationStatusTypeInput
scalar HardwareStoreInput
scalar AskActionInput
scalar VisualArtsEventInput
scalar DigitalDocumentInput
scalar DanceGroupInput
scalar BeautySalonInput
scalar CommunicateActionInput
scalar MenuItemInput
scalar RoofingContractorInput
scalar GovernmentServiceInput
scalar DeliveryEventInput
scalar HobbyShopInput
scalar FollowActionInput
scalar ChildrensEventInput
scalar RVParkInput
scalar SingleFamilyResidenceInput
scalar WholesaleStoreInput
scalar RentalCarReservationInput
scalar TravelActionInput
scalar OrganizationRoleInput
scalar SkiResortInput
scalar AutomatedTellerInput
scalar CanalInput
scalar NGOInput
scalar TVSeriesInput
scalar BarOrPubInput
scalar FMRadioChannelInput
scalar DistanceInput
scalar MusicPlaylistInput
scalar QuantitativeValueInput
scalar BedDetailsInput
scalar OwnershipInfoInput
scalar MensClothingStoreInput
scalar AcceptActionInput
scalar LanguageInput
scalar NewsArticleInput
scalar TheaterGroupInput
scalar ParcelDeliveryInput
scalar BoardingPolicyTypeInput
scalar PondInput
scalar AnswerInput
scalar BreweryInput
scalar AllocateActionInput
scalar ParentAudienceInput
scalar RadioChannelInput
scalar RoomInput
scalar PublicSwimmingPoolInput
scalar JobPostingInput
scalar MusicReleaseFormatTypeInput
scalar FinancialProductInput
scalar PerformingGroupInput
scalar MediaObjectInput
scalar CemeteryInput
scalar AccountingServiceInput
scalar CheckInActionInput
scalar DayOfWeekInput
scalar BusinessAudienceInput
scalar LodgingBusinessInput
scalar AirportInput
scalar EventStatusTypeInput
scalar CreativeWorkSeasonInput
scalar ReservationInput
scalar FindActionInput
scalar RecyclingCenterInput
scalar HospitalInput
scalar FestivalInput
scalar LockerDeliveryInput
scalar RadioSeasonInput
scalar UpdateActionInput
scalar AggregateRatingInput
scalar ReplyActionInput
scalar EmailMessageInput
scalar BusStationInput
scalar BowlingAlleyInput
scalar ImageGalleryInput
scalar OfferInput
scalar DataDownloadInput
scalar ProductInput
scalar CampingPitchInput
scalar GeoCoordinatesInput
scalar MiddleSchoolInput
scalar AutomotiveBusinessInput
scalar LiteraryEventInput
scalar SocialEventInput
scalar EatActionInput
scalar TheaterEventInput
scalar TakeActionInput
scalar SportsEventInput
scalar GamePlayModeInput

`;

schema = makeExecutableSchema({ typeDefs, resolvers });

module.exports = { 
  AnyInput,
  UserLikesInput,
  CafeOrCoffeeShopInput,
  FoodServiceInput,
  RecipeInput,
  PhotographInput,
  VolcanoInput,
  SportsTeamInput,
  GroceryStoreInput,
  DemandInput,
  AboutPageInput,
  ExerciseActionInput,
  UserPlaysInput,
  StadiumOrArenaInput,
  TripInput,
  DatasetInput,
  ActionInput,
  InsuranceAgencyInput,
  AudioObjectInput,
  TaxiReservationInput,
  VehicleInput,
  AutoPartsStoreInput,
  WPAdBlockInput,
  SomeProductsInput,
  MoveActionInput,
  CreativeWorkInput,
  AddActionInput,
  JewelryStoreInput,
  ViewActionInput,
  WPFooterInput,
  QAPageInput,
  LikeActionInput,
  PublicationEventInput,
  CourseInput,
  MobileApplicationInput,
  ParcelServiceInput,
  BefriendActionInput,
  HowToInput,
  PoliceStationInput,
  HealthClubInput,
  DrinkActionInput,
  DownloadActionInput,
  TireShopInput,
  SynagogueInput,
  AnimalShelterInput,
  WorkersUnionInput,
  HowToSectionInput,
  MusicAlbumInput,
  AssessActionInput,
  PersonInput,
  DeliveryChargeSpecificationInput,
  LendActionInput,
  FoodEstablishmentInput,
  ListenActionInput,
  TransferActionInput,
  NutritionInformationInput,
  SiteNavigationElementInput,
  OrganizationInput,
  DeleteActionInput,
  TradeActionInput,
  LegalServiceInput,
  VisualArtworkInput,
  AttorneyInput,
  RsvpActionInput,
  GeneralContractorInput,
  RatingInput,
  ApartmentComplexInput,
  RegisterActionInput,
  HousePainterInput,
  WinActionInput,
  MovieRentalStoreInput,
  WatchActionInput,
  PropertyValueSpecificationInput,
  EducationEventInput,
  ResumeActionInput,
  ToyStoreInput,
  BedAndBreakfastInput,
  SuiteInput,
  GenderTypeInput,
  InstallActionInput,
  DistilleryInput,
  GiveActionInput,
  PostOfficeInput,
  CheckoutPageInput,
  AccommodationInput,
  PerformingArtsTheaterInput,
  AggregateOfferInput,
  MuseumInput,
  HowToSupplyInput,
  AutoRepairInput,
  ExerciseGymInput,
  EmbassyInput,
  ProfilePageInput,
  DisagreeActionInput,
  DigitalDocumentPermissionInput,
  ImageObjectInput,
  ReservationPackageInput,
  SeaBodyOfWaterInput,
  TrackActionInput,
  HomeAndConstructionBusinessInput,
  ProgramMembershipInput,
  ControlActionInput,
  CheckActionInput,
  GameInput,
  DiscussionForumPostingInput,
  IceCreamShopInput,
  TouristAttractionInput,
  CarInput,
  PriceSpecificationInput,
  AdministrativeAreaInput,
  SeasonInput,
  DrawActionInput,
  PaymentCardInput,
  PublicationVolumeInput,
  LocalBusinessInput,
  CancelActionInput,
  IgnoreActionInput,
  MusicRecordingInput,
  MotorcycleDealerInput,
  CheckOutActionInput,
  BankAccountInput,
  DurationInput,
  RealEstateAgentInput,
  MapCategoryTypeInput,
  SportsOrganizationInput,
  EndorseActionInput,
  EducationalOrganizationInput,
  CableOrSatelliteServiceInput,
  CurrencyConversionServiceInput,
  HinduTempleInput,
  TVSeasonInput,
  SearchResultsPageInput,
  UserBlocksInput,
  DanceEventInput,
  BookStoreInput,
  EntryPointInput,
  SaleEventInput,
  FoodEventInput,
  OutletStoreInput,
  OrderActionInput,
  InviteActionInput,
  TVEpisodeInput,
  MusicGroupInput,
  AmusementParkInput,
  ContactPointOptionInput,
  CasinoInput,
  SubscribeActionInput,
  BusinessEventInput,
  AgreeActionInput,
  GameServerInput,
  DepositAccountInput,
  DigitalDocumentPermissionTypeInput,
  MotelInput,
  PaintingInput,
  ChildCareInput,
  InternetCafeInput,
  PaymentStatusTypeInput,
  MusicAlbumReleaseTypeInput,
  PharmacyInput,
  DefenceEstablishmentInput,
  BreadcrumbListInput,
  ChurchInput,
  LiquorStoreInput,
  PublicationIssueInput,
  GameServerStatusInput,
  ArticleInput,
  UserTweetsInput,
  EnumerationInput,
  WebPageElementInput,
  VideoGameInput,
  UserInteractionInput,
  MobilePhoneStoreInput,
  AirlineInput,
  LiveBlogPostingInput,
  BikeStoreInput,
  BuddhistTempleInput,
  MenuSectionInput,
  AutoRentalInput,
  AchieveActionInput,
  HotelRoomInput,
  BroadcastEventInput,
  ZooInput,
  WebSiteInput,
  MovieInput,
  EventReservationInput,
  OrganizeActionInput,
  AudienceInput,
  RestaurantInput,
  UseActionInput,
  APIReferenceInput,
  DepartmentStoreInput,
  FilmActionInput,
  SoftwareApplicationInput,
  CodeInput,
  SportingGoodsStoreInput,
  TextDigitalDocumentInput,
  QuantitativeValueDistributionInput,
  WaterfallInput,
  OfficeEquipmentStoreInput,
  AutoWashInput,
  PlanActionInput,
  MovieTheaterInput,
  BakeryInput,
  GatedResidenceCommunityInput,
  CountryInput,
  PlaceOfWorshipInput,
  HowToTipInput,
  ComputerLanguageInput,
  PerformanceRoleInput,
  UnitPriceSpecificationInput,
  PerformActionInput,
  BedTypeInput,
  ClothingStoreInput,
  MountainInput,
  CivicStructureInput,
  ReceiveActionInput,
  VideoGameClipInput,
  MusicStoreInput,
  CrematoriumInput,
  QuoteActionInput,
  ListItemInput,
  ContactPageInput,
  WebApplicationInput,
  BroadcastFrequencySpecificationInput,
  BlogPostingInput,
  LodgingReservationInput,
  PreOrderActionInput,
  MediaSubscriptionInput,
  PresentationDigitalDocumentInput,
  ReportInput,
  BookInput,
  OfferItemConditionInput,
  LocationFeatureSpecificationInput,
  MusicReleaseInput,
  TechArticleInput,
  SculptureInput,
  ComputerStoreInput,
  RadioStationInput,
  MapInput,
  GolfCourseInput,
  DepartActionInput,
  ActionAccessSpecificationInput,
  CommentInput,
  ShoeStoreInput,
  SuspendActionInput,
  WPSideBarInput,
  FlightReservationInput,
  AlignmentObjectInput,
  SellActionInput,
  PetStoreInput,
  OnDemandEventInput,
  AutoDealerInput,
  ChooseActionInput,
  RestrictedDietInput,
  GovernmentOfficeInput,
  PlaceInput,
  QualitativeValueInput,
  SendActionInput,
  LeaveActionInput,
  GasStationInput,
  MosqueInput,
  CommentActionInput,
  LibraryInput,
  TouristInformationCenterInput,
  MusicCompositionInput,
  ProfessionalServiceInput,
  AquariumInput,
  SelfStorageInput,
  ScholarlyArticleInput,
  GeoShapeInput,
  EntertainmentBusinessInput,
  BroadcastChannelInput,
  FloristInput,
  MassInput,
  HowToToolInput,
  PaymentMethodInput,
  UserPlusOnesInput,
  BarcodeInput,
  WebPageInput,
  ResidenceInput,
  UserPageVisitsInput,
  ContinentInput,
  BusTripInput,
  UnRegisterActionInput,
  LoseActionInput,
  ShoppingCenterInput,
  FlightInput,
  HowToStepInput,
  OfferCatalogInput,
  CreativeWorkSeriesInput,
  NightClubInput,
  ConfirmActionInput,
  DataFeedInput,
  StateInput,
  PlaygroundInput,
  AppendActionInput,
  InteractionCounterInput,
  ParkingFacilityInput,
  CookActionInput,
  AuthorizeActionInput,
  BookSeriesInput,
  UserDownloadsInput,
  PawnShopInput,
  AssignActionInput,
  PayActionInput,
  HighSchoolInput,
  TypeAndQuantityNodeInput,
  SteeringPositionValueInput,
  SportsClubInput,
  TrainTripInput,
  BridgeInput,
  TrainStationInput,
  ConversationInput,
  DatedMoneySpecificationInput,
  ReserveActionInput,
  SoftwareSourceCodeInput,
  PaymentServiceInput,
  SpeakableSpecificationInput,
  InteractActionInput,
  AMRadioChannelInput,
  AutoBodyShopInput,
  PermitInput,
  ConvenienceStoreInput,
  SchoolInput,
  TelevisionStationInput,
  HomeGoodsStoreInput,
  LakeBodyOfWaterInput,
  BodyOfWaterInput,
  RadioSeriesInput,
  MusicVideoObjectInput,
  BeachInput,
  SpreadsheetDigitalDocumentInput,
  HowToItemInput,
  ShareActionInput,
  WPHeaderInput,
  LandmarksOrHistoricalBuildingsInput,
  MarryActionInput,
  NotaryInput,
  ReactActionInput,
  MessageInput,
  InvestmentOrDepositInput,
  DryCleaningOrLaundryInput,
  DeactivateActionInput,
  FastFoodRestaurantInput,
  DataFeedItemInput,
  OrderStatusInput,
  SocialMediaPostingInput,
  ParkInput,
  VoteActionInput,
  BookFormatTypeInput,
  LoanOrCreditInput,
  ItemListOrderTypeInput,
  ComedyClubInput,
  ServiceChannelInput,
  ExhibitionEventInput,
  RentActionInput,
  EmployeeRoleInput,
  EmploymentAgencyInput,
  PrependActionInput,
  FireStationInput,
  CourseInstanceInput,
  HotelInput,
  IndividualProductInput,
  StructuredValueInput,
  RadioClipInput,
  IntangibleInput,
  ElectronicsStoreInput,
  OrderInput,
  TVClipInput,
  NailSalonInput,
  ContactPointInput,
  TelevisionChannelInput,
  GovernmentBuildingInput,
  EmergencyServiceInput,
  FinancialServiceInput,
  VideoObjectInput,
  MenuInput,
  PeriodicalInput,
  MovieSeriesInput,
  SeriesInput,
  ElectricianInput,
  WarrantyScopeInput,
  CollectionPageInput,
  PhotographActionInput,
  HealthAndBeautyBusinessInput,
  LegislativeBuildingInput,
  UserCheckinsInput,
  VideoGameSeriesInput,
  BroadcastServiceInput,
  WearActionInput,
  TravelAgencyInput,
  HostelInput,
  BankOrCreditUnionInput,
  QuantityInput,
  VideoGalleryInput,
  EducationalAudienceInput,
  CityHallInput,
  ComedyEventInput,
  DonateActionInput,
  BrandInput,
  MovingCompanyInput,
  QuestionInput,
  BorrowActionInput,
  GardenStoreInput,
  ReviewActionInput,
  UserCommentsInput,
  PaintActionInput,
  BlogInput,
  SportsActivityLocationInput,
  WarrantyPromiseInput,
  EmployerAggregateRatingInput,
  EventInput,
  HouseInput,
  AdultEntertainmentInput,
  DriveWheelConfigurationValueInput,
  RoleInput,
  CityInput,
  ConsumeActionInput,
  ScreeningEventInput,
  ArriveActionInput,
  BookmarkActionInput,
  CreateActionInput,
  ScheduleActionInput,
  DentistInput,
  DiscoverActionInput,
  EndorsementRatingInput,
  ReservoirInput,
  MusicEventInput,
  StoreInput,
  MonetaryAmountInput,
  HairSalonInput,
  DaySpaInput,
  EngineSpecificationInput,
  ActivateActionInput,
  EventVenueInput,
  RadioEpisodeInput,
  ElementarySchoolInput,
  ReplaceActionInput,
  CreditCardInput,
  OpeningHoursSpecificationInput,
  DislikeActionInput,
  PlayActionInput,
  FAQPageInput,
  TieActionInput,
  CorporationInput,
  ItemListInput,
  DeliveryMethodInput,
  WineryInput,
  InformActionInput,
  ReturnActionInput,
  MeetingRoomInput,
  MonetaryAmountDistributionInput,
  JoinActionInput,
  RiverBodyOfWaterInput,
  BuyActionInput,
  SearchActionInput,
  HVACBusinessInput,
  TaxiStandInput,
  ProductModelInput,
  CatholicChurchInput,
  MovieClipInput,
  ActionStatusTypeInput,
  WriteActionInput,
  MusicAlbumProductionTypeInput,
  ApplyActionInput,
  LocksmithInput,
  LandformInput,
  EpisodeInput,
  OceanBodyOfWaterInput,
  MedicalOrganizationInput,
  TrainReservationInput,
  MusicVenueInput,
  ReviewInput,
  PostalAddressInput,
  ClaimReviewInput,
  CollegeOrUniversityInput,
  ClipInput,
  SeatInput,
  WantActionInput,
  ReadActionInput,
  SpecialtyInput,
  TaxiServiceInput,
  ItemAvailabilityInput,
  TicketInput,
  OccupationInput,
  ArtGalleryInput,
  PlumberInput,
  PreschoolInput,
  RejectActionInput,
  TattooParlorInput,
  GeoCircleInput,
  BusinessFunctionInput,
  EnergyInput,
  FurnitureStoreInput,
  BusStopInput,
  MotorcycleRepairInput,
  GovernmentPermitInput,
  InsertActionInput,
  ResortInput,
  InvoiceInput,
  TableInput,
  CompoundPriceSpecificationInput,
  PeopleAudienceInput,
  GovernmentOrganizationInput,
  FoodEstablishmentReservationInput,
  DataCatalogInput,
  PaymentChargeSpecificationInput,
  BusReservationInput,
  TaxiInput,
  ItemPageInput,
  PhysicianInput,
  RsvpResponseTypeInput,
  OrderItemInput,
  BusinessEntityTypeInput,
  TipActionInput,
  HowToDirectionInput,
  ApartmentInput,
  NoteDigitalDocumentInput,
  ServiceInput,
  CampgroundInput,
  TennisComplexInput,
  ThingInput,
  SubwayStationInput,
  CourthouseInput,
  ReservationStatusTypeInput,
  HardwareStoreInput,
  AskActionInput,
  VisualArtsEventInput,
  DigitalDocumentInput,
  DanceGroupInput,
  BeautySalonInput,
  CommunicateActionInput,
  MenuItemInput,
  RoofingContractorInput,
  GovernmentServiceInput,
  DeliveryEventInput,
  HobbyShopInput,
  FollowActionInput,
  ChildrensEventInput,
  RVParkInput,
  SingleFamilyResidenceInput,
  WholesaleStoreInput,
  RentalCarReservationInput,
  TravelActionInput,
  OrganizationRoleInput,
  SkiResortInput,
  AutomatedTellerInput,
  CanalInput,
  NGOInput,
  TVSeriesInput,
  BarOrPubInput,
  FMRadioChannelInput,
  DistanceInput,
  MusicPlaylistInput,
  QuantitativeValueInput,
  BedDetailsInput,
  OwnershipInfoInput,
  MensClothingStoreInput,
  AcceptActionInput,
  LanguageInput,
  NewsArticleInput,
  TheaterGroupInput,
  ParcelDeliveryInput,
  BoardingPolicyTypeInput,
  PondInput,
  AnswerInput,
  BreweryInput,
  AllocateActionInput,
  ParentAudienceInput,
  RadioChannelInput,
  RoomInput,
  PublicSwimmingPoolInput,
  JobPostingInput,
  MusicReleaseFormatTypeInput,
  FinancialProductInput,
  PerformingGroupInput,
  MediaObjectInput,
  CemeteryInput,
  AccountingServiceInput,
  CheckInActionInput,
  DayOfWeekInput,
  BusinessAudienceInput,
  LodgingBusinessInput,
  AirportInput,
  EventStatusTypeInput,
  CreativeWorkSeasonInput,
  ReservationInput,
  FindActionInput,
  RecyclingCenterInput,
  HospitalInput,
  FestivalInput,
  LockerDeliveryInput,
  RadioSeasonInput,
  UpdateActionInput,
  AggregateRatingInput,
  ReplyActionInput,
  EmailMessageInput,
  BusStationInput,
  BowlingAlleyInput,
  ImageGalleryInput,
  OfferInput,
  DataDownloadInput,
  ProductInput,
  CampingPitchInput,
  GeoCoordinatesInput,
  MiddleSchoolInput,
  AutomotiveBusinessInput,
  LiteraryEventInput,
  SocialEventInput,
  EatActionInput,
  TheaterEventInput,
  TakeActionInput,
  SportsEventInput,
  GamePlayModeInput,

};