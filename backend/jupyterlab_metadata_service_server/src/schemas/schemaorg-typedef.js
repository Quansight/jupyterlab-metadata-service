const {
  GraphQLObjectType,
  GraphQLList,
  GraphQLString,
  GraphQLBoolean,
  GraphQLInt,
  GraphQLFloat,
  GraphQLUnionType
} = require('graphql');
const {
  GenderTypeEnum,
  MapCategoryTypeEnum,
  ContactPointOptionEnum,
  DigitalDocumentPermissionTypeEnum,
  PaymentStatusTypeEnum,
  MusicAlbumReleaseTypeEnum,
  GameServerStatusEnum,
  OfferItemConditionEnum,
  RestrictedDietEnum,
  QualitativeValueEnum,
  PaymentMethodEnum,
  OrderStatusEnum,
  BookFormatTypeEnum,
  ItemListOrderTypeEnum,
  WarrantyScopeEnum,
  DeliveryMethodEnum,
  ActionStatusTypeEnum,
  MusicAlbumProductionTypeEnum,
  SpecialtyEnum,
  ItemAvailabilityEnum,
  BusinessFunctionEnum,
  RsvpResponseTypeEnum,
  BusinessEntityTypeEnum,
  ReservationStatusTypeEnum,
  BoardingPolicyTypeEnum,
  MusicReleaseFormatTypeEnum,
  DayOfWeekEnum,
  EventStatusTypeEnum,
  GamePlayModeEnum,
} = require('./schemaorg-enum');

const UserLikes = new GraphQLObjectType({
  name: 'UserLikes',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const CafeOrCoffeeShop = new GraphQLObjectType({
  name: 'CafeOrCoffeeShop',
  fields: () => ({
    servesCuisine: { type: GraphQLList(GraphQLString) },
    hasMenu: { type: GraphQLList(Menu) },
    menu: { type: GraphQLList(Menu) },
    starRating: { type: GraphQLList(Rating) },
    acceptsReservations: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const FoodService = new GraphQLObjectType({
  name: 'FoodService',
  fields: () => ({
    serviceArea: { type: GraphQLList(serviceArea) },
    provider: { type: GraphQLList(provider) },
    serviceAudience: { type: GraphQLList(Audience) },
    audience: { type: GraphQLList(Audience) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    hoursAvailable: { type: GraphQLList(OpeningHoursSpecification) },
    providerMobility: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    broker: { type: GraphQLList(broker) },
    serviceOutput: { type: GraphQLList(Thing) },
    logo: { type: GraphQLList(ImageObject) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    availableChannel: { type: GraphQLList(ServiceChannel) },
    review: { type: GraphQLList(Review) },
    serviceType: { type: GraphQLList(GraphQLString) },
    produces: { type: GraphQLList(Thing) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Recipe = new GraphQLObjectType({
  name: 'Recipe',
  fields: () => ({
    recipeYield: { type: GraphQLList(QuantitativeValue) },
    recipeCategory: { type: GraphQLList(GraphQLString) },
    recipeIngredient: { type: GraphQLList(GraphQLString) },
    recipeInstructions: { type: GraphQLList(recipeInstructions) },
    nutrition: { type: GraphQLList(NutritionInformation) },
    suitableForDiet: { type: GraphQLList(RestrictedDiet) },
    recipeCuisine: { type: GraphQLList(GraphQLString) },
    cookTime: { type: GraphQLList(Duration) },
    cookingMethod: { type: GraphQLList(GraphQLString) },
    ingredients: { type: GraphQLList(GraphQLString) },
    steps: { type: GraphQLList(steps) },
    prepTime: { type: GraphQLList(Duration) },
    step: { type: GraphQLList(step) },
    tool: { type: GraphQLList(HowToTool) },
    performTime: { type: GraphQLList(Duration) },
    estimatedCost: { type: GraphQLList(MonetaryAmount) },
    totalTime: { type: GraphQLList(Duration) },
    supply: { type: GraphQLList(HowToSupply) },
    yield: { type: GraphQLList(QuantitativeValue) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Photograph = new GraphQLObjectType({
  name: 'Photograph',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Volcano = new GraphQLObjectType({
  name: 'Volcano',
  fields: () => ({
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const SportsTeam = new GraphQLObjectType({
  name: 'SportsTeam',
  fields: () => ({
    athlete: { type: GraphQLList(Person) },
    coach: { type: GraphQLList(Person) },
    sport: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const GroceryStore = new GraphQLObjectType({
  name: 'GroceryStore',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const Demand = new GraphQLObjectType({
  name: 'Demand',
  fields: () => ({
    sku: { type: GraphQLList(GraphQLString) },
    availabilityStarts: { type: GraphQLList(GraphQLString) },
    availableDeliveryMethod: { type: GraphQLList(DeliveryMethod) },
    mpn: { type: GraphQLList(GraphQLString) },
    serialNumber: { type: GraphQLList(GraphQLString) },
    ineligibleRegion: { type: GraphQLList(ineligibleRegion) },
    gtin8: { type: GraphQLList(GraphQLString) },
    availability: { type: GraphQLList(ItemAvailability) },
    priceSpecification: { type: GraphQLList(PriceSpecification) },
    inventoryLevel: { type: GraphQLList(QuantitativeValue) },
    eligibleTransactionVolume: { type: GraphQLList(PriceSpecification) },
    availableAtOrFrom: { type: GraphQLList(Place) },
    warranty: { type: GraphQLList(WarrantyPromise) },
    eligibleQuantity: { type: GraphQLList(QuantitativeValue) },
    validFrom: { type: GraphQLList(GraphQLString) },
    validThrough: { type: GraphQLList(GraphQLString) },
    gtin14: { type: GraphQLList(GraphQLString) },
    gtin13: { type: GraphQLList(GraphQLString) },
    gtin12: { type: GraphQLList(GraphQLString) },
    seller: { type: GraphQLList(seller) },
    deliveryLeadTime: { type: GraphQLList(QuantitativeValue) },
    availabilityEnds: { type: GraphQLList(GraphQLString) },
    includesObject: { type: GraphQLList(TypeAndQuantityNode) },
    businessFunction: { type: GraphQLList(BusinessFunction) },
    eligibleCustomerType: { type: GraphQLList(BusinessEntityType) },
    itemCondition: { type: GraphQLList(OfferItemCondition) },
    itemOffered: { type: GraphQLList(itemOffered) },
    eligibleDuration: { type: GraphQLList(QuantitativeValue) },
    acceptedPaymentMethod: { type: GraphQLList(acceptedPaymentMethod) },
    areaServed: { type: GraphQLList(areaServed) },
    eligibleRegion: { type: GraphQLList(eligibleRegion) },
    advanceBookingRequirement: { type: GraphQLList(QuantitativeValue) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const AboutPage = new GraphQLObjectType({
  name: 'AboutPage',
  fields: () => ({
    speakable: { type: GraphQLList(SpeakableSpecification) },
    breadcrumb: { type: GraphQLList(BreadcrumbList) },
    significantLink: { type: GraphQLList(GraphQLString) },
    relatedLink: { type: GraphQLList(GraphQLString) },
    lastReviewed: { type: GraphQLList(GraphQLString) },
    mainContentOfPage: { type: GraphQLList(WebPageElement) },
    reviewedBy: { type: GraphQLList(reviewedBy) },
    primaryImageOfPage: { type: GraphQLList(ImageObject) },
    significantLinks: { type: GraphQLList(GraphQLString) },
    specialty: { type: GraphQLList(Specialty) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ExerciseAction = new GraphQLObjectType({
  name: 'ExerciseAction',
  fields: () => ({
    course: { type: GraphQLList(Place) },
    sportsTeam: { type: GraphQLList(SportsTeam) },
    sportsEvent: { type: GraphQLList(SportsEvent) },
    distance: { type: GraphQLList(Distance) },
    opponent: { type: GraphQLList(Person) },
    sportsActivityLocation: { type: GraphQLList(SportsActivityLocation) },
    toLocation: { type: GraphQLList(Place) },
    fromLocation: { type: GraphQLList(Place) },
    exerciseCourse: { type: GraphQLList(Place) },
    audience: { type: GraphQLList(Audience) },
    event: { type: GraphQLList(Event) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const UserPlays = new GraphQLObjectType({
  name: 'UserPlays',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const StadiumOrArena = new GraphQLObjectType({
  name: 'StadiumOrArena',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    members: { type: GraphQLList(members) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    employees: { type: GraphQLList(Person) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
  })
});
const Trip = new GraphQLObjectType({
  name: 'Trip',
  fields: () => ({
    departureStation: { type: GraphQLList(TrainStation) },
    arrivalPlatform: { type: GraphQLList(GraphQLString) },
    departurePlatform: { type: GraphQLList(GraphQLString) },
    trainName: { type: GraphQLList(GraphQLString) },
    trainNumber: { type: GraphQLList(GraphQLString) },
    arrivalStation: { type: GraphQLList(TrainStation) },
    provider: { type: GraphQLList(provider) },
    offers: { type: GraphQLList(Offer) },
    arrivalTime: { type: GraphQLList(GraphQLString) },
    departureTime: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Dataset = new GraphQLObjectType({
  name: 'Dataset',
  fields: () => ({
    dataFeedElement: { type: GraphQLList(dataFeedElement) },
    includedInDataCatalog: { type: GraphQLList(DataCatalog) },
    datasetTimeInterval: { type: GraphQLList(GraphQLString) },
    issn: { type: GraphQLList(GraphQLString) },
    catalog: { type: GraphQLList(DataCatalog) },
    includedDataCatalog: { type: GraphQLList(DataCatalog) },
    distribution: { type: GraphQLList(DataDownload) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Action = new GraphQLObjectType({
  name: 'Action',
  fields: () => ({
    toLocation: { type: GraphQLList(Place) },
    fromLocation: { type: GraphQLList(Place) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const InsuranceAgency = new GraphQLObjectType({
  name: 'InsuranceAgency',
  fields: () => ({
    feesAndCommissionsSpecification: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const AudioObject = new GraphQLObjectType({
  name: 'AudioObject',
  fields: () => ({
    transcript: { type: GraphQLList(GraphQLString) },
    caption: { type: GraphQLList(MediaObject) },
    startTime: { type: GraphQLList(GraphQLString) },
    uploadDate: { type: GraphQLList(GraphQLString) },
    playerType: { type: GraphQLList(GraphQLString) },
    height: { type: GraphQLList(height) },
    bitrate: { type: GraphQLList(GraphQLString) },
    requiresSubscription: { type: GraphQLList(MediaSubscription) },
    regionsAllowed: { type: GraphQLList(Place) },
    endTime: { type: GraphQLList(GraphQLString) },
    contentSize: { type: GraphQLList(GraphQLString) },
    embedUrl: { type: GraphQLList(GraphQLString) },
    width: { type: GraphQLList(width) },
    contentUrl: { type: GraphQLList(GraphQLString) },
    associatedArticle: { type: GraphQLList(NewsArticle) },
    productionCompany: { type: GraphQLList(Organization) },
    duration: { type: GraphQLList(Duration) },
    encodesCreativeWork: { type: GraphQLList(CreativeWork) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const TaxiReservation = new GraphQLObjectType({
  name: 'TaxiReservation',
  fields: () => ({
    partySize: { type: GraphQLList(QuantitativeValue) },
    pickupLocation: { type: GraphQLList(Place) },
    pickupTime: { type: GraphQLList(GraphQLString) },
    provider: { type: GraphQLList(provider) },
    programMembershipUsed: { type: GraphQLList(ProgramMembership) },
    reservationStatus: { type: GraphQLList(ReservationStatusType) },
    underName: { type: GraphQLList(underName) },
    bookingAgent: { type: GraphQLList(bookingAgent) },
    totalPrice: { type: GraphQLList(PriceSpecification) },
    reservationFor: { type: GraphQLList(Thing) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    broker: { type: GraphQLList(broker) },
    modifiedTime: { type: GraphQLList(GraphQLString) },
    bookingTime: { type: GraphQLList(GraphQLString) },
    reservationId: { type: GraphQLList(GraphQLString) },
    reservedTicket: { type: GraphQLList(Ticket) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Vehicle = new GraphQLObjectType({
  name: 'Vehicle',
  fields: () => ({
    productionDate: { type: GraphQLList(GraphQLString) },
    numberOfForwardGears: { type: GraphQLList(QuantitativeValue) },
    cargoVolume: { type: GraphQLList(QuantitativeValue) },
    vehicleInteriorColor: { type: GraphQLList(GraphQLString) },
    steeringPosition: { type: GraphQLList(SteeringPositionValue) },
    vehicleSeatingCapacity: { type: GraphQLList(QuantitativeValue) },
    vehicleEngine: { type: GraphQLList(EngineSpecification) },
    vehicleModelDate: { type: GraphQLList(GraphQLString) },
    numberOfDoors: { type: GraphQLList(QuantitativeValue) },
    vehicleConfiguration: { type: GraphQLList(GraphQLString) },
    fuelType: { type: GraphQLList(QualitativeValue) },
    vehicleIdentificationNumber: { type: GraphQLList(GraphQLString) },
    fuelConsumption: { type: GraphQLList(QuantitativeValue) },
    numberOfPreviousOwners: { type: GraphQLList(QuantitativeValue) },
    mileageFromOdometer: { type: GraphQLList(QuantitativeValue) },
    fuelEfficiency: { type: GraphQLList(QuantitativeValue) },
    numberOfAxles: { type: GraphQLList(QuantitativeValue) },
    vehicleInteriorType: { type: GraphQLList(GraphQLString) },
    numberOfAirbags: { type: GraphQLList(GraphQLString) },
    vehicleTransmission: { type: GraphQLList(QualitativeValue) },
    dateVehicleFirstRegistered: { type: GraphQLList(GraphQLString) },
    purchaseDate: { type: GraphQLList(GraphQLString) },
    knownVehicleDamages: { type: GraphQLList(GraphQLString) },
    driveWheelConfiguration: { type: GraphQLList(DriveWheelConfigurationValue) },
    manufacturer: { type: GraphQLList(Organization) },
    sku: { type: GraphQLList(GraphQLString) },
    audience: { type: GraphQLList(Audience) },
    mpn: { type: GraphQLList(GraphQLString) },
    height: { type: GraphQLList(height) },
    gtin8: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    isConsumableFor: { type: GraphQLList(Product) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    width: { type: GraphQLList(width) },
    awards: { type: GraphQLList(GraphQLString) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    isAccessoryOrSparePartFor: { type: GraphQLList(Product) },
    logo: { type: GraphQLList(ImageObject) },
    gtin14: { type: GraphQLList(GraphQLString) },
    gtin13: { type: GraphQLList(GraphQLString) },
    gtin12: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    weight: { type: GraphQLList(QuantitativeValue) },
    depth: { type: GraphQLList(depth) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    model: { type: GraphQLList(ProductModel) },
    color: { type: GraphQLList(GraphQLString) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    productID: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    itemCondition: { type: GraphQLList(OfferItemCondition) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    releaseDate: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const AutoPartsStore = new GraphQLObjectType({
  name: 'AutoPartsStore',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const WPAdBlock = new GraphQLObjectType({
  name: 'WPAdBlock',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const SomeProducts = new GraphQLObjectType({
  name: 'SomeProducts',
  fields: () => ({
    inventoryLevel: { type: GraphQLList(QuantitativeValue) },
    manufacturer: { type: GraphQLList(Organization) },
    sku: { type: GraphQLList(GraphQLString) },
    productionDate: { type: GraphQLList(GraphQLString) },
    audience: { type: GraphQLList(Audience) },
    mpn: { type: GraphQLList(GraphQLString) },
    height: { type: GraphQLList(height) },
    gtin8: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    isConsumableFor: { type: GraphQLList(Product) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    width: { type: GraphQLList(width) },
    awards: { type: GraphQLList(GraphQLString) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    isAccessoryOrSparePartFor: { type: GraphQLList(Product) },
    logo: { type: GraphQLList(ImageObject) },
    gtin14: { type: GraphQLList(GraphQLString) },
    gtin13: { type: GraphQLList(GraphQLString) },
    gtin12: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    weight: { type: GraphQLList(QuantitativeValue) },
    depth: { type: GraphQLList(depth) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    model: { type: GraphQLList(ProductModel) },
    color: { type: GraphQLList(GraphQLString) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    productID: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    purchaseDate: { type: GraphQLList(GraphQLString) },
    itemCondition: { type: GraphQLList(OfferItemCondition) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    releaseDate: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const MoveAction = new GraphQLObjectType({
  name: 'MoveAction',
  fields: () => ({
    distance: { type: GraphQLList(Distance) },
    toLocation: { type: GraphQLList(Place) },
    fromLocation: { type: GraphQLList(Place) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const CreativeWork = new GraphQLObjectType({
  name: 'CreativeWork',
  fields: () => ({
    startTime: { type: GraphQLList(GraphQLString) },
    uploadDate: { type: GraphQLList(GraphQLString) },
    playerType: { type: GraphQLList(GraphQLString) },
    height: { type: GraphQLList(height) },
    bitrate: { type: GraphQLList(GraphQLString) },
    requiresSubscription: { type: GraphQLList(MediaSubscription) },
    regionsAllowed: { type: GraphQLList(Place) },
    endTime: { type: GraphQLList(GraphQLString) },
    contentSize: { type: GraphQLList(GraphQLString) },
    embedUrl: { type: GraphQLList(GraphQLString) },
    width: { type: GraphQLList(width) },
    contentUrl: { type: GraphQLList(GraphQLString) },
    associatedArticle: { type: GraphQLList(NewsArticle) },
    productionCompany: { type: GraphQLList(Organization) },
    duration: { type: GraphQLList(Duration) },
    encodesCreativeWork: { type: GraphQLList(CreativeWork) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const AddAction = new GraphQLObjectType({
  name: 'AddAction',
  fields: () => ({
    toLocation: { type: GraphQLList(Place) },
    collection: { type: GraphQLList(Thing) },
    targetCollection: { type: GraphQLList(Thing) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const JewelryStore = new GraphQLObjectType({
  name: 'JewelryStore',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const ViewAction = new GraphQLObjectType({
  name: 'ViewAction',
  fields: () => ({
    actionAccessibilityRequirement: { type: GraphQLList(ActionAccessSpecification) },
    expectsAcceptanceOf: { type: GraphQLList(Offer) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const WPFooter = new GraphQLObjectType({
  name: 'WPFooter',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const QAPage = new GraphQLObjectType({
  name: 'QAPage',
  fields: () => ({
    speakable: { type: GraphQLList(SpeakableSpecification) },
    breadcrumb: { type: GraphQLList(BreadcrumbList) },
    significantLink: { type: GraphQLList(GraphQLString) },
    relatedLink: { type: GraphQLList(GraphQLString) },
    lastReviewed: { type: GraphQLList(GraphQLString) },
    mainContentOfPage: { type: GraphQLList(WebPageElement) },
    reviewedBy: { type: GraphQLList(reviewedBy) },
    primaryImageOfPage: { type: GraphQLList(ImageObject) },
    significantLinks: { type: GraphQLList(GraphQLString) },
    specialty: { type: GraphQLList(Specialty) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const LikeAction = new GraphQLObjectType({
  name: 'LikeAction',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const PublicationEvent = new GraphQLObjectType({
  name: 'PublicationEvent',
  fields: () => ({
    publishedOn: { type: GraphQLList(BroadcastService) },
    free: { type: GraphQLList(GraphQLBoolean) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Course = new GraphQLObjectType({
  name: 'Course',
  fields: () => ({
    coursePrerequisites: { type: GraphQLList(coursePrerequisites) },
    courseCode: { type: GraphQLList(GraphQLString) },
    hasCourseInstance: { type: GraphQLList(CourseInstance) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const MobileApplication = new GraphQLObjectType({
  name: 'MobileApplication',
  fields: () => ({
    carrierRequirements: { type: GraphQLList(GraphQLString) },
    downloadUrl: { type: GraphQLList(GraphQLString) },
    softwareRequirements: { type: GraphQLList(GraphQLString) },
    permissions: { type: GraphQLList(GraphQLString) },
    processorRequirements: { type: GraphQLList(GraphQLString) },
    availableOnDevice: { type: GraphQLList(GraphQLString) },
    featureList: { type: GraphQLList(GraphQLString) },
    applicationSubCategory: { type: GraphQLList(GraphQLString) },
    device: { type: GraphQLList(GraphQLString) },
    applicationCategory: { type: GraphQLList(GraphQLString) },
    softwareVersion: { type: GraphQLList(GraphQLString) },
    storageRequirements: { type: GraphQLList(GraphQLString) },
    applicationSuite: { type: GraphQLList(GraphQLString) },
    memoryRequirements: { type: GraphQLList(GraphQLString) },
    screenshot: { type: GraphQLList(ImageObject) },
    countriesSupported: { type: GraphQLList(GraphQLString) },
    softwareHelp: { type: GraphQLList(CreativeWork) },
    softwareAddOn: { type: GraphQLList(SoftwareApplication) },
    releaseNotes: { type: GraphQLList(GraphQLString) },
    supportingData: { type: GraphQLList(DataFeed) },
    requirements: { type: GraphQLList(GraphQLString) },
    countriesNotSupported: { type: GraphQLList(GraphQLString) },
    operatingSystem: { type: GraphQLList(GraphQLString) },
    fileSize: { type: GraphQLList(GraphQLString) },
    installUrl: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ParcelService = new GraphQLObjectType({
  name: 'ParcelService',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const BefriendAction = new GraphQLObjectType({
  name: 'BefriendAction',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const HowTo = new GraphQLObjectType({
  name: 'HowTo',
  fields: () => ({
    steps: { type: GraphQLList(steps) },
    prepTime: { type: GraphQLList(Duration) },
    step: { type: GraphQLList(step) },
    tool: { type: GraphQLList(HowToTool) },
    performTime: { type: GraphQLList(Duration) },
    estimatedCost: { type: GraphQLList(MonetaryAmount) },
    totalTime: { type: GraphQLList(Duration) },
    supply: { type: GraphQLList(HowToSupply) },
    yield: { type: GraphQLList(QuantitativeValue) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const PoliceStation = new GraphQLObjectType({
  name: 'PoliceStation',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const HealthClub = new GraphQLObjectType({
  name: 'HealthClub',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const DrinkAction = new GraphQLObjectType({
  name: 'DrinkAction',
  fields: () => ({
    actionAccessibilityRequirement: { type: GraphQLList(ActionAccessSpecification) },
    expectsAcceptanceOf: { type: GraphQLList(Offer) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const DownloadAction = new GraphQLObjectType({
  name: 'DownloadAction',
  fields: () => ({
    toLocation: { type: GraphQLList(Place) },
    fromLocation: { type: GraphQLList(Place) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const TireShop = new GraphQLObjectType({
  name: 'TireShop',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const Synagogue = new GraphQLObjectType({
  name: 'Synagogue',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const AnimalShelter = new GraphQLObjectType({
  name: 'AnimalShelter',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const WorkersUnion = new GraphQLObjectType({
  name: 'WorkersUnion',
  fields: () => ({
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const HowToSection = new GraphQLObjectType({
  name: 'HowToSection',
  fields: () => ({
    steps: { type: GraphQLList(steps) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    nextItem: { type: GraphQLList(ListItem) },
    previousItem: { type: GraphQLList(ListItem) },
    item: { type: GraphQLList(Thing) },
    itemListElement: { type: GraphQLList(itemListElement) },
    itemListOrder: { type: GraphQLList(ItemListOrderType) },
    numberOfItems: { type: GraphQLList(GraphQLInt) },
  })
});
const MusicAlbum = new GraphQLObjectType({
  name: 'MusicAlbum',
  fields: () => ({
    albumProductionType: { type: GraphQLList(MusicAlbumProductionType) },
    albumReleaseType: { type: GraphQLList(MusicAlbumReleaseType) },
    byArtist: { type: GraphQLList(byArtist) },
    albumRelease: { type: GraphQLList(MusicRelease) },
    numTracks: { type: GraphQLList(GraphQLInt) },
    track: { type: GraphQLList(track) },
    tracks: { type: GraphQLList(MusicRecording) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const AssessAction = new GraphQLObjectType({
  name: 'AssessAction',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Person = new GraphQLObjectType({
  name: 'Person',
  fields: () => ({
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    spouse: { type: GraphQLList(Person) },
    funder: { type: GraphQLList(funder) },
    colleagues: { type: GraphQLList(Person) },
    deathDate: { type: GraphQLList(GraphQLString) },
    height: { type: GraphQLList(height) },
    workLocation: { type: GraphQLList(workLocation) },
    children: { type: GraphQLList(Person) },
    hasOccupation: { type: GraphQLList(Occupation) },
    jobTitle: { type: GraphQLList(GraphQLString) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    deathPlace: { type: GraphQLList(Place) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    birthPlace: { type: GraphQLList(Place) },
    gender: { type: GraphQLList(GenderType) },
    alumniOf: { type: GraphQLList(alumniOf) },
    homeLocation: { type: GraphQLList(homeLocation) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    birthDate: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    familyName: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    sibling: { type: GraphQLList(Person) },
    performerIn: { type: GraphQLList(Event) },
    honorificPrefix: { type: GraphQLList(GraphQLString) },
    additionalName: { type: GraphQLList(GraphQLString) },
    siblings: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    weight: { type: GraphQLList(QuantitativeValue) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    colleague: { type: GraphQLList(Person) },
    parents: { type: GraphQLList(Person) },
    givenName: { type: GraphQLList(GraphQLString) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    parent: { type: GraphQLList(Person) },
    owns: { type: GraphQLList(owns) },
    affiliation: { type: GraphQLList(Organization) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    honorificSuffix: { type: GraphQLList(GraphQLString) },
    netWorth: { type: GraphQLList(netWorth) },
    vatID: { type: GraphQLList(GraphQLString) },
    nationality: { type: GraphQLList(Country) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    relatedTo: { type: GraphQLList(Person) },
    follows: { type: GraphQLList(Person) },
    knows: { type: GraphQLList(Person) },
    worksFor: { type: GraphQLList(Organization) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const DeliveryChargeSpecification = new GraphQLObjectType({
  name: 'DeliveryChargeSpecification',
  fields: () => ({
    ineligibleRegion: { type: GraphQLList(ineligibleRegion) },
    appliesToDeliveryMethod: { type: GraphQLList(DeliveryMethod) },
    areaServed: { type: GraphQLList(areaServed) },
    eligibleRegion: { type: GraphQLList(eligibleRegion) },
    minPrice: { type: GraphQLList(GraphQLFloat) },
    eligibleTransactionVolume: { type: GraphQLList(PriceSpecification) },
    maxPrice: { type: GraphQLList(GraphQLFloat) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    eligibleQuantity: { type: GraphQLList(QuantitativeValue) },
    validFrom: { type: GraphQLList(GraphQLString) },
    validThrough: { type: GraphQLList(GraphQLString) },
    price: { type: GraphQLList(GraphQLString) },
    valueAddedTaxIncluded: { type: GraphQLList(GraphQLBoolean) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const LendAction = new GraphQLObjectType({
  name: 'LendAction',
  fields: () => ({
    borrower: { type: GraphQLList(Person) },
    toLocation: { type: GraphQLList(Place) },
    fromLocation: { type: GraphQLList(Place) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const FoodEstablishment = new GraphQLObjectType({
  name: 'FoodEstablishment',
  fields: () => ({
    servesCuisine: { type: GraphQLList(GraphQLString) },
    hasMenu: { type: GraphQLList(Menu) },
    menu: { type: GraphQLList(Menu) },
    starRating: { type: GraphQLList(Rating) },
    acceptsReservations: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const ListenAction = new GraphQLObjectType({
  name: 'ListenAction',
  fields: () => ({
    actionAccessibilityRequirement: { type: GraphQLList(ActionAccessSpecification) },
    expectsAcceptanceOf: { type: GraphQLList(Offer) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const TransferAction = new GraphQLObjectType({
  name: 'TransferAction',
  fields: () => ({
    toLocation: { type: GraphQLList(Place) },
    fromLocation: { type: GraphQLList(Place) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const NutritionInformation = new GraphQLObjectType({
  name: 'NutritionInformation',
  fields: () => ({
    saturatedFatContent: { type: GraphQLList(Mass) },
    fatContent: { type: GraphQLList(Mass) },
    unsaturatedFatContent: { type: GraphQLList(Mass) },
    sugarContent: { type: GraphQLList(Mass) },
    cholesterolContent: { type: GraphQLList(Mass) },
    carbohydrateContent: { type: GraphQLList(Mass) },
    proteinContent: { type: GraphQLList(Mass) },
    sodiumContent: { type: GraphQLList(Mass) },
    transFatContent: { type: GraphQLList(Mass) },
    fiberContent: { type: GraphQLList(Mass) },
    calories: { type: GraphQLList(Energy) },
    servingSize: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const SiteNavigationElement = new GraphQLObjectType({
  name: 'SiteNavigationElement',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Organization = new GraphQLObjectType({
  name: 'Organization',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const DeleteAction = new GraphQLObjectType({
  name: 'DeleteAction',
  fields: () => ({
    collection: { type: GraphQLList(Thing) },
    targetCollection: { type: GraphQLList(Thing) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const TradeAction = new GraphQLObjectType({
  name: 'TradeAction',
  fields: () => ({
    recipient: { type: GraphQLList(recipient) },
    priceSpecification: { type: GraphQLList(PriceSpecification) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    price: { type: GraphQLList(GraphQLString) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const LegalService = new GraphQLObjectType({
  name: 'LegalService',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const VisualArtwork = new GraphQLObjectType({
  name: 'VisualArtwork',
  fields: () => ({
    height: { type: GraphQLList(height) },
    artMedium: { type: GraphQLList(GraphQLString) },
    artform: { type: GraphQLList(GraphQLString) },
    artworkSurface: { type: GraphQLList(GraphQLString) },
    artEdition: { type: GraphQLList(GraphQLString) },
    width: { type: GraphQLList(width) },
    surface: { type: GraphQLList(GraphQLString) },
    depth: { type: GraphQLList(depth) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Attorney = new GraphQLObjectType({
  name: 'Attorney',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const RsvpAction = new GraphQLObjectType({
  name: 'RsvpAction',
  fields: () => ({
    additionalNumberOfGuests: { type: GraphQLList(GraphQLFloat) },
    comment: { type: GraphQLList(Comment) },
    rsvpResponse: { type: GraphQLList(RsvpResponseType) },
    event: { type: GraphQLList(Event) },
    about: { type: GraphQLList(Thing) },
    inLanguage: { type: GraphQLList(Language) },
    recipient: { type: GraphQLList(recipient) },
    language: { type: GraphQLList(Language) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const GeneralContractor = new GraphQLObjectType({
  name: 'GeneralContractor',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const Rating = new GraphQLObjectType({
  name: 'Rating',
  fields: () => ({
    itemReviewed: { type: GraphQLList(Thing) },
    reviewCount: { type: GraphQLList(GraphQLInt) },
    ratingCount: { type: GraphQLList(GraphQLInt) },
    ratingValue: { type: GraphQLList(GraphQLString) },
    bestRating: { type: GraphQLList(GraphQLString) },
    reviewAspect: { type: GraphQLList(GraphQLString) },
    author: { type: GraphQLList(author) },
    worstRating: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ApartmentComplex = new GraphQLObjectType({
  name: 'ApartmentComplex',
  fields: () => ({
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const RegisterAction = new GraphQLObjectType({
  name: 'RegisterAction',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const HousePainter = new GraphQLObjectType({
  name: 'HousePainter',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const WinAction = new GraphQLObjectType({
  name: 'WinAction',
  fields: () => ({
    loser: { type: GraphQLList(Person) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const MovieRentalStore = new GraphQLObjectType({
  name: 'MovieRentalStore',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const WatchAction = new GraphQLObjectType({
  name: 'WatchAction',
  fields: () => ({
    actionAccessibilityRequirement: { type: GraphQLList(ActionAccessSpecification) },
    expectsAcceptanceOf: { type: GraphQLList(Offer) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const PropertyValueSpecification = new GraphQLObjectType({
  name: 'PropertyValueSpecification',
  fields: () => ({
    defaultValue: { type: GraphQLList(Thing) },
    minValue: { type: GraphQLList(GraphQLFloat) },
    stepValue: { type: GraphQLList(GraphQLFloat) },
    valuePattern: { type: GraphQLList(GraphQLString) },
    valueMaxLength: { type: GraphQLList(GraphQLFloat) },
    readonlyValue: { type: GraphQLList(GraphQLBoolean) },
    valueMinLength: { type: GraphQLList(GraphQLFloat) },
    maxValue: { type: GraphQLList(GraphQLFloat) },
    valueName: { type: GraphQLList(GraphQLString) },
    multipleValues: { type: GraphQLList(GraphQLBoolean) },
    valueRequired: { type: GraphQLList(GraphQLBoolean) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const EducationEvent = new GraphQLObjectType({
  name: 'EducationEvent',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ResumeAction = new GraphQLObjectType({
  name: 'ResumeAction',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ToyStore = new GraphQLObjectType({
  name: 'ToyStore',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const BedAndBreakfast = new GraphQLObjectType({
  name: 'BedAndBreakfast',
  fields: () => ({
    audience: { type: GraphQLList(Audience) },
    checkinTime: { type: GraphQLList(GraphQLString) },
    petsAllowed: { type: GraphQLList(GraphQLString) },
    availableLanguage: { type: GraphQLList(Language) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    starRating: { type: GraphQLList(Rating) },
    checkoutTime: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const Suite = new GraphQLObjectType({
  name: 'Suite',
  fields: () => ({
    occupancy: { type: GraphQLList(QuantitativeValue) },
    bed: { type: GraphQLList(bed) },
    numberOfRooms: { type: GraphQLList(QuantitativeValue) },
    floorSize: { type: GraphQLList(QuantitativeValue) },
    petsAllowed: { type: GraphQLList(GraphQLString) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    permittedUsage: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const GenderType = new GraphQLObjectType({
  name: 'GenderType',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const InstallAction = new GraphQLObjectType({
  name: 'InstallAction',
  fields: () => ({
    actionAccessibilityRequirement: { type: GraphQLList(ActionAccessSpecification) },
    expectsAcceptanceOf: { type: GraphQLList(Offer) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Distillery = new GraphQLObjectType({
  name: 'Distillery',
  fields: () => ({
    servesCuisine: { type: GraphQLList(GraphQLString) },
    hasMenu: { type: GraphQLList(Menu) },
    menu: { type: GraphQLList(Menu) },
    starRating: { type: GraphQLList(Rating) },
    acceptsReservations: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const GiveAction = new GraphQLObjectType({
  name: 'GiveAction',
  fields: () => ({
    recipient: { type: GraphQLList(recipient) },
    toLocation: { type: GraphQLList(Place) },
    fromLocation: { type: GraphQLList(Place) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const PostOffice = new GraphQLObjectType({
  name: 'PostOffice',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const CheckoutPage = new GraphQLObjectType({
  name: 'CheckoutPage',
  fields: () => ({
    speakable: { type: GraphQLList(SpeakableSpecification) },
    breadcrumb: { type: GraphQLList(BreadcrumbList) },
    significantLink: { type: GraphQLList(GraphQLString) },
    relatedLink: { type: GraphQLList(GraphQLString) },
    lastReviewed: { type: GraphQLList(GraphQLString) },
    mainContentOfPage: { type: GraphQLList(WebPageElement) },
    reviewedBy: { type: GraphQLList(reviewedBy) },
    primaryImageOfPage: { type: GraphQLList(ImageObject) },
    significantLinks: { type: GraphQLList(GraphQLString) },
    specialty: { type: GraphQLList(Specialty) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Accommodation = new GraphQLObjectType({
  name: 'Accommodation',
  fields: () => ({
    floorSize: { type: GraphQLList(QuantitativeValue) },
    petsAllowed: { type: GraphQLList(GraphQLString) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    numberOfRooms: { type: GraphQLList(QuantitativeValue) },
    permittedUsage: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const PerformingArtsTheater = new GraphQLObjectType({
  name: 'PerformingArtsTheater',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const AggregateOffer = new GraphQLObjectType({
  name: 'AggregateOffer',
  fields: () => ({
    offers: { type: GraphQLList(Offer) },
    offerCount: { type: GraphQLList(GraphQLInt) },
    lowPrice: { type: GraphQLList(GraphQLString) },
    highPrice: { type: GraphQLList(GraphQLString) },
    sku: { type: GraphQLList(GraphQLString) },
    availabilityStarts: { type: GraphQLList(GraphQLString) },
    availableDeliveryMethod: { type: GraphQLList(DeliveryMethod) },
    mpn: { type: GraphQLList(GraphQLString) },
    serialNumber: { type: GraphQLList(GraphQLString) },
    ineligibleRegion: { type: GraphQLList(ineligibleRegion) },
    gtin8: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    availability: { type: GraphQLList(ItemAvailability) },
    priceSpecification: { type: GraphQLList(PriceSpecification) },
    inventoryLevel: { type: GraphQLList(QuantitativeValue) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    eligibleTransactionVolume: { type: GraphQLList(PriceSpecification) },
    availableAtOrFrom: { type: GraphQLList(Place) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    priceValidUntil: { type: GraphQLList(GraphQLString) },
    addOn: { type: GraphQLList(Offer) },
    warranty: { type: GraphQLList(WarrantyPromise) },
    eligibleQuantity: { type: GraphQLList(QuantitativeValue) },
    validFrom: { type: GraphQLList(GraphQLString) },
    validThrough: { type: GraphQLList(GraphQLString) },
    price: { type: GraphQLList(GraphQLString) },
    gtin14: { type: GraphQLList(GraphQLString) },
    gtin13: { type: GraphQLList(GraphQLString) },
    gtin12: { type: GraphQLList(GraphQLString) },
    seller: { type: GraphQLList(seller) },
    deliveryLeadTime: { type: GraphQLList(QuantitativeValue) },
    availabilityEnds: { type: GraphQLList(GraphQLString) },
    includesObject: { type: GraphQLList(TypeAndQuantityNode) },
    review: { type: GraphQLList(Review) },
    businessFunction: { type: GraphQLList(BusinessFunction) },
    eligibleCustomerType: { type: GraphQLList(BusinessEntityType) },
    itemCondition: { type: GraphQLList(OfferItemCondition) },
    itemOffered: { type: GraphQLList(itemOffered) },
    offeredBy: { type: GraphQLList(offeredBy) },
    eligibleDuration: { type: GraphQLList(QuantitativeValue) },
    acceptedPaymentMethod: { type: GraphQLList(acceptedPaymentMethod) },
    areaServed: { type: GraphQLList(areaServed) },
    eligibleRegion: { type: GraphQLList(eligibleRegion) },
    advanceBookingRequirement: { type: GraphQLList(QuantitativeValue) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Museum = new GraphQLObjectType({
  name: 'Museum',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const HowToSupply = new GraphQLObjectType({
  name: 'HowToSupply',
  fields: () => ({
    estimatedCost: { type: GraphQLList(MonetaryAmount) },
    requiredQuantity: { type: GraphQLList(QuantitativeValue) },
    nextItem: { type: GraphQLList(ListItem) },
    position: { type: GraphQLList(GraphQLString) },
    previousItem: { type: GraphQLList(ListItem) },
    item: { type: GraphQLList(Thing) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const AutoRepair = new GraphQLObjectType({
  name: 'AutoRepair',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const ExerciseGym = new GraphQLObjectType({
  name: 'ExerciseGym',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const Embassy = new GraphQLObjectType({
  name: 'Embassy',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ProfilePage = new GraphQLObjectType({
  name: 'ProfilePage',
  fields: () => ({
    speakable: { type: GraphQLList(SpeakableSpecification) },
    breadcrumb: { type: GraphQLList(BreadcrumbList) },
    significantLink: { type: GraphQLList(GraphQLString) },
    relatedLink: { type: GraphQLList(GraphQLString) },
    lastReviewed: { type: GraphQLList(GraphQLString) },
    mainContentOfPage: { type: GraphQLList(WebPageElement) },
    reviewedBy: { type: GraphQLList(reviewedBy) },
    primaryImageOfPage: { type: GraphQLList(ImageObject) },
    significantLinks: { type: GraphQLList(GraphQLString) },
    specialty: { type: GraphQLList(Specialty) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const DisagreeAction = new GraphQLObjectType({
  name: 'DisagreeAction',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const DigitalDocumentPermission = new GraphQLObjectType({
  name: 'DigitalDocumentPermission',
  fields: () => ({
    grantee: { type: GraphQLList(grantee) },
    permissionType: { type: GraphQLList(DigitalDocumentPermissionType) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ImageObject = new GraphQLObjectType({
  name: 'ImageObject',
  fields: () => ({
    exifData: { type: GraphQLList(GraphQLString) },
    representativeOfPage: { type: GraphQLList(GraphQLBoolean) },
    thumbnail: { type: GraphQLList(ImageObject) },
    caption: { type: GraphQLList(MediaObject) },
    startTime: { type: GraphQLList(GraphQLString) },
    uploadDate: { type: GraphQLList(GraphQLString) },
    playerType: { type: GraphQLList(GraphQLString) },
    height: { type: GraphQLList(height) },
    bitrate: { type: GraphQLList(GraphQLString) },
    requiresSubscription: { type: GraphQLList(MediaSubscription) },
    regionsAllowed: { type: GraphQLList(Place) },
    endTime: { type: GraphQLList(GraphQLString) },
    contentSize: { type: GraphQLList(GraphQLString) },
    embedUrl: { type: GraphQLList(GraphQLString) },
    width: { type: GraphQLList(width) },
    contentUrl: { type: GraphQLList(GraphQLString) },
    associatedArticle: { type: GraphQLList(NewsArticle) },
    productionCompany: { type: GraphQLList(Organization) },
    duration: { type: GraphQLList(Duration) },
    encodesCreativeWork: { type: GraphQLList(CreativeWork) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ReservationPackage = new GraphQLObjectType({
  name: 'ReservationPackage',
  fields: () => ({
    subReservation: { type: GraphQLList(Reservation) },
    provider: { type: GraphQLList(provider) },
    programMembershipUsed: { type: GraphQLList(ProgramMembership) },
    reservationStatus: { type: GraphQLList(ReservationStatusType) },
    underName: { type: GraphQLList(underName) },
    bookingAgent: { type: GraphQLList(bookingAgent) },
    totalPrice: { type: GraphQLList(PriceSpecification) },
    reservationFor: { type: GraphQLList(Thing) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    broker: { type: GraphQLList(broker) },
    modifiedTime: { type: GraphQLList(GraphQLString) },
    bookingTime: { type: GraphQLList(GraphQLString) },
    reservationId: { type: GraphQLList(GraphQLString) },
    reservedTicket: { type: GraphQLList(Ticket) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const SeaBodyOfWater = new GraphQLObjectType({
  name: 'SeaBodyOfWater',
  fields: () => ({
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const TrackAction = new GraphQLObjectType({
  name: 'TrackAction',
  fields: () => ({
    deliveryMethod: { type: GraphQLList(DeliveryMethod) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const HomeAndConstructionBusiness = new GraphQLObjectType({
  name: 'HomeAndConstructionBusiness',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const ProgramMembership = new GraphQLObjectType({
  name: 'ProgramMembership',
  fields: () => ({
    membershipNumber: { type: GraphQLList(GraphQLString) },
    members: { type: GraphQLList(members) },
    member: { type: GraphQLList(member) },
    hostingOrganization: { type: GraphQLList(Organization) },
    programName: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ControlAction = new GraphQLObjectType({
  name: 'ControlAction',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const CheckAction = new GraphQLObjectType({
  name: 'CheckAction',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Game = new GraphQLObjectType({
  name: 'Game',
  fields: () => ({
    gamePlatform: { type: GraphQLList(Thing) },
    gameServer: { type: GraphQLList(GameServer) },
    actor: { type: GraphQLList(Person) },
    trailer: { type: GraphQLList(VideoObject) },
    cheatCode: { type: GraphQLList(CreativeWork) },
    gameTip: { type: GraphQLList(CreativeWork) },
    musicBy: { type: GraphQLList(musicBy) },
    directors: { type: GraphQLList(Person) },
    playMode: { type: GraphQLList(GamePlayMode) },
    director: { type: GraphQLList(Person) },
    actors: { type: GraphQLList(Person) },
    downloadUrl: { type: GraphQLList(GraphQLString) },
    softwareRequirements: { type: GraphQLList(GraphQLString) },
    permissions: { type: GraphQLList(GraphQLString) },
    processorRequirements: { type: GraphQLList(GraphQLString) },
    availableOnDevice: { type: GraphQLList(GraphQLString) },
    featureList: { type: GraphQLList(GraphQLString) },
    applicationSubCategory: { type: GraphQLList(GraphQLString) },
    device: { type: GraphQLList(GraphQLString) },
    applicationCategory: { type: GraphQLList(GraphQLString) },
    softwareVersion: { type: GraphQLList(GraphQLString) },
    storageRequirements: { type: GraphQLList(GraphQLString) },
    applicationSuite: { type: GraphQLList(GraphQLString) },
    memoryRequirements: { type: GraphQLList(GraphQLString) },
    screenshot: { type: GraphQLList(ImageObject) },
    countriesSupported: { type: GraphQLList(GraphQLString) },
    softwareHelp: { type: GraphQLList(CreativeWork) },
    softwareAddOn: { type: GraphQLList(SoftwareApplication) },
    releaseNotes: { type: GraphQLList(GraphQLString) },
    supportingData: { type: GraphQLList(DataFeed) },
    requirements: { type: GraphQLList(GraphQLString) },
    countriesNotSupported: { type: GraphQLList(GraphQLString) },
    operatingSystem: { type: GraphQLList(GraphQLString) },
    fileSize: { type: GraphQLList(GraphQLString) },
    installUrl: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    gameItem: { type: GraphQLList(Thing) },
    characterAttribute: { type: GraphQLList(Thing) },
    gameLocation: { type: GraphQLList(gameLocation) },
    quest: { type: GraphQLList(Thing) },
    numberOfPlayers: { type: GraphQLList(QuantitativeValue) },
  })
});
const DiscussionForumPosting = new GraphQLObjectType({
  name: 'DiscussionForumPosting',
  fields: () => ({
    sharedContent: { type: GraphQLList(CreativeWork) },
    pagination: { type: GraphQLList(GraphQLString) },
    wordCount: { type: GraphQLList(GraphQLInt) },
    speakable: { type: GraphQLList(SpeakableSpecification) },
    pageEnd: { type: GraphQLList(GraphQLString) },
    articleSection: { type: GraphQLList(GraphQLString) },
    articleBody: { type: GraphQLList(GraphQLString) },
    pageStart: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const IceCreamShop = new GraphQLObjectType({
  name: 'IceCreamShop',
  fields: () => ({
    servesCuisine: { type: GraphQLList(GraphQLString) },
    hasMenu: { type: GraphQLList(Menu) },
    menu: { type: GraphQLList(Menu) },
    starRating: { type: GraphQLList(Rating) },
    acceptsReservations: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const TouristAttraction = new GraphQLObjectType({
  name: 'TouristAttraction',
  fields: () => ({
    touristType: { type: GraphQLList(Audience) },
    availableLanguage: { type: GraphQLList(Language) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Car = new GraphQLObjectType({
  name: 'Car',
  fields: () => ({
    productionDate: { type: GraphQLList(GraphQLString) },
    numberOfForwardGears: { type: GraphQLList(QuantitativeValue) },
    cargoVolume: { type: GraphQLList(QuantitativeValue) },
    vehicleInteriorColor: { type: GraphQLList(GraphQLString) },
    steeringPosition: { type: GraphQLList(SteeringPositionValue) },
    vehicleSeatingCapacity: { type: GraphQLList(QuantitativeValue) },
    vehicleEngine: { type: GraphQLList(EngineSpecification) },
    vehicleModelDate: { type: GraphQLList(GraphQLString) },
    numberOfDoors: { type: GraphQLList(QuantitativeValue) },
    vehicleConfiguration: { type: GraphQLList(GraphQLString) },
    fuelType: { type: GraphQLList(QualitativeValue) },
    vehicleIdentificationNumber: { type: GraphQLList(GraphQLString) },
    fuelConsumption: { type: GraphQLList(QuantitativeValue) },
    numberOfPreviousOwners: { type: GraphQLList(QuantitativeValue) },
    mileageFromOdometer: { type: GraphQLList(QuantitativeValue) },
    fuelEfficiency: { type: GraphQLList(QuantitativeValue) },
    numberOfAxles: { type: GraphQLList(QuantitativeValue) },
    vehicleInteriorType: { type: GraphQLList(GraphQLString) },
    numberOfAirbags: { type: GraphQLList(GraphQLString) },
    vehicleTransmission: { type: GraphQLList(QualitativeValue) },
    dateVehicleFirstRegistered: { type: GraphQLList(GraphQLString) },
    purchaseDate: { type: GraphQLList(GraphQLString) },
    knownVehicleDamages: { type: GraphQLList(GraphQLString) },
    driveWheelConfiguration: { type: GraphQLList(DriveWheelConfigurationValue) },
    manufacturer: { type: GraphQLList(Organization) },
    sku: { type: GraphQLList(GraphQLString) },
    audience: { type: GraphQLList(Audience) },
    mpn: { type: GraphQLList(GraphQLString) },
    height: { type: GraphQLList(height) },
    gtin8: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    isConsumableFor: { type: GraphQLList(Product) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    width: { type: GraphQLList(width) },
    awards: { type: GraphQLList(GraphQLString) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    isAccessoryOrSparePartFor: { type: GraphQLList(Product) },
    logo: { type: GraphQLList(ImageObject) },
    gtin14: { type: GraphQLList(GraphQLString) },
    gtin13: { type: GraphQLList(GraphQLString) },
    gtin12: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    weight: { type: GraphQLList(QuantitativeValue) },
    depth: { type: GraphQLList(depth) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    model: { type: GraphQLList(ProductModel) },
    color: { type: GraphQLList(GraphQLString) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    productID: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    itemCondition: { type: GraphQLList(OfferItemCondition) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    releaseDate: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const PriceSpecification = new GraphQLObjectType({
  name: 'PriceSpecification',
  fields: () => ({
    appliesToPaymentMethod: { type: GraphQLList(PaymentMethod) },
    appliesToDeliveryMethod: { type: GraphQLList(DeliveryMethod) },
    minPrice: { type: GraphQLList(GraphQLFloat) },
    eligibleTransactionVolume: { type: GraphQLList(PriceSpecification) },
    maxPrice: { type: GraphQLList(GraphQLFloat) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    eligibleQuantity: { type: GraphQLList(QuantitativeValue) },
    validFrom: { type: GraphQLList(GraphQLString) },
    validThrough: { type: GraphQLList(GraphQLString) },
    price: { type: GraphQLList(GraphQLString) },
    valueAddedTaxIncluded: { type: GraphQLList(GraphQLBoolean) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const AdministrativeArea = new GraphQLObjectType({
  name: 'AdministrativeArea',
  fields: () => ({
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Season = new GraphQLObjectType({
  name: 'Season',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const DrawAction = new GraphQLObjectType({
  name: 'DrawAction',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const PaymentCard = new GraphQLObjectType({
  name: 'PaymentCard',
  fields: () => ({
    loanTerm: { type: GraphQLList(QuantitativeValue) },
    currency: { type: GraphQLList(GraphQLString) },
    amount: { type: GraphQLList(MonetaryAmount) },
    requiredCollateral: { type: GraphQLList(Thing) },
    interestRate: { type: GraphQLList(QuantitativeValue) },
    feesAndCommissionsSpecification: { type: GraphQLList(GraphQLString) },
    annualPercentageRate: { type: GraphQLList(QuantitativeValue) },
    serviceArea: { type: GraphQLList(serviceArea) },
    provider: { type: GraphQLList(provider) },
    serviceAudience: { type: GraphQLList(Audience) },
    audience: { type: GraphQLList(Audience) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    hoursAvailable: { type: GraphQLList(OpeningHoursSpecification) },
    providerMobility: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    broker: { type: GraphQLList(broker) },
    serviceOutput: { type: GraphQLList(Thing) },
    logo: { type: GraphQLList(ImageObject) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    availableChannel: { type: GraphQLList(ServiceChannel) },
    review: { type: GraphQLList(Review) },
    serviceType: { type: GraphQLList(GraphQLString) },
    produces: { type: GraphQLList(Thing) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const PublicationVolume = new GraphQLObjectType({
  name: 'PublicationVolume',
  fields: () => ({
    pagination: { type: GraphQLList(GraphQLString) },
    pageEnd: { type: GraphQLList(GraphQLString) },
    volumeNumber: { type: GraphQLList(GraphQLString) },
    pageStart: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const LocalBusiness = new GraphQLObjectType({
  name: 'LocalBusiness',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const CancelAction = new GraphQLObjectType({
  name: 'CancelAction',
  fields: () => ({
    scheduledTime: { type: GraphQLList(GraphQLString) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const IgnoreAction = new GraphQLObjectType({
  name: 'IgnoreAction',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const MusicRecording = new GraphQLObjectType({
  name: 'MusicRecording',
  fields: () => ({
    recordingOf: { type: GraphQLList(MusicComposition) },
    isrcCode: { type: GraphQLList(GraphQLString) },
    inAlbum: { type: GraphQLList(MusicAlbum) },
    inPlaylist: { type: GraphQLList(MusicPlaylist) },
    byArtist: { type: GraphQLList(byArtist) },
    duration: { type: GraphQLList(Duration) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const MotorcycleDealer = new GraphQLObjectType({
  name: 'MotorcycleDealer',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const CheckOutAction = new GraphQLObjectType({
  name: 'CheckOutAction',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    inLanguage: { type: GraphQLList(Language) },
    recipient: { type: GraphQLList(recipient) },
    language: { type: GraphQLList(Language) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const BankAccount = new GraphQLObjectType({
  name: 'BankAccount',
  fields: () => ({
    amount: { type: GraphQLList(MonetaryAmount) },
    interestRate: { type: GraphQLList(QuantitativeValue) },
    feesAndCommissionsSpecification: { type: GraphQLList(GraphQLString) },
    annualPercentageRate: { type: GraphQLList(QuantitativeValue) },
    serviceArea: { type: GraphQLList(serviceArea) },
    provider: { type: GraphQLList(provider) },
    serviceAudience: { type: GraphQLList(Audience) },
    audience: { type: GraphQLList(Audience) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    hoursAvailable: { type: GraphQLList(OpeningHoursSpecification) },
    providerMobility: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    broker: { type: GraphQLList(broker) },
    serviceOutput: { type: GraphQLList(Thing) },
    logo: { type: GraphQLList(ImageObject) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    availableChannel: { type: GraphQLList(ServiceChannel) },
    review: { type: GraphQLList(Review) },
    serviceType: { type: GraphQLList(GraphQLString) },
    produces: { type: GraphQLList(Thing) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Duration = new GraphQLObjectType({
  name: 'Duration',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const RealEstateAgent = new GraphQLObjectType({
  name: 'RealEstateAgent',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const MapCategoryType = new GraphQLObjectType({
  name: 'MapCategoryType',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const SportsOrganization = new GraphQLObjectType({
  name: 'SportsOrganization',
  fields: () => ({
    sport: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const EndorseAction = new GraphQLObjectType({
  name: 'EndorseAction',
  fields: () => ({
    endorsee: { type: GraphQLList(endorsee) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const EducationalOrganization = new GraphQLObjectType({
  name: 'EducationalOrganization',
  fields: () => ({
    alumni: { type: GraphQLList(Person) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const CableOrSatelliteService = new GraphQLObjectType({
  name: 'CableOrSatelliteService',
  fields: () => ({
    serviceArea: { type: GraphQLList(serviceArea) },
    provider: { type: GraphQLList(provider) },
    serviceAudience: { type: GraphQLList(Audience) },
    audience: { type: GraphQLList(Audience) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    hoursAvailable: { type: GraphQLList(OpeningHoursSpecification) },
    providerMobility: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    broker: { type: GraphQLList(broker) },
    serviceOutput: { type: GraphQLList(Thing) },
    logo: { type: GraphQLList(ImageObject) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    availableChannel: { type: GraphQLList(ServiceChannel) },
    review: { type: GraphQLList(Review) },
    serviceType: { type: GraphQLList(GraphQLString) },
    produces: { type: GraphQLList(Thing) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const CurrencyConversionService = new GraphQLObjectType({
  name: 'CurrencyConversionService',
  fields: () => ({
    interestRate: { type: GraphQLList(QuantitativeValue) },
    feesAndCommissionsSpecification: { type: GraphQLList(GraphQLString) },
    annualPercentageRate: { type: GraphQLList(QuantitativeValue) },
    serviceArea: { type: GraphQLList(serviceArea) },
    provider: { type: GraphQLList(provider) },
    serviceAudience: { type: GraphQLList(Audience) },
    audience: { type: GraphQLList(Audience) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    hoursAvailable: { type: GraphQLList(OpeningHoursSpecification) },
    providerMobility: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    broker: { type: GraphQLList(broker) },
    serviceOutput: { type: GraphQLList(Thing) },
    logo: { type: GraphQLList(ImageObject) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    availableChannel: { type: GraphQLList(ServiceChannel) },
    review: { type: GraphQLList(Review) },
    serviceType: { type: GraphQLList(GraphQLString) },
    produces: { type: GraphQLList(Thing) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const HinduTemple = new GraphQLObjectType({
  name: 'HinduTemple',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const TVSeason = new GraphQLObjectType({
  name: 'TVSeason',
  fields: () => ({
    partOfTVSeries: { type: GraphQLList(TVSeries) },
    countryOfOrigin: { type: GraphQLList(Country) },
    actor: { type: GraphQLList(Person) },
    numberOfEpisodes: { type: GraphQLList(GraphQLInt) },
    trailer: { type: GraphQLList(VideoObject) },
    endDate: { type: GraphQLList(GraphQLString) },
    partOfSeries: { type: GraphQLList(CreativeWorkSeries) },
    episodes: { type: GraphQLList(Episode) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    productionCompany: { type: GraphQLList(Organization) },
    episode: { type: GraphQLList(Episode) },
    seasonNumber: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const SearchResultsPage = new GraphQLObjectType({
  name: 'SearchResultsPage',
  fields: () => ({
    speakable: { type: GraphQLList(SpeakableSpecification) },
    breadcrumb: { type: GraphQLList(BreadcrumbList) },
    significantLink: { type: GraphQLList(GraphQLString) },
    relatedLink: { type: GraphQLList(GraphQLString) },
    lastReviewed: { type: GraphQLList(GraphQLString) },
    mainContentOfPage: { type: GraphQLList(WebPageElement) },
    reviewedBy: { type: GraphQLList(reviewedBy) },
    primaryImageOfPage: { type: GraphQLList(ImageObject) },
    significantLinks: { type: GraphQLList(GraphQLString) },
    specialty: { type: GraphQLList(Specialty) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const UserBlocks = new GraphQLObjectType({
  name: 'UserBlocks',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const DanceEvent = new GraphQLObjectType({
  name: 'DanceEvent',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const BookStore = new GraphQLObjectType({
  name: 'BookStore',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const EntryPoint = new GraphQLObjectType({
  name: 'EntryPoint',
  fields: () => ({
    urlTemplate: { type: GraphQLList(GraphQLString) },
    actionApplication: { type: GraphQLList(SoftwareApplication) },
    application: { type: GraphQLList(SoftwareApplication) },
    actionPlatform: { type: GraphQLList(GraphQLString) },
    httpMethod: { type: GraphQLList(GraphQLString) },
    encodingType: { type: GraphQLList(GraphQLString) },
    contentType: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const SaleEvent = new GraphQLObjectType({
  name: 'SaleEvent',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const FoodEvent = new GraphQLObjectType({
  name: 'FoodEvent',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const OutletStore = new GraphQLObjectType({
  name: 'OutletStore',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const OrderAction = new GraphQLObjectType({
  name: 'OrderAction',
  fields: () => ({
    deliveryMethod: { type: GraphQLList(DeliveryMethod) },
    priceSpecification: { type: GraphQLList(PriceSpecification) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    price: { type: GraphQLList(GraphQLString) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const InviteAction = new GraphQLObjectType({
  name: 'InviteAction',
  fields: () => ({
    event: { type: GraphQLList(Event) },
    about: { type: GraphQLList(Thing) },
    inLanguage: { type: GraphQLList(Language) },
    recipient: { type: GraphQLList(recipient) },
    language: { type: GraphQLList(Language) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const TVEpisode = new GraphQLObjectType({
  name: 'TVEpisode',
  fields: () => ({
    partOfTVSeries: { type: GraphQLList(TVSeries) },
    subtitleLanguage: { type: GraphQLList(Language) },
    countryOfOrigin: { type: GraphQLList(Country) },
    actor: { type: GraphQLList(Person) },
    trailer: { type: GraphQLList(VideoObject) },
    partOfSeries: { type: GraphQLList(CreativeWorkSeries) },
    partOfSeason: { type: GraphQLList(CreativeWorkSeason) },
    musicBy: { type: GraphQLList(musicBy) },
    directors: { type: GraphQLList(Person) },
    episodeNumber: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    productionCompany: { type: GraphQLList(Organization) },
    actors: { type: GraphQLList(Person) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const MusicGroup = new GraphQLObjectType({
  name: 'MusicGroup',
  fields: () => ({
    albums: { type: GraphQLList(MusicAlbum) },
    musicGroupMember: { type: GraphQLList(Person) },
    track: { type: GraphQLList(track) },
    genre: { type: GraphQLList(GraphQLString) },
    tracks: { type: GraphQLList(MusicRecording) },
    album: { type: GraphQLList(MusicAlbum) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const AmusementPark = new GraphQLObjectType({
  name: 'AmusementPark',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const ContactPointOption = new GraphQLObjectType({
  name: 'ContactPointOption',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Casino = new GraphQLObjectType({
  name: 'Casino',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const SubscribeAction = new GraphQLObjectType({
  name: 'SubscribeAction',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const BusinessEvent = new GraphQLObjectType({
  name: 'BusinessEvent',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const AgreeAction = new GraphQLObjectType({
  name: 'AgreeAction',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const GameServer = new GraphQLObjectType({
  name: 'GameServer',
  fields: () => ({
    game: { type: GraphQLList(VideoGame) },
    playersOnline: { type: GraphQLList(GraphQLInt) },
    serverStatus: { type: GraphQLList(GameServerStatus) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const DepositAccount = new GraphQLObjectType({
  name: 'DepositAccount',
  fields: () => ({
    amount: { type: GraphQLList(MonetaryAmount) },
    interestRate: { type: GraphQLList(QuantitativeValue) },
    feesAndCommissionsSpecification: { type: GraphQLList(GraphQLString) },
    annualPercentageRate: { type: GraphQLList(QuantitativeValue) },
    serviceArea: { type: GraphQLList(serviceArea) },
    provider: { type: GraphQLList(provider) },
    serviceAudience: { type: GraphQLList(Audience) },
    audience: { type: GraphQLList(Audience) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    hoursAvailable: { type: GraphQLList(OpeningHoursSpecification) },
    providerMobility: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    broker: { type: GraphQLList(broker) },
    serviceOutput: { type: GraphQLList(Thing) },
    logo: { type: GraphQLList(ImageObject) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    availableChannel: { type: GraphQLList(ServiceChannel) },
    review: { type: GraphQLList(Review) },
    serviceType: { type: GraphQLList(GraphQLString) },
    produces: { type: GraphQLList(Thing) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const DigitalDocumentPermissionType = new GraphQLObjectType({
  name: 'DigitalDocumentPermissionType',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Motel = new GraphQLObjectType({
  name: 'Motel',
  fields: () => ({
    audience: { type: GraphQLList(Audience) },
    checkinTime: { type: GraphQLList(GraphQLString) },
    petsAllowed: { type: GraphQLList(GraphQLString) },
    availableLanguage: { type: GraphQLList(Language) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    starRating: { type: GraphQLList(Rating) },
    checkoutTime: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const Painting = new GraphQLObjectType({
  name: 'Painting',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ChildCare = new GraphQLObjectType({
  name: 'ChildCare',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const InternetCafe = new GraphQLObjectType({
  name: 'InternetCafe',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const PaymentStatusType = new GraphQLObjectType({
  name: 'PaymentStatusType',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const MusicAlbumReleaseType = new GraphQLObjectType({
  name: 'MusicAlbumReleaseType',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Pharmacy = new GraphQLObjectType({
  name: 'Pharmacy',
  fields: () => ({
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const DefenceEstablishment = new GraphQLObjectType({
  name: 'DefenceEstablishment',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const BreadcrumbList = new GraphQLObjectType({
  name: 'BreadcrumbList',
  fields: () => ({
    itemListElement: { type: GraphQLList(itemListElement) },
    itemListOrder: { type: GraphQLList(ItemListOrderType) },
    numberOfItems: { type: GraphQLList(GraphQLInt) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Church = new GraphQLObjectType({
  name: 'Church',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const LiquorStore = new GraphQLObjectType({
  name: 'LiquorStore',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const PublicationIssue = new GraphQLObjectType({
  name: 'PublicationIssue',
  fields: () => ({
    pagination: { type: GraphQLList(GraphQLString) },
    issueNumber: { type: GraphQLList(GraphQLString) },
    pageEnd: { type: GraphQLList(GraphQLString) },
    pageStart: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const GameServerStatus = new GraphQLObjectType({
  name: 'GameServerStatus',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Article = new GraphQLObjectType({
  name: 'Article',
  fields: () => ({
    printColumn: { type: GraphQLList(GraphQLString) },
    printEdition: { type: GraphQLList(GraphQLString) },
    printSection: { type: GraphQLList(GraphQLString) },
    printPage: { type: GraphQLList(GraphQLString) },
    dateline: { type: GraphQLList(GraphQLString) },
    pagination: { type: GraphQLList(GraphQLString) },
    wordCount: { type: GraphQLList(GraphQLInt) },
    speakable: { type: GraphQLList(SpeakableSpecification) },
    pageEnd: { type: GraphQLList(GraphQLString) },
    articleSection: { type: GraphQLList(GraphQLString) },
    articleBody: { type: GraphQLList(GraphQLString) },
    pageStart: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const UserTweets = new GraphQLObjectType({
  name: 'UserTweets',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Enumeration = new GraphQLObjectType({
  name: 'Enumeration',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const WebPageElement = new GraphQLObjectType({
  name: 'WebPageElement',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const VideoGame = new GraphQLObjectType({
  name: 'VideoGame',
  fields: () => ({
    gamePlatform: { type: GraphQLList(Thing) },
    gameServer: { type: GraphQLList(GameServer) },
    actor: { type: GraphQLList(Person) },
    trailer: { type: GraphQLList(VideoObject) },
    cheatCode: { type: GraphQLList(CreativeWork) },
    gameTip: { type: GraphQLList(CreativeWork) },
    musicBy: { type: GraphQLList(musicBy) },
    directors: { type: GraphQLList(Person) },
    playMode: { type: GraphQLList(GamePlayMode) },
    director: { type: GraphQLList(Person) },
    actors: { type: GraphQLList(Person) },
    downloadUrl: { type: GraphQLList(GraphQLString) },
    softwareRequirements: { type: GraphQLList(GraphQLString) },
    permissions: { type: GraphQLList(GraphQLString) },
    processorRequirements: { type: GraphQLList(GraphQLString) },
    availableOnDevice: { type: GraphQLList(GraphQLString) },
    featureList: { type: GraphQLList(GraphQLString) },
    applicationSubCategory: { type: GraphQLList(GraphQLString) },
    device: { type: GraphQLList(GraphQLString) },
    applicationCategory: { type: GraphQLList(GraphQLString) },
    softwareVersion: { type: GraphQLList(GraphQLString) },
    storageRequirements: { type: GraphQLList(GraphQLString) },
    applicationSuite: { type: GraphQLList(GraphQLString) },
    memoryRequirements: { type: GraphQLList(GraphQLString) },
    screenshot: { type: GraphQLList(ImageObject) },
    countriesSupported: { type: GraphQLList(GraphQLString) },
    softwareHelp: { type: GraphQLList(CreativeWork) },
    softwareAddOn: { type: GraphQLList(SoftwareApplication) },
    releaseNotes: { type: GraphQLList(GraphQLString) },
    supportingData: { type: GraphQLList(DataFeed) },
    requirements: { type: GraphQLList(GraphQLString) },
    countriesNotSupported: { type: GraphQLList(GraphQLString) },
    operatingSystem: { type: GraphQLList(GraphQLString) },
    fileSize: { type: GraphQLList(GraphQLString) },
    installUrl: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    gameItem: { type: GraphQLList(Thing) },
    characterAttribute: { type: GraphQLList(Thing) },
    gameLocation: { type: GraphQLList(gameLocation) },
    quest: { type: GraphQLList(Thing) },
    numberOfPlayers: { type: GraphQLList(QuantitativeValue) },
  })
});
const UserInteraction = new GraphQLObjectType({
  name: 'UserInteraction',
  fields: () => ({
    discusses: { type: GraphQLList(CreativeWork) },
    commentText: { type: GraphQLList(GraphQLString) },
    commentTime: { type: GraphQLList(GraphQLString) },
    creator: { type: GraphQLList(creator) },
    replyToUrl: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const MobilePhoneStore = new GraphQLObjectType({
  name: 'MobilePhoneStore',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const Airline = new GraphQLObjectType({
  name: 'Airline',
  fields: () => ({
    iataCode: { type: GraphQLList(GraphQLString) },
    boardingPolicy: { type: GraphQLList(BoardingPolicyType) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const LiveBlogPosting = new GraphQLObjectType({
  name: 'LiveBlogPosting',
  fields: () => ({
    coverageStartTime: { type: GraphQLList(GraphQLString) },
    coverageEndTime: { type: GraphQLList(GraphQLString) },
    liveBlogUpdate: { type: GraphQLList(BlogPosting) },
    sharedContent: { type: GraphQLList(CreativeWork) },
    pagination: { type: GraphQLList(GraphQLString) },
    wordCount: { type: GraphQLList(GraphQLInt) },
    speakable: { type: GraphQLList(SpeakableSpecification) },
    pageEnd: { type: GraphQLList(GraphQLString) },
    articleSection: { type: GraphQLList(GraphQLString) },
    articleBody: { type: GraphQLList(GraphQLString) },
    pageStart: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const BikeStore = new GraphQLObjectType({
  name: 'BikeStore',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const BuddhistTemple = new GraphQLObjectType({
  name: 'BuddhistTemple',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const MenuSection = new GraphQLObjectType({
  name: 'MenuSection',
  fields: () => ({
    hasMenuItem: { type: GraphQLList(MenuItem) },
    hasMenuSection: { type: GraphQLList(MenuSection) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const AutoRental = new GraphQLObjectType({
  name: 'AutoRental',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const AchieveAction = new GraphQLObjectType({
  name: 'AchieveAction',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const HotelRoom = new GraphQLObjectType({
  name: 'HotelRoom',
  fields: () => ({
    occupancy: { type: GraphQLList(QuantitativeValue) },
    bed: { type: GraphQLList(bed) },
    floorSize: { type: GraphQLList(QuantitativeValue) },
    petsAllowed: { type: GraphQLList(GraphQLString) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    numberOfRooms: { type: GraphQLList(QuantitativeValue) },
    permittedUsage: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const BroadcastEvent = new GraphQLObjectType({
  name: 'BroadcastEvent',
  fields: () => ({
    videoFormat: { type: GraphQLList(GraphQLString) },
    isLiveBroadcast: { type: GraphQLList(GraphQLBoolean) },
    broadcastOfEvent: { type: GraphQLList(Event) },
    publishedOn: { type: GraphQLList(BroadcastService) },
    free: { type: GraphQLList(GraphQLBoolean) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Zoo = new GraphQLObjectType({
  name: 'Zoo',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const WebSite = new GraphQLObjectType({
  name: 'WebSite',
  fields: () => ({
    issn: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Movie = new GraphQLObjectType({
  name: 'Movie',
  fields: () => ({
    actor: { type: GraphQLList(Person) },
    trailer: { type: GraphQLList(VideoObject) },
    subtitleLanguage: { type: GraphQLList(Language) },
    countryOfOrigin: { type: GraphQLList(Country) },
    musicBy: { type: GraphQLList(musicBy) },
    directors: { type: GraphQLList(Person) },
    director: { type: GraphQLList(Person) },
    productionCompany: { type: GraphQLList(Organization) },
    duration: { type: GraphQLList(Duration) },
    actors: { type: GraphQLList(Person) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const EventReservation = new GraphQLObjectType({
  name: 'EventReservation',
  fields: () => ({
    provider: { type: GraphQLList(provider) },
    programMembershipUsed: { type: GraphQLList(ProgramMembership) },
    reservationStatus: { type: GraphQLList(ReservationStatusType) },
    underName: { type: GraphQLList(underName) },
    bookingAgent: { type: GraphQLList(bookingAgent) },
    totalPrice: { type: GraphQLList(PriceSpecification) },
    reservationFor: { type: GraphQLList(Thing) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    broker: { type: GraphQLList(broker) },
    modifiedTime: { type: GraphQLList(GraphQLString) },
    bookingTime: { type: GraphQLList(GraphQLString) },
    reservationId: { type: GraphQLList(GraphQLString) },
    reservedTicket: { type: GraphQLList(Ticket) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const OrganizeAction = new GraphQLObjectType({
  name: 'OrganizeAction',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Audience = new GraphQLObjectType({
  name: 'Audience',
  fields: () => ({
    yearsInOperation: { type: GraphQLList(QuantitativeValue) },
    yearlyRevenue: { type: GraphQLList(QuantitativeValue) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    audienceType: { type: GraphQLList(GraphQLString) },
    geographicArea: { type: GraphQLList(AdministrativeArea) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Restaurant = new GraphQLObjectType({
  name: 'Restaurant',
  fields: () => ({
    servesCuisine: { type: GraphQLList(GraphQLString) },
    hasMenu: { type: GraphQLList(Menu) },
    menu: { type: GraphQLList(Menu) },
    starRating: { type: GraphQLList(Rating) },
    acceptsReservations: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const UseAction = new GraphQLObjectType({
  name: 'UseAction',
  fields: () => ({
    actionAccessibilityRequirement: { type: GraphQLList(ActionAccessSpecification) },
    expectsAcceptanceOf: { type: GraphQLList(Offer) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const APIReference = new GraphQLObjectType({
  name: 'APIReference',
  fields: () => ({
    executableLibraryName: { type: GraphQLList(GraphQLString) },
    assemblyVersion: { type: GraphQLList(GraphQLString) },
    programmingModel: { type: GraphQLList(GraphQLString) },
    assembly: { type: GraphQLList(GraphQLString) },
    targetPlatform: { type: GraphQLList(GraphQLString) },
    dependencies: { type: GraphQLList(GraphQLString) },
    proficiencyLevel: { type: GraphQLList(GraphQLString) },
    pagination: { type: GraphQLList(GraphQLString) },
    wordCount: { type: GraphQLList(GraphQLInt) },
    speakable: { type: GraphQLList(SpeakableSpecification) },
    pageEnd: { type: GraphQLList(GraphQLString) },
    articleSection: { type: GraphQLList(GraphQLString) },
    articleBody: { type: GraphQLList(GraphQLString) },
    pageStart: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const DepartmentStore = new GraphQLObjectType({
  name: 'DepartmentStore',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const FilmAction = new GraphQLObjectType({
  name: 'FilmAction',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const SoftwareApplication = new GraphQLObjectType({
  name: 'SoftwareApplication',
  fields: () => ({
    browserRequirements: { type: GraphQLList(GraphQLString) },
    downloadUrl: { type: GraphQLList(GraphQLString) },
    softwareRequirements: { type: GraphQLList(GraphQLString) },
    permissions: { type: GraphQLList(GraphQLString) },
    processorRequirements: { type: GraphQLList(GraphQLString) },
    availableOnDevice: { type: GraphQLList(GraphQLString) },
    featureList: { type: GraphQLList(GraphQLString) },
    applicationSubCategory: { type: GraphQLList(GraphQLString) },
    device: { type: GraphQLList(GraphQLString) },
    applicationCategory: { type: GraphQLList(GraphQLString) },
    softwareVersion: { type: GraphQLList(GraphQLString) },
    storageRequirements: { type: GraphQLList(GraphQLString) },
    applicationSuite: { type: GraphQLList(GraphQLString) },
    memoryRequirements: { type: GraphQLList(GraphQLString) },
    screenshot: { type: GraphQLList(ImageObject) },
    countriesSupported: { type: GraphQLList(GraphQLString) },
    softwareHelp: { type: GraphQLList(CreativeWork) },
    softwareAddOn: { type: GraphQLList(SoftwareApplication) },
    releaseNotes: { type: GraphQLList(GraphQLString) },
    supportingData: { type: GraphQLList(DataFeed) },
    requirements: { type: GraphQLList(GraphQLString) },
    countriesNotSupported: { type: GraphQLList(GraphQLString) },
    operatingSystem: { type: GraphQLList(GraphQLString) },
    fileSize: { type: GraphQLList(GraphQLString) },
    installUrl: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Code = new GraphQLObjectType({
  name: 'Code',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const SportingGoodsStore = new GraphQLObjectType({
  name: 'SportingGoodsStore',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const TextDigitalDocument = new GraphQLObjectType({
  name: 'TextDigitalDocument',
  fields: () => ({
    hasDigitalDocumentPermission: { type: GraphQLList(DigitalDocumentPermission) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const QuantitativeValueDistribution = new GraphQLObjectType({
  name: 'QuantitativeValueDistribution',
  fields: () => ({
    currency: { type: GraphQLList(GraphQLString) },
    percentile10: { type: GraphQLList(GraphQLFloat) },
    percentile25: { type: GraphQLList(GraphQLFloat) },
    median: { type: GraphQLList(GraphQLFloat) },
    duration: { type: GraphQLList(Duration) },
    percentile90: { type: GraphQLList(GraphQLFloat) },
    percentile75: { type: GraphQLList(GraphQLFloat) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Waterfall = new GraphQLObjectType({
  name: 'Waterfall',
  fields: () => ({
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const OfficeEquipmentStore = new GraphQLObjectType({
  name: 'OfficeEquipmentStore',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const AutoWash = new GraphQLObjectType({
  name: 'AutoWash',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const PlanAction = new GraphQLObjectType({
  name: 'PlanAction',
  fields: () => ({
    scheduledTime: { type: GraphQLList(GraphQLString) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const MovieTheater = new GraphQLObjectType({
  name: 'MovieTheater',
  fields: () => ({
    screenCount: { type: GraphQLList(GraphQLFloat) },
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    members: { type: GraphQLList(members) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    employees: { type: GraphQLList(Person) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
  })
});
const Bakery = new GraphQLObjectType({
  name: 'Bakery',
  fields: () => ({
    servesCuisine: { type: GraphQLList(GraphQLString) },
    hasMenu: { type: GraphQLList(Menu) },
    menu: { type: GraphQLList(Menu) },
    starRating: { type: GraphQLList(Rating) },
    acceptsReservations: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const GatedResidenceCommunity = new GraphQLObjectType({
  name: 'GatedResidenceCommunity',
  fields: () => ({
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Country = new GraphQLObjectType({
  name: 'Country',
  fields: () => ({
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const PlaceOfWorship = new GraphQLObjectType({
  name: 'PlaceOfWorship',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const HowToTip = new GraphQLObjectType({
  name: 'HowToTip',
  fields: () => ({
    nextItem: { type: GraphQLList(ListItem) },
    position: { type: GraphQLList(GraphQLString) },
    previousItem: { type: GraphQLList(ListItem) },
    item: { type: GraphQLList(Thing) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
  })
});
const ComputerLanguage = new GraphQLObjectType({
  name: 'ComputerLanguage',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const PerformanceRole = new GraphQLObjectType({
  name: 'PerformanceRole',
  fields: () => ({
    characterName: { type: GraphQLList(GraphQLString) },
    endDate: { type: GraphQLList(GraphQLString) },
    startDate: { type: GraphQLList(GraphQLString) },
    namedPosition: { type: GraphQLList(GraphQLString) },
    roleName: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const UnitPriceSpecification = new GraphQLObjectType({
  name: 'UnitPriceSpecification',
  fields: () => ({
    unitCode: { type: GraphQLList(GraphQLString) },
    billingIncrement: { type: GraphQLList(GraphQLFloat) },
    referenceQuantity: { type: GraphQLList(QuantitativeValue) },
    unitText: { type: GraphQLList(GraphQLString) },
    priceType: { type: GraphQLList(GraphQLString) },
    minPrice: { type: GraphQLList(GraphQLFloat) },
    eligibleTransactionVolume: { type: GraphQLList(PriceSpecification) },
    maxPrice: { type: GraphQLList(GraphQLFloat) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    eligibleQuantity: { type: GraphQLList(QuantitativeValue) },
    validFrom: { type: GraphQLList(GraphQLString) },
    validThrough: { type: GraphQLList(GraphQLString) },
    price: { type: GraphQLList(GraphQLString) },
    valueAddedTaxIncluded: { type: GraphQLList(GraphQLBoolean) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const PerformAction = new GraphQLObjectType({
  name: 'PerformAction',
  fields: () => ({
    entertainmentBusiness: { type: GraphQLList(EntertainmentBusiness) },
    audience: { type: GraphQLList(Audience) },
    event: { type: GraphQLList(Event) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const BedType = new GraphQLObjectType({
  name: 'BedType',
  fields: () => ({
    greater: { type: GraphQLList(QualitativeValue) },
    equal: { type: GraphQLList(QualitativeValue) },
    nonEqual: { type: GraphQLList(QualitativeValue) },
    greaterOrEqual: { type: GraphQLList(QualitativeValue) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    lesser: { type: GraphQLList(QualitativeValue) },
    valueReference: { type: GraphQLList(valueReference) },
    lesserOrEqual: { type: GraphQLList(QualitativeValue) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ClothingStore = new GraphQLObjectType({
  name: 'ClothingStore',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const Mountain = new GraphQLObjectType({
  name: 'Mountain',
  fields: () => ({
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const CivicStructure = new GraphQLObjectType({
  name: 'CivicStructure',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ReceiveAction = new GraphQLObjectType({
  name: 'ReceiveAction',
  fields: () => ({
    deliveryMethod: { type: GraphQLList(DeliveryMethod) },
    sender: { type: GraphQLList(sender) },
    toLocation: { type: GraphQLList(Place) },
    fromLocation: { type: GraphQLList(Place) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const VideoGameClip = new GraphQLObjectType({
  name: 'VideoGameClip',
  fields: () => ({
    actor: { type: GraphQLList(Person) },
    partOfEpisode: { type: GraphQLList(Episode) },
    partOfSeries: { type: GraphQLList(CreativeWorkSeries) },
    partOfSeason: { type: GraphQLList(CreativeWorkSeason) },
    musicBy: { type: GraphQLList(musicBy) },
    directors: { type: GraphQLList(Person) },
    director: { type: GraphQLList(Person) },
    actors: { type: GraphQLList(Person) },
    clipNumber: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const MusicStore = new GraphQLObjectType({
  name: 'MusicStore',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const Crematorium = new GraphQLObjectType({
  name: 'Crematorium',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const QuoteAction = new GraphQLObjectType({
  name: 'QuoteAction',
  fields: () => ({
    priceSpecification: { type: GraphQLList(PriceSpecification) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    price: { type: GraphQLList(GraphQLString) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ListItem = new GraphQLObjectType({
  name: 'ListItem',
  fields: () => ({
    beforeMedia: { type: GraphQLList(MediaObject) },
    prepTime: { type: GraphQLList(Duration) },
    tool: { type: GraphQLList(HowToTool) },
    performTime: { type: GraphQLList(Duration) },
    totalTime: { type: GraphQLList(Duration) },
    supply: { type: GraphQLList(HowToSupply) },
    afterMedia: { type: GraphQLList(MediaObject) },
    duringMedia: { type: GraphQLList(MediaObject) },
    nextItem: { type: GraphQLList(ListItem) },
    position: { type: GraphQLList(GraphQLString) },
    previousItem: { type: GraphQLList(ListItem) },
    item: { type: GraphQLList(Thing) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
  })
});
const ContactPage = new GraphQLObjectType({
  name: 'ContactPage',
  fields: () => ({
    speakable: { type: GraphQLList(SpeakableSpecification) },
    breadcrumb: { type: GraphQLList(BreadcrumbList) },
    significantLink: { type: GraphQLList(GraphQLString) },
    relatedLink: { type: GraphQLList(GraphQLString) },
    lastReviewed: { type: GraphQLList(GraphQLString) },
    mainContentOfPage: { type: GraphQLList(WebPageElement) },
    reviewedBy: { type: GraphQLList(reviewedBy) },
    primaryImageOfPage: { type: GraphQLList(ImageObject) },
    significantLinks: { type: GraphQLList(GraphQLString) },
    specialty: { type: GraphQLList(Specialty) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const WebApplication = new GraphQLObjectType({
  name: 'WebApplication',
  fields: () => ({
    browserRequirements: { type: GraphQLList(GraphQLString) },
    downloadUrl: { type: GraphQLList(GraphQLString) },
    softwareRequirements: { type: GraphQLList(GraphQLString) },
    permissions: { type: GraphQLList(GraphQLString) },
    processorRequirements: { type: GraphQLList(GraphQLString) },
    availableOnDevice: { type: GraphQLList(GraphQLString) },
    featureList: { type: GraphQLList(GraphQLString) },
    applicationSubCategory: { type: GraphQLList(GraphQLString) },
    device: { type: GraphQLList(GraphQLString) },
    applicationCategory: { type: GraphQLList(GraphQLString) },
    softwareVersion: { type: GraphQLList(GraphQLString) },
    storageRequirements: { type: GraphQLList(GraphQLString) },
    applicationSuite: { type: GraphQLList(GraphQLString) },
    memoryRequirements: { type: GraphQLList(GraphQLString) },
    screenshot: { type: GraphQLList(ImageObject) },
    countriesSupported: { type: GraphQLList(GraphQLString) },
    softwareHelp: { type: GraphQLList(CreativeWork) },
    softwareAddOn: { type: GraphQLList(SoftwareApplication) },
    releaseNotes: { type: GraphQLList(GraphQLString) },
    supportingData: { type: GraphQLList(DataFeed) },
    requirements: { type: GraphQLList(GraphQLString) },
    countriesNotSupported: { type: GraphQLList(GraphQLString) },
    operatingSystem: { type: GraphQLList(GraphQLString) },
    fileSize: { type: GraphQLList(GraphQLString) },
    installUrl: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const BroadcastFrequencySpecification = new GraphQLObjectType({
  name: 'BroadcastFrequencySpecification',
  fields: () => ({
    broadcastFrequencyValue: { type: GraphQLList(QuantitativeValue) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const BlogPosting = new GraphQLObjectType({
  name: 'BlogPosting',
  fields: () => ({
    sharedContent: { type: GraphQLList(CreativeWork) },
    pagination: { type: GraphQLList(GraphQLString) },
    wordCount: { type: GraphQLList(GraphQLInt) },
    speakable: { type: GraphQLList(SpeakableSpecification) },
    pageEnd: { type: GraphQLList(GraphQLString) },
    articleSection: { type: GraphQLList(GraphQLString) },
    articleBody: { type: GraphQLList(GraphQLString) },
    pageStart: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const LodgingReservation = new GraphQLObjectType({
  name: 'LodgingReservation',
  fields: () => ({
    checkinTime: { type: GraphQLList(GraphQLString) },
    numChildren: { type: GraphQLList(QuantitativeValue) },
    lodgingUnitDescription: { type: GraphQLList(GraphQLString) },
    checkoutTime: { type: GraphQLList(GraphQLString) },
    lodgingUnitType: { type: GraphQLList(QualitativeValue) },
    numAdults: { type: GraphQLList(QuantitativeValue) },
    provider: { type: GraphQLList(provider) },
    programMembershipUsed: { type: GraphQLList(ProgramMembership) },
    reservationStatus: { type: GraphQLList(ReservationStatusType) },
    underName: { type: GraphQLList(underName) },
    bookingAgent: { type: GraphQLList(bookingAgent) },
    totalPrice: { type: GraphQLList(PriceSpecification) },
    reservationFor: { type: GraphQLList(Thing) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    broker: { type: GraphQLList(broker) },
    modifiedTime: { type: GraphQLList(GraphQLString) },
    bookingTime: { type: GraphQLList(GraphQLString) },
    reservationId: { type: GraphQLList(GraphQLString) },
    reservedTicket: { type: GraphQLList(Ticket) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const PreOrderAction = new GraphQLObjectType({
  name: 'PreOrderAction',
  fields: () => ({
    priceSpecification: { type: GraphQLList(PriceSpecification) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    price: { type: GraphQLList(GraphQLString) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const MediaSubscription = new GraphQLObjectType({
  name: 'MediaSubscription',
  fields: () => ({
    authenticator: { type: GraphQLList(Organization) },
    expectsAcceptanceOf: { type: GraphQLList(Offer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const PresentationDigitalDocument = new GraphQLObjectType({
  name: 'PresentationDigitalDocument',
  fields: () => ({
    hasDigitalDocumentPermission: { type: GraphQLList(DigitalDocumentPermission) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Report = new GraphQLObjectType({
  name: 'Report',
  fields: () => ({
    reportNumber: { type: GraphQLList(GraphQLString) },
    pagination: { type: GraphQLList(GraphQLString) },
    wordCount: { type: GraphQLList(GraphQLInt) },
    speakable: { type: GraphQLList(SpeakableSpecification) },
    pageEnd: { type: GraphQLList(GraphQLString) },
    articleSection: { type: GraphQLList(GraphQLString) },
    articleBody: { type: GraphQLList(GraphQLString) },
    pageStart: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Book = new GraphQLObjectType({
  name: 'Book',
  fields: () => ({
    isbn: { type: GraphQLList(GraphQLString) },
    bookEdition: { type: GraphQLList(GraphQLString) },
    bookFormat: { type: GraphQLList(BookFormatType) },
    illustrator: { type: GraphQLList(Person) },
    numberOfPages: { type: GraphQLList(GraphQLInt) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const OfferItemCondition = new GraphQLObjectType({
  name: 'OfferItemCondition',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const LocationFeatureSpecification = new GraphQLObjectType({
  name: 'LocationFeatureSpecification',
  fields: () => ({
    hoursAvailable: { type: GraphQLList(OpeningHoursSpecification) },
    validFrom: { type: GraphQLList(GraphQLString) },
    validThrough: { type: GraphQLList(GraphQLString) },
    unitCode: { type: GraphQLList(GraphQLString) },
    minValue: { type: GraphQLList(GraphQLFloat) },
    propertyID: { type: GraphQLList(GraphQLString) },
    value: { type: GraphQLList(StructuredValue) },
    valueReference: { type: GraphQLList(valueReference) },
    maxValue: { type: GraphQLList(GraphQLFloat) },
    unitText: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const MusicRelease = new GraphQLObjectType({
  name: 'MusicRelease',
  fields: () => ({
    recordLabel: { type: GraphQLList(Organization) },
    catalogNumber: { type: GraphQLList(GraphQLString) },
    creditedTo: { type: GraphQLList(creditedTo) },
    releaseOf: { type: GraphQLList(MusicAlbum) },
    duration: { type: GraphQLList(Duration) },
    musicReleaseFormat: { type: GraphQLList(MusicReleaseFormatType) },
    numTracks: { type: GraphQLList(GraphQLInt) },
    track: { type: GraphQLList(track) },
    tracks: { type: GraphQLList(MusicRecording) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const TechArticle = new GraphQLObjectType({
  name: 'TechArticle',
  fields: () => ({
    dependencies: { type: GraphQLList(GraphQLString) },
    proficiencyLevel: { type: GraphQLList(GraphQLString) },
    pagination: { type: GraphQLList(GraphQLString) },
    wordCount: { type: GraphQLList(GraphQLInt) },
    speakable: { type: GraphQLList(SpeakableSpecification) },
    pageEnd: { type: GraphQLList(GraphQLString) },
    articleSection: { type: GraphQLList(GraphQLString) },
    articleBody: { type: GraphQLList(GraphQLString) },
    pageStart: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Sculpture = new GraphQLObjectType({
  name: 'Sculpture',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ComputerStore = new GraphQLObjectType({
  name: 'ComputerStore',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const RadioStation = new GraphQLObjectType({
  name: 'RadioStation',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const Map = new GraphQLObjectType({
  name: 'Map',
  fields: () => ({
    mapType: { type: GraphQLList(MapCategoryType) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const GolfCourse = new GraphQLObjectType({
  name: 'GolfCourse',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const DepartAction = new GraphQLObjectType({
  name: 'DepartAction',
  fields: () => ({
    toLocation: { type: GraphQLList(Place) },
    fromLocation: { type: GraphQLList(Place) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ActionAccessSpecification = new GraphQLObjectType({
  name: 'ActionAccessSpecification',
  fields: () => ({
    availabilityStarts: { type: GraphQLList(GraphQLString) },
    requiresSubscription: { type: GraphQLList(MediaSubscription) },
    category: { type: GraphQLList(Thing) },
    availabilityEnds: { type: GraphQLList(GraphQLString) },
    expectsAcceptanceOf: { type: GraphQLList(Offer) },
    eligibleRegion: { type: GraphQLList(eligibleRegion) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Comment = new GraphQLObjectType({
  name: 'Comment',
  fields: () => ({
    upvoteCount: { type: GraphQLList(GraphQLInt) },
    parentItem: { type: GraphQLList(Question) },
    downvoteCount: { type: GraphQLList(GraphQLInt) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ShoeStore = new GraphQLObjectType({
  name: 'ShoeStore',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const SuspendAction = new GraphQLObjectType({
  name: 'SuspendAction',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const WPSideBar = new GraphQLObjectType({
  name: 'WPSideBar',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const FlightReservation = new GraphQLObjectType({
  name: 'FlightReservation',
  fields: () => ({
    boardingGroup: { type: GraphQLList(GraphQLString) },
    passengerSequenceNumber: { type: GraphQLList(GraphQLString) },
    securityScreening: { type: GraphQLList(GraphQLString) },
    passengerPriorityStatus: { type: GraphQLList(QualitativeValue) },
    provider: { type: GraphQLList(provider) },
    programMembershipUsed: { type: GraphQLList(ProgramMembership) },
    reservationStatus: { type: GraphQLList(ReservationStatusType) },
    underName: { type: GraphQLList(underName) },
    bookingAgent: { type: GraphQLList(bookingAgent) },
    totalPrice: { type: GraphQLList(PriceSpecification) },
    reservationFor: { type: GraphQLList(Thing) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    broker: { type: GraphQLList(broker) },
    modifiedTime: { type: GraphQLList(GraphQLString) },
    bookingTime: { type: GraphQLList(GraphQLString) },
    reservationId: { type: GraphQLList(GraphQLString) },
    reservedTicket: { type: GraphQLList(Ticket) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const AlignmentObject = new GraphQLObjectType({
  name: 'AlignmentObject',
  fields: () => ({
    targetDescription: { type: GraphQLList(GraphQLString) },
    alignmentType: { type: GraphQLList(GraphQLString) },
    targetUrl: { type: GraphQLList(GraphQLString) },
    targetName: { type: GraphQLList(GraphQLString) },
    educationalFramework: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const SellAction = new GraphQLObjectType({
  name: 'SellAction',
  fields: () => ({
    buyer: { type: GraphQLList(Person) },
    warrantyPromise: { type: GraphQLList(WarrantyPromise) },
    priceSpecification: { type: GraphQLList(PriceSpecification) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    price: { type: GraphQLList(GraphQLString) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const PetStore = new GraphQLObjectType({
  name: 'PetStore',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const OnDemandEvent = new GraphQLObjectType({
  name: 'OnDemandEvent',
  fields: () => ({
    publishedOn: { type: GraphQLList(BroadcastService) },
    free: { type: GraphQLList(GraphQLBoolean) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const AutoDealer = new GraphQLObjectType({
  name: 'AutoDealer',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const ChooseAction = new GraphQLObjectType({
  name: 'ChooseAction',
  fields: () => ({
    candidate: { type: GraphQLList(Person) },
    actionOption: { type: GraphQLList(Thing) },
    option: { type: GraphQLList(Thing) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const RestrictedDiet = new GraphQLObjectType({
  name: 'RestrictedDiet',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const GovernmentOffice = new GraphQLObjectType({
  name: 'GovernmentOffice',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const Place = new GraphQLObjectType({
  name: 'Place',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const QualitativeValue = new GraphQLObjectType({
  name: 'QualitativeValue',
  fields: () => ({
    greater: { type: GraphQLList(QualitativeValue) },
    equal: { type: GraphQLList(QualitativeValue) },
    nonEqual: { type: GraphQLList(QualitativeValue) },
    greaterOrEqual: { type: GraphQLList(QualitativeValue) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    lesser: { type: GraphQLList(QualitativeValue) },
    valueReference: { type: GraphQLList(valueReference) },
    lesserOrEqual: { type: GraphQLList(QualitativeValue) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const SendAction = new GraphQLObjectType({
  name: 'SendAction',
  fields: () => ({
    recipient: { type: GraphQLList(recipient) },
    deliveryMethod: { type: GraphQLList(DeliveryMethod) },
    toLocation: { type: GraphQLList(Place) },
    fromLocation: { type: GraphQLList(Place) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const LeaveAction = new GraphQLObjectType({
  name: 'LeaveAction',
  fields: () => ({
    event: { type: GraphQLList(Event) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const GasStation = new GraphQLObjectType({
  name: 'GasStation',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const Mosque = new GraphQLObjectType({
  name: 'Mosque',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const CommentAction = new GraphQLObjectType({
  name: 'CommentAction',
  fields: () => ({
    resultComment: { type: GraphQLList(Comment) },
    about: { type: GraphQLList(Thing) },
    inLanguage: { type: GraphQLList(Language) },
    recipient: { type: GraphQLList(recipient) },
    language: { type: GraphQLList(Language) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Library = new GraphQLObjectType({
  name: 'Library',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const TouristInformationCenter = new GraphQLObjectType({
  name: 'TouristInformationCenter',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const MusicComposition = new GraphQLObjectType({
  name: 'MusicComposition',
  fields: () => ({
    musicCompositionForm: { type: GraphQLList(GraphQLString) },
    includedComposition: { type: GraphQLList(MusicComposition) },
    lyricist: { type: GraphQLList(Person) },
    recordedAs: { type: GraphQLList(MusicRecording) },
    firstPerformance: { type: GraphQLList(Event) },
    musicArrangement: { type: GraphQLList(MusicComposition) },
    lyrics: { type: GraphQLList(CreativeWork) },
    iswcCode: { type: GraphQLList(GraphQLString) },
    composer: { type: GraphQLList(composer) },
    musicalKey: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ProfessionalService = new GraphQLObjectType({
  name: 'ProfessionalService',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const Aquarium = new GraphQLObjectType({
  name: 'Aquarium',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const SelfStorage = new GraphQLObjectType({
  name: 'SelfStorage',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const ScholarlyArticle = new GraphQLObjectType({
  name: 'ScholarlyArticle',
  fields: () => ({
    pagination: { type: GraphQLList(GraphQLString) },
    wordCount: { type: GraphQLList(GraphQLInt) },
    speakable: { type: GraphQLList(SpeakableSpecification) },
    pageEnd: { type: GraphQLList(GraphQLString) },
    articleSection: { type: GraphQLList(GraphQLString) },
    articleBody: { type: GraphQLList(GraphQLString) },
    pageStart: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const GeoShape = new GraphQLObjectType({
  name: 'GeoShape',
  fields: () => ({
    geoRadius: { type: GraphQLList(Distance) },
    geoMidpoint: { type: GraphQLList(GeoCoordinates) },
    address: { type: GraphQLList(PostalAddress) },
    circle: { type: GraphQLList(GraphQLString) },
    box: { type: GraphQLList(GraphQLString) },
    addressCountry: { type: GraphQLList(Country) },
    postalCode: { type: GraphQLList(GraphQLString) },
    elevation: { type: GraphQLList(GraphQLString) },
    polygon: { type: GraphQLList(GraphQLString) },
    line: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const EntertainmentBusiness = new GraphQLObjectType({
  name: 'EntertainmentBusiness',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const BroadcastChannel = new GraphQLObjectType({
  name: 'BroadcastChannel',
  fields: () => ({
    broadcastFrequency: { type: GraphQLList(BroadcastFrequencySpecification) },
    broadcastChannelId: { type: GraphQLList(GraphQLString) },
    broadcastServiceTier: { type: GraphQLList(GraphQLString) },
    inBroadcastLineup: { type: GraphQLList(CableOrSatelliteService) },
    providesBroadcastService: { type: GraphQLList(BroadcastService) },
    genre: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Florist = new GraphQLObjectType({
  name: 'Florist',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const Mass = new GraphQLObjectType({
  name: 'Mass',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const HowToTool = new GraphQLObjectType({
  name: 'HowToTool',
  fields: () => ({
    requiredQuantity: { type: GraphQLList(QuantitativeValue) },
    nextItem: { type: GraphQLList(ListItem) },
    position: { type: GraphQLList(GraphQLString) },
    previousItem: { type: GraphQLList(ListItem) },
    item: { type: GraphQLList(Thing) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const PaymentMethod = new GraphQLObjectType({
  name: 'PaymentMethod',
  fields: () => ({
    loanTerm: { type: GraphQLList(QuantitativeValue) },
    currency: { type: GraphQLList(GraphQLString) },
    amount: { type: GraphQLList(MonetaryAmount) },
    requiredCollateral: { type: GraphQLList(Thing) },
    interestRate: { type: GraphQLList(QuantitativeValue) },
    feesAndCommissionsSpecification: { type: GraphQLList(GraphQLString) },
    annualPercentageRate: { type: GraphQLList(QuantitativeValue) },
    serviceArea: { type: GraphQLList(serviceArea) },
    provider: { type: GraphQLList(provider) },
    serviceAudience: { type: GraphQLList(Audience) },
    audience: { type: GraphQLList(Audience) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    hoursAvailable: { type: GraphQLList(OpeningHoursSpecification) },
    providerMobility: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    broker: { type: GraphQLList(broker) },
    serviceOutput: { type: GraphQLList(Thing) },
    logo: { type: GraphQLList(ImageObject) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    availableChannel: { type: GraphQLList(ServiceChannel) },
    review: { type: GraphQLList(Review) },
    serviceType: { type: GraphQLList(GraphQLString) },
    produces: { type: GraphQLList(Thing) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const UserPlusOnes = new GraphQLObjectType({
  name: 'UserPlusOnes',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Barcode = new GraphQLObjectType({
  name: 'Barcode',
  fields: () => ({
    exifData: { type: GraphQLList(GraphQLString) },
    representativeOfPage: { type: GraphQLList(GraphQLBoolean) },
    thumbnail: { type: GraphQLList(ImageObject) },
    caption: { type: GraphQLList(MediaObject) },
    startTime: { type: GraphQLList(GraphQLString) },
    uploadDate: { type: GraphQLList(GraphQLString) },
    playerType: { type: GraphQLList(GraphQLString) },
    height: { type: GraphQLList(height) },
    bitrate: { type: GraphQLList(GraphQLString) },
    requiresSubscription: { type: GraphQLList(MediaSubscription) },
    regionsAllowed: { type: GraphQLList(Place) },
    endTime: { type: GraphQLList(GraphQLString) },
    contentSize: { type: GraphQLList(GraphQLString) },
    embedUrl: { type: GraphQLList(GraphQLString) },
    width: { type: GraphQLList(width) },
    contentUrl: { type: GraphQLList(GraphQLString) },
    associatedArticle: { type: GraphQLList(NewsArticle) },
    productionCompany: { type: GraphQLList(Organization) },
    duration: { type: GraphQLList(Duration) },
    encodesCreativeWork: { type: GraphQLList(CreativeWork) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const WebPage = new GraphQLObjectType({
  name: 'WebPage',
  fields: () => ({
    speakable: { type: GraphQLList(SpeakableSpecification) },
    breadcrumb: { type: GraphQLList(BreadcrumbList) },
    significantLink: { type: GraphQLList(GraphQLString) },
    relatedLink: { type: GraphQLList(GraphQLString) },
    lastReviewed: { type: GraphQLList(GraphQLString) },
    mainContentOfPage: { type: GraphQLList(WebPageElement) },
    reviewedBy: { type: GraphQLList(reviewedBy) },
    primaryImageOfPage: { type: GraphQLList(ImageObject) },
    significantLinks: { type: GraphQLList(GraphQLString) },
    specialty: { type: GraphQLList(Specialty) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Residence = new GraphQLObjectType({
  name: 'Residence',
  fields: () => ({
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const UserPageVisits = new GraphQLObjectType({
  name: 'UserPageVisits',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Continent = new GraphQLObjectType({
  name: 'Continent',
  fields: () => ({
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const BusTrip = new GraphQLObjectType({
  name: 'BusTrip',
  fields: () => ({
    busName: { type: GraphQLList(GraphQLString) },
    departureBusStop: { type: GraphQLList(departureBusStop) },
    arrivalBusStop: { type: GraphQLList(arrivalBusStop) },
    busNumber: { type: GraphQLList(GraphQLString) },
    provider: { type: GraphQLList(provider) },
    offers: { type: GraphQLList(Offer) },
    arrivalTime: { type: GraphQLList(GraphQLString) },
    departureTime: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const UnRegisterAction = new GraphQLObjectType({
  name: 'UnRegisterAction',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const LoseAction = new GraphQLObjectType({
  name: 'LoseAction',
  fields: () => ({
    winner: { type: GraphQLList(Person) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ShoppingCenter = new GraphQLObjectType({
  name: 'ShoppingCenter',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const Flight = new GraphQLObjectType({
  name: 'Flight',
  fields: () => ({
    arrivalAirport: { type: GraphQLList(Airport) },
    arrivalGate: { type: GraphQLList(GraphQLString) },
    carrier: { type: GraphQLList(Organization) },
    boardingPolicy: { type: GraphQLList(BoardingPolicyType) },
    aircraft: { type: GraphQLList(Vehicle) },
    seller: { type: GraphQLList(seller) },
    webCheckinTime: { type: GraphQLList(GraphQLString) },
    mealService: { type: GraphQLList(GraphQLString) },
    departureGate: { type: GraphQLList(GraphQLString) },
    departureTerminal: { type: GraphQLList(GraphQLString) },
    estimatedFlightDuration: { type: GraphQLList(Duration) },
    flightDistance: { type: GraphQLList(Distance) },
    arrivalTerminal: { type: GraphQLList(GraphQLString) },
    departureAirport: { type: GraphQLList(Airport) },
    flightNumber: { type: GraphQLList(GraphQLString) },
    provider: { type: GraphQLList(provider) },
    offers: { type: GraphQLList(Offer) },
    arrivalTime: { type: GraphQLList(GraphQLString) },
    departureTime: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const HowToStep = new GraphQLObjectType({
  name: 'HowToStep',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    nextItem: { type: GraphQLList(ListItem) },
    previousItem: { type: GraphQLList(ListItem) },
    item: { type: GraphQLList(Thing) },
    itemListElement: { type: GraphQLList(itemListElement) },
    itemListOrder: { type: GraphQLList(ItemListOrderType) },
    numberOfItems: { type: GraphQLList(GraphQLInt) },
  })
});
const OfferCatalog = new GraphQLObjectType({
  name: 'OfferCatalog',
  fields: () => ({
    itemListElement: { type: GraphQLList(itemListElement) },
    itemListOrder: { type: GraphQLList(ItemListOrderType) },
    numberOfItems: { type: GraphQLList(GraphQLInt) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const CreativeWorkSeries = new GraphQLObjectType({
  name: 'CreativeWorkSeries',
  fields: () => ({
    seasons: { type: GraphQLList(CreativeWorkSeason) },
    actor: { type: GraphQLList(Person) },
    numberOfEpisodes: { type: GraphQLList(GraphQLInt) },
    trailer: { type: GraphQLList(VideoObject) },
    season: { type: GraphQLList(CreativeWorkSeason) },
    episodes: { type: GraphQLList(Episode) },
    countryOfOrigin: { type: GraphQLList(Country) },
    musicBy: { type: GraphQLList(musicBy) },
    containsSeason: { type: GraphQLList(CreativeWorkSeason) },
    directors: { type: GraphQLList(Person) },
    numberOfSeasons: { type: GraphQLList(GraphQLInt) },
    director: { type: GraphQLList(Person) },
    productionCompany: { type: GraphQLList(Organization) },
    actors: { type: GraphQLList(Person) },
    episode: { type: GraphQLList(Episode) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    endDate: { type: GraphQLList(GraphQLString) },
    issn: { type: GraphQLList(GraphQLString) },
    startDate: { type: GraphQLList(GraphQLString) },
  })
});
const NightClub = new GraphQLObjectType({
  name: 'NightClub',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const ConfirmAction = new GraphQLObjectType({
  name: 'ConfirmAction',
  fields: () => ({
    event: { type: GraphQLList(Event) },
    about: { type: GraphQLList(Thing) },
    inLanguage: { type: GraphQLList(Language) },
    recipient: { type: GraphQLList(recipient) },
    language: { type: GraphQLList(Language) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const DataFeed = new GraphQLObjectType({
  name: 'DataFeed',
  fields: () => ({
    dataFeedElement: { type: GraphQLList(dataFeedElement) },
    includedInDataCatalog: { type: GraphQLList(DataCatalog) },
    datasetTimeInterval: { type: GraphQLList(GraphQLString) },
    issn: { type: GraphQLList(GraphQLString) },
    catalog: { type: GraphQLList(DataCatalog) },
    includedDataCatalog: { type: GraphQLList(DataCatalog) },
    distribution: { type: GraphQLList(DataDownload) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const State = new GraphQLObjectType({
  name: 'State',
  fields: () => ({
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Playground = new GraphQLObjectType({
  name: 'Playground',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const AppendAction = new GraphQLObjectType({
  name: 'AppendAction',
  fields: () => ({
    toLocation: { type: GraphQLList(Place) },
    collection: { type: GraphQLList(Thing) },
    targetCollection: { type: GraphQLList(Thing) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const InteractionCounter = new GraphQLObjectType({
  name: 'InteractionCounter',
  fields: () => ({
    interactionService: { type: GraphQLList(interactionService) },
    userInteractionCount: { type: GraphQLList(GraphQLInt) },
    interactionType: { type: GraphQLList(Action) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ParkingFacility = new GraphQLObjectType({
  name: 'ParkingFacility',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const CookAction = new GraphQLObjectType({
  name: 'CookAction',
  fields: () => ({
    foodEstablishment: { type: GraphQLList(foodEstablishment) },
    recipe: { type: GraphQLList(Recipe) },
    foodEvent: { type: GraphQLList(FoodEvent) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const AuthorizeAction = new GraphQLObjectType({
  name: 'AuthorizeAction',
  fields: () => ({
    recipient: { type: GraphQLList(recipient) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const BookSeries = new GraphQLObjectType({
  name: 'BookSeries',
  fields: () => ({
    endDate: { type: GraphQLList(GraphQLString) },
    issn: { type: GraphQLList(GraphQLString) },
    startDate: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
  })
});
const UserDownloads = new GraphQLObjectType({
  name: 'UserDownloads',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const PawnShop = new GraphQLObjectType({
  name: 'PawnShop',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const AssignAction = new GraphQLObjectType({
  name: 'AssignAction',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const PayAction = new GraphQLObjectType({
  name: 'PayAction',
  fields: () => ({
    recipient: { type: GraphQLList(recipient) },
    priceSpecification: { type: GraphQLList(PriceSpecification) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    price: { type: GraphQLList(GraphQLString) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const HighSchool = new GraphQLObjectType({
  name: 'HighSchool',
  fields: () => ({
    alumni: { type: GraphQLList(Person) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const TypeAndQuantityNode = new GraphQLObjectType({
  name: 'TypeAndQuantityNode',
  fields: () => ({
    unitCode: { type: GraphQLList(GraphQLString) },
    typeOfGood: { type: GraphQLList(typeOfGood) },
    amountOfThisGood: { type: GraphQLList(GraphQLFloat) },
    businessFunction: { type: GraphQLList(BusinessFunction) },
    unitText: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const SteeringPositionValue = new GraphQLObjectType({
  name: 'SteeringPositionValue',
  fields: () => ({
    greater: { type: GraphQLList(QualitativeValue) },
    equal: { type: GraphQLList(QualitativeValue) },
    nonEqual: { type: GraphQLList(QualitativeValue) },
    greaterOrEqual: { type: GraphQLList(QualitativeValue) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    lesser: { type: GraphQLList(QualitativeValue) },
    valueReference: { type: GraphQLList(valueReference) },
    lesserOrEqual: { type: GraphQLList(QualitativeValue) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const SportsClub = new GraphQLObjectType({
  name: 'SportsClub',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const TrainTrip = new GraphQLObjectType({
  name: 'TrainTrip',
  fields: () => ({
    departureStation: { type: GraphQLList(TrainStation) },
    arrivalPlatform: { type: GraphQLList(GraphQLString) },
    departurePlatform: { type: GraphQLList(GraphQLString) },
    trainName: { type: GraphQLList(GraphQLString) },
    trainNumber: { type: GraphQLList(GraphQLString) },
    arrivalStation: { type: GraphQLList(TrainStation) },
    provider: { type: GraphQLList(provider) },
    offers: { type: GraphQLList(Offer) },
    arrivalTime: { type: GraphQLList(GraphQLString) },
    departureTime: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Bridge = new GraphQLObjectType({
  name: 'Bridge',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const TrainStation = new GraphQLObjectType({
  name: 'TrainStation',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Conversation = new GraphQLObjectType({
  name: 'Conversation',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const DatedMoneySpecification = new GraphQLObjectType({
  name: 'DatedMoneySpecification',
  fields: () => ({
    endDate: { type: GraphQLList(GraphQLString) },
    currency: { type: GraphQLList(GraphQLString) },
    amount: { type: GraphQLList(MonetaryAmount) },
    startDate: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ReserveAction = new GraphQLObjectType({
  name: 'ReserveAction',
  fields: () => ({
    scheduledTime: { type: GraphQLList(GraphQLString) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const SoftwareSourceCode = new GraphQLObjectType({
  name: 'SoftwareSourceCode',
  fields: () => ({
    targetProduct: { type: GraphQLList(SoftwareApplication) },
    codeRepository: { type: GraphQLList(GraphQLString) },
    programmingLanguage: { type: GraphQLList(ComputerLanguage) },
    codeSampleType: { type: GraphQLList(GraphQLString) },
    runtimePlatform: { type: GraphQLList(GraphQLString) },
    sampleType: { type: GraphQLList(GraphQLString) },
    runtime: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const PaymentService = new GraphQLObjectType({
  name: 'PaymentService',
  fields: () => ({
    interestRate: { type: GraphQLList(QuantitativeValue) },
    feesAndCommissionsSpecification: { type: GraphQLList(GraphQLString) },
    annualPercentageRate: { type: GraphQLList(QuantitativeValue) },
    serviceArea: { type: GraphQLList(serviceArea) },
    provider: { type: GraphQLList(provider) },
    serviceAudience: { type: GraphQLList(Audience) },
    audience: { type: GraphQLList(Audience) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    hoursAvailable: { type: GraphQLList(OpeningHoursSpecification) },
    providerMobility: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    broker: { type: GraphQLList(broker) },
    serviceOutput: { type: GraphQLList(Thing) },
    logo: { type: GraphQLList(ImageObject) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    availableChannel: { type: GraphQLList(ServiceChannel) },
    review: { type: GraphQLList(Review) },
    serviceType: { type: GraphQLList(GraphQLString) },
    produces: { type: GraphQLList(Thing) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const SpeakableSpecification = new GraphQLObjectType({
  name: 'SpeakableSpecification',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const InteractAction = new GraphQLObjectType({
  name: 'InteractAction',
  fields: () => ({
    resultComment: { type: GraphQLList(Comment) },
    about: { type: GraphQLList(Thing) },
    inLanguage: { type: GraphQLList(Language) },
    recipient: { type: GraphQLList(recipient) },
    language: { type: GraphQLList(Language) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const AMRadioChannel = new GraphQLObjectType({
  name: 'AMRadioChannel',
  fields: () => ({
    broadcastFrequency: { type: GraphQLList(BroadcastFrequencySpecification) },
    broadcastChannelId: { type: GraphQLList(GraphQLString) },
    broadcastServiceTier: { type: GraphQLList(GraphQLString) },
    inBroadcastLineup: { type: GraphQLList(CableOrSatelliteService) },
    providesBroadcastService: { type: GraphQLList(BroadcastService) },
    genre: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const AutoBodyShop = new GraphQLObjectType({
  name: 'AutoBodyShop',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const Permit = new GraphQLObjectType({
  name: 'Permit',
  fields: () => ({
    validFor: { type: GraphQLList(Duration) },
    validUntil: { type: GraphQLList(GraphQLString) },
    validFrom: { type: GraphQLList(GraphQLString) },
    issuedBy: { type: GraphQLList(Organization) },
    issuedThrough: { type: GraphQLList(Service) },
    permitAudience: { type: GraphQLList(Audience) },
    validIn: { type: GraphQLList(AdministrativeArea) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ConvenienceStore = new GraphQLObjectType({
  name: 'ConvenienceStore',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const School = new GraphQLObjectType({
  name: 'School',
  fields: () => ({
    alumni: { type: GraphQLList(Person) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const TelevisionStation = new GraphQLObjectType({
  name: 'TelevisionStation',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const HomeGoodsStore = new GraphQLObjectType({
  name: 'HomeGoodsStore',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const LakeBodyOfWater = new GraphQLObjectType({
  name: 'LakeBodyOfWater',
  fields: () => ({
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const BodyOfWater = new GraphQLObjectType({
  name: 'BodyOfWater',
  fields: () => ({
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const RadioSeries = new GraphQLObjectType({
  name: 'RadioSeries',
  fields: () => ({
    seasons: { type: GraphQLList(CreativeWorkSeason) },
    actor: { type: GraphQLList(Person) },
    numberOfEpisodes: { type: GraphQLList(GraphQLInt) },
    trailer: { type: GraphQLList(VideoObject) },
    season: { type: GraphQLList(CreativeWorkSeason) },
    episodes: { type: GraphQLList(Episode) },
    musicBy: { type: GraphQLList(musicBy) },
    containsSeason: { type: GraphQLList(CreativeWorkSeason) },
    directors: { type: GraphQLList(Person) },
    numberOfSeasons: { type: GraphQLList(GraphQLInt) },
    director: { type: GraphQLList(Person) },
    productionCompany: { type: GraphQLList(Organization) },
    actors: { type: GraphQLList(Person) },
    episode: { type: GraphQLList(Episode) },
    endDate: { type: GraphQLList(GraphQLString) },
    issn: { type: GraphQLList(GraphQLString) },
    startDate: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
  })
});
const MusicVideoObject = new GraphQLObjectType({
  name: 'MusicVideoObject',
  fields: () => ({
    startTime: { type: GraphQLList(GraphQLString) },
    uploadDate: { type: GraphQLList(GraphQLString) },
    playerType: { type: GraphQLList(GraphQLString) },
    height: { type: GraphQLList(height) },
    bitrate: { type: GraphQLList(GraphQLString) },
    requiresSubscription: { type: GraphQLList(MediaSubscription) },
    regionsAllowed: { type: GraphQLList(Place) },
    endTime: { type: GraphQLList(GraphQLString) },
    contentSize: { type: GraphQLList(GraphQLString) },
    embedUrl: { type: GraphQLList(GraphQLString) },
    width: { type: GraphQLList(width) },
    contentUrl: { type: GraphQLList(GraphQLString) },
    associatedArticle: { type: GraphQLList(NewsArticle) },
    productionCompany: { type: GraphQLList(Organization) },
    duration: { type: GraphQLList(Duration) },
    encodesCreativeWork: { type: GraphQLList(CreativeWork) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Beach = new GraphQLObjectType({
  name: 'Beach',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const SpreadsheetDigitalDocument = new GraphQLObjectType({
  name: 'SpreadsheetDigitalDocument',
  fields: () => ({
    hasDigitalDocumentPermission: { type: GraphQLList(DigitalDocumentPermission) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const HowToItem = new GraphQLObjectType({
  name: 'HowToItem',
  fields: () => ({
    requiredQuantity: { type: GraphQLList(QuantitativeValue) },
    nextItem: { type: GraphQLList(ListItem) },
    position: { type: GraphQLList(GraphQLString) },
    previousItem: { type: GraphQLList(ListItem) },
    item: { type: GraphQLList(Thing) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ShareAction = new GraphQLObjectType({
  name: 'ShareAction',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    inLanguage: { type: GraphQLList(Language) },
    recipient: { type: GraphQLList(recipient) },
    language: { type: GraphQLList(Language) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const WPHeader = new GraphQLObjectType({
  name: 'WPHeader',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const LandmarksOrHistoricalBuildings = new GraphQLObjectType({
  name: 'LandmarksOrHistoricalBuildings',
  fields: () => ({
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const MarryAction = new GraphQLObjectType({
  name: 'MarryAction',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Notary = new GraphQLObjectType({
  name: 'Notary',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const ReactAction = new GraphQLObjectType({
  name: 'ReactAction',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Message = new GraphQLObjectType({
  name: 'Message',
  fields: () => ({
    dateRead: { type: GraphQLList(GraphQLString) },
    bccRecipient: { type: GraphQLList(bccRecipient) },
    dateSent: { type: GraphQLList(GraphQLString) },
    ccRecipient: { type: GraphQLList(ccRecipient) },
    recipient: { type: GraphQLList(recipient) },
    messageAttachment: { type: GraphQLList(CreativeWork) },
    dateReceived: { type: GraphQLList(GraphQLString) },
    toRecipient: { type: GraphQLList(toRecipient) },
    sender: { type: GraphQLList(sender) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const InvestmentOrDeposit = new GraphQLObjectType({
  name: 'InvestmentOrDeposit',
  fields: () => ({
    amount: { type: GraphQLList(MonetaryAmount) },
    interestRate: { type: GraphQLList(QuantitativeValue) },
    feesAndCommissionsSpecification: { type: GraphQLList(GraphQLString) },
    annualPercentageRate: { type: GraphQLList(QuantitativeValue) },
    serviceArea: { type: GraphQLList(serviceArea) },
    provider: { type: GraphQLList(provider) },
    serviceAudience: { type: GraphQLList(Audience) },
    audience: { type: GraphQLList(Audience) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    hoursAvailable: { type: GraphQLList(OpeningHoursSpecification) },
    providerMobility: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    broker: { type: GraphQLList(broker) },
    serviceOutput: { type: GraphQLList(Thing) },
    logo: { type: GraphQLList(ImageObject) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    availableChannel: { type: GraphQLList(ServiceChannel) },
    review: { type: GraphQLList(Review) },
    serviceType: { type: GraphQLList(GraphQLString) },
    produces: { type: GraphQLList(Thing) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const DryCleaningOrLaundry = new GraphQLObjectType({
  name: 'DryCleaningOrLaundry',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const DeactivateAction = new GraphQLObjectType({
  name: 'DeactivateAction',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const FastFoodRestaurant = new GraphQLObjectType({
  name: 'FastFoodRestaurant',
  fields: () => ({
    servesCuisine: { type: GraphQLList(GraphQLString) },
    hasMenu: { type: GraphQLList(Menu) },
    menu: { type: GraphQLList(Menu) },
    starRating: { type: GraphQLList(Rating) },
    acceptsReservations: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const DataFeedItem = new GraphQLObjectType({
  name: 'DataFeedItem',
  fields: () => ({
    dateModified: { type: GraphQLList(GraphQLString) },
    dateDeleted: { type: GraphQLList(GraphQLString) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    item: { type: GraphQLList(Thing) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const OrderStatus = new GraphQLObjectType({
  name: 'OrderStatus',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const SocialMediaPosting = new GraphQLObjectType({
  name: 'SocialMediaPosting',
  fields: () => ({
    sharedContent: { type: GraphQLList(CreativeWork) },
    pagination: { type: GraphQLList(GraphQLString) },
    wordCount: { type: GraphQLList(GraphQLInt) },
    speakable: { type: GraphQLList(SpeakableSpecification) },
    pageEnd: { type: GraphQLList(GraphQLString) },
    articleSection: { type: GraphQLList(GraphQLString) },
    articleBody: { type: GraphQLList(GraphQLString) },
    pageStart: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Park = new GraphQLObjectType({
  name: 'Park',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const VoteAction = new GraphQLObjectType({
  name: 'VoteAction',
  fields: () => ({
    candidate: { type: GraphQLList(Person) },
    actionOption: { type: GraphQLList(Thing) },
    option: { type: GraphQLList(Thing) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const BookFormatType = new GraphQLObjectType({
  name: 'BookFormatType',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const LoanOrCredit = new GraphQLObjectType({
  name: 'LoanOrCredit',
  fields: () => ({
    loanTerm: { type: GraphQLList(QuantitativeValue) },
    currency: { type: GraphQLList(GraphQLString) },
    amount: { type: GraphQLList(MonetaryAmount) },
    requiredCollateral: { type: GraphQLList(Thing) },
    interestRate: { type: GraphQLList(QuantitativeValue) },
    feesAndCommissionsSpecification: { type: GraphQLList(GraphQLString) },
    annualPercentageRate: { type: GraphQLList(QuantitativeValue) },
    serviceArea: { type: GraphQLList(serviceArea) },
    provider: { type: GraphQLList(provider) },
    serviceAudience: { type: GraphQLList(Audience) },
    audience: { type: GraphQLList(Audience) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    hoursAvailable: { type: GraphQLList(OpeningHoursSpecification) },
    providerMobility: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    broker: { type: GraphQLList(broker) },
    serviceOutput: { type: GraphQLList(Thing) },
    logo: { type: GraphQLList(ImageObject) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    availableChannel: { type: GraphQLList(ServiceChannel) },
    review: { type: GraphQLList(Review) },
    serviceType: { type: GraphQLList(GraphQLString) },
    produces: { type: GraphQLList(Thing) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ItemListOrderType = new GraphQLObjectType({
  name: 'ItemListOrderType',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ComedyClub = new GraphQLObjectType({
  name: 'ComedyClub',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const ServiceChannel = new GraphQLObjectType({
  name: 'ServiceChannel',
  fields: () => ({
    providesService: { type: GraphQLList(Service) },
    serviceLocation: { type: GraphQLList(Place) },
    servicePostalAddress: { type: GraphQLList(PostalAddress) },
    availableLanguage: { type: GraphQLList(Language) },
    serviceSmsNumber: { type: GraphQLList(ContactPoint) },
    serviceUrl: { type: GraphQLList(GraphQLString) },
    servicePhone: { type: GraphQLList(ContactPoint) },
    processingTime: { type: GraphQLList(Duration) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ExhibitionEvent = new GraphQLObjectType({
  name: 'ExhibitionEvent',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const RentAction = new GraphQLObjectType({
  name: 'RentAction',
  fields: () => ({
    landlord: { type: GraphQLList(landlord) },
    realEstateAgent: { type: GraphQLList(RealEstateAgent) },
    priceSpecification: { type: GraphQLList(PriceSpecification) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    price: { type: GraphQLList(GraphQLString) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const EmployeeRole = new GraphQLObjectType({
  name: 'EmployeeRole',
  fields: () => ({
    salaryCurrency: { type: GraphQLList(GraphQLString) },
    baseSalary: { type: GraphQLList(baseSalary) },
    numberedPosition: { type: GraphQLList(GraphQLFloat) },
    endDate: { type: GraphQLList(GraphQLString) },
    startDate: { type: GraphQLList(GraphQLString) },
    namedPosition: { type: GraphQLList(GraphQLString) },
    roleName: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const EmploymentAgency = new GraphQLObjectType({
  name: 'EmploymentAgency',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const PrependAction = new GraphQLObjectType({
  name: 'PrependAction',
  fields: () => ({
    toLocation: { type: GraphQLList(Place) },
    collection: { type: GraphQLList(Thing) },
    targetCollection: { type: GraphQLList(Thing) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const FireStation = new GraphQLObjectType({
  name: 'FireStation',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const CourseInstance = new GraphQLObjectType({
  name: 'CourseInstance',
  fields: () => ({
    instructor: { type: GraphQLList(Person) },
    courseMode: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Hotel = new GraphQLObjectType({
  name: 'Hotel',
  fields: () => ({
    audience: { type: GraphQLList(Audience) },
    checkinTime: { type: GraphQLList(GraphQLString) },
    petsAllowed: { type: GraphQLList(GraphQLString) },
    availableLanguage: { type: GraphQLList(Language) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    starRating: { type: GraphQLList(Rating) },
    checkoutTime: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const IndividualProduct = new GraphQLObjectType({
  name: 'IndividualProduct',
  fields: () => ({
    serialNumber: { type: GraphQLList(GraphQLString) },
    manufacturer: { type: GraphQLList(Organization) },
    sku: { type: GraphQLList(GraphQLString) },
    productionDate: { type: GraphQLList(GraphQLString) },
    audience: { type: GraphQLList(Audience) },
    mpn: { type: GraphQLList(GraphQLString) },
    height: { type: GraphQLList(height) },
    gtin8: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    isConsumableFor: { type: GraphQLList(Product) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    width: { type: GraphQLList(width) },
    awards: { type: GraphQLList(GraphQLString) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    isAccessoryOrSparePartFor: { type: GraphQLList(Product) },
    logo: { type: GraphQLList(ImageObject) },
    gtin14: { type: GraphQLList(GraphQLString) },
    gtin13: { type: GraphQLList(GraphQLString) },
    gtin12: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    weight: { type: GraphQLList(QuantitativeValue) },
    depth: { type: GraphQLList(depth) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    model: { type: GraphQLList(ProductModel) },
    color: { type: GraphQLList(GraphQLString) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    productID: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    purchaseDate: { type: GraphQLList(GraphQLString) },
    itemCondition: { type: GraphQLList(OfferItemCondition) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    releaseDate: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const StructuredValue = new GraphQLObjectType({
  name: 'StructuredValue',
  fields: () => ({
    address: { type: GraphQLList(PostalAddress) },
    latitude: { type: GraphQLList(GraphQLString) },
    longitude: { type: GraphQLList(GraphQLString) },
    addressCountry: { type: GraphQLList(Country) },
    postalCode: { type: GraphQLList(GraphQLString) },
    elevation: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const RadioClip = new GraphQLObjectType({
  name: 'RadioClip',
  fields: () => ({
    actor: { type: GraphQLList(Person) },
    partOfEpisode: { type: GraphQLList(Episode) },
    partOfSeries: { type: GraphQLList(CreativeWorkSeries) },
    partOfSeason: { type: GraphQLList(CreativeWorkSeason) },
    musicBy: { type: GraphQLList(musicBy) },
    directors: { type: GraphQLList(Person) },
    director: { type: GraphQLList(Person) },
    actors: { type: GraphQLList(Person) },
    clipNumber: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Intangible = new GraphQLObjectType({
  name: 'Intangible',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ElectronicsStore = new GraphQLObjectType({
  name: 'ElectronicsStore',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const Order = new GraphQLObjectType({
  name: 'Order',
  fields: () => ({
    paymentDue: { type: GraphQLList(GraphQLString) },
    orderNumber: { type: GraphQLList(GraphQLString) },
    paymentUrl: { type: GraphQLList(GraphQLString) },
    orderStatus: { type: GraphQLList(OrderStatus) },
    billingAddress: { type: GraphQLList(PostalAddress) },
    partOfInvoice: { type: GraphQLList(Invoice) },
    confirmationNumber: { type: GraphQLList(GraphQLString) },
    orderDate: { type: GraphQLList(GraphQLString) },
    customer: { type: GraphQLList(customer) },
    merchant: { type: GraphQLList(merchant) },
    broker: { type: GraphQLList(broker) },
    isGift: { type: GraphQLList(GraphQLBoolean) },
    paymentMethod: { type: GraphQLList(PaymentMethod) },
    seller: { type: GraphQLList(seller) },
    paymentMethodId: { type: GraphQLList(GraphQLString) },
    discount: { type: GraphQLList(GraphQLString) },
    orderDelivery: { type: GraphQLList(ParcelDelivery) },
    orderedItem: { type: GraphQLList(orderedItem) },
    acceptedOffer: { type: GraphQLList(Offer) },
    discountCurrency: { type: GraphQLList(GraphQLString) },
    paymentDueDate: { type: GraphQLList(GraphQLString) },
    discountCode: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const TVClip = new GraphQLObjectType({
  name: 'TVClip',
  fields: () => ({
    partOfTVSeries: { type: GraphQLList(TVSeries) },
    actor: { type: GraphQLList(Person) },
    partOfEpisode: { type: GraphQLList(Episode) },
    partOfSeries: { type: GraphQLList(CreativeWorkSeries) },
    partOfSeason: { type: GraphQLList(CreativeWorkSeason) },
    musicBy: { type: GraphQLList(musicBy) },
    directors: { type: GraphQLList(Person) },
    director: { type: GraphQLList(Person) },
    actors: { type: GraphQLList(Person) },
    clipNumber: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const NailSalon = new GraphQLObjectType({
  name: 'NailSalon',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const ContactPoint = new GraphQLObjectType({
  name: 'ContactPoint',
  fields: () => ({
    postOfficeBoxNumber: { type: GraphQLList(GraphQLString) },
    streetAddress: { type: GraphQLList(GraphQLString) },
    addressCountry: { type: GraphQLList(Country) },
    addressRegion: { type: GraphQLList(GraphQLString) },
    postalCode: { type: GraphQLList(GraphQLString) },
    addressLocality: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    hoursAvailable: { type: GraphQLList(OpeningHoursSpecification) },
    contactOption: { type: GraphQLList(ContactPointOption) },
    availableLanguage: { type: GraphQLList(Language) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    contactType: { type: GraphQLList(GraphQLString) },
    productSupported: { type: GraphQLList(Product) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const TelevisionChannel = new GraphQLObjectType({
  name: 'TelevisionChannel',
  fields: () => ({
    broadcastFrequency: { type: GraphQLList(BroadcastFrequencySpecification) },
    broadcastChannelId: { type: GraphQLList(GraphQLString) },
    broadcastServiceTier: { type: GraphQLList(GraphQLString) },
    inBroadcastLineup: { type: GraphQLList(CableOrSatelliteService) },
    providesBroadcastService: { type: GraphQLList(BroadcastService) },
    genre: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const GovernmentBuilding = new GraphQLObjectType({
  name: 'GovernmentBuilding',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const EmergencyService = new GraphQLObjectType({
  name: 'EmergencyService',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const FinancialService = new GraphQLObjectType({
  name: 'FinancialService',
  fields: () => ({
    feesAndCommissionsSpecification: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const VideoObject = new GraphQLObjectType({
  name: 'VideoObject',
  fields: () => ({
    actor: { type: GraphQLList(Person) },
    videoFrameSize: { type: GraphQLList(GraphQLString) },
    musicBy: { type: GraphQLList(musicBy) },
    directors: { type: GraphQLList(Person) },
    videoQuality: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    transcript: { type: GraphQLList(GraphQLString) },
    thumbnail: { type: GraphQLList(ImageObject) },
    caption: { type: GraphQLList(MediaObject) },
    actors: { type: GraphQLList(Person) },
    startTime: { type: GraphQLList(GraphQLString) },
    uploadDate: { type: GraphQLList(GraphQLString) },
    playerType: { type: GraphQLList(GraphQLString) },
    height: { type: GraphQLList(height) },
    bitrate: { type: GraphQLList(GraphQLString) },
    requiresSubscription: { type: GraphQLList(MediaSubscription) },
    regionsAllowed: { type: GraphQLList(Place) },
    endTime: { type: GraphQLList(GraphQLString) },
    contentSize: { type: GraphQLList(GraphQLString) },
    embedUrl: { type: GraphQLList(GraphQLString) },
    width: { type: GraphQLList(width) },
    contentUrl: { type: GraphQLList(GraphQLString) },
    associatedArticle: { type: GraphQLList(NewsArticle) },
    productionCompany: { type: GraphQLList(Organization) },
    duration: { type: GraphQLList(Duration) },
    encodesCreativeWork: { type: GraphQLList(CreativeWork) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Menu = new GraphQLObjectType({
  name: 'Menu',
  fields: () => ({
    hasMenuItem: { type: GraphQLList(MenuItem) },
    hasMenuSection: { type: GraphQLList(MenuSection) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Periodical = new GraphQLObjectType({
  name: 'Periodical',
  fields: () => ({
    endDate: { type: GraphQLList(GraphQLString) },
    issn: { type: GraphQLList(GraphQLString) },
    startDate: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
  })
});
const MovieSeries = new GraphQLObjectType({
  name: 'MovieSeries',
  fields: () => ({
    actor: { type: GraphQLList(Person) },
    trailer: { type: GraphQLList(VideoObject) },
    musicBy: { type: GraphQLList(musicBy) },
    directors: { type: GraphQLList(Person) },
    director: { type: GraphQLList(Person) },
    productionCompany: { type: GraphQLList(Organization) },
    actors: { type: GraphQLList(Person) },
    endDate: { type: GraphQLList(GraphQLString) },
    issn: { type: GraphQLList(GraphQLString) },
    startDate: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
  })
});
const Series = new GraphQLObjectType({
  name: 'Series',
  fields: () => ({
    seasons: { type: GraphQLList(CreativeWorkSeason) },
    actor: { type: GraphQLList(Person) },
    numberOfEpisodes: { type: GraphQLList(GraphQLInt) },
    trailer: { type: GraphQLList(VideoObject) },
    season: { type: GraphQLList(CreativeWorkSeason) },
    episodes: { type: GraphQLList(Episode) },
    countryOfOrigin: { type: GraphQLList(Country) },
    musicBy: { type: GraphQLList(musicBy) },
    containsSeason: { type: GraphQLList(CreativeWorkSeason) },
    directors: { type: GraphQLList(Person) },
    numberOfSeasons: { type: GraphQLList(GraphQLInt) },
    director: { type: GraphQLList(Person) },
    productionCompany: { type: GraphQLList(Organization) },
    actors: { type: GraphQLList(Person) },
    episode: { type: GraphQLList(Episode) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    endDate: { type: GraphQLList(GraphQLString) },
    issn: { type: GraphQLList(GraphQLString) },
    startDate: { type: GraphQLList(GraphQLString) },
  })
});
const Electrician = new GraphQLObjectType({
  name: 'Electrician',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const WarrantyScope = new GraphQLObjectType({
  name: 'WarrantyScope',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const CollectionPage = new GraphQLObjectType({
  name: 'CollectionPage',
  fields: () => ({
    speakable: { type: GraphQLList(SpeakableSpecification) },
    breadcrumb: { type: GraphQLList(BreadcrumbList) },
    significantLink: { type: GraphQLList(GraphQLString) },
    relatedLink: { type: GraphQLList(GraphQLString) },
    lastReviewed: { type: GraphQLList(GraphQLString) },
    mainContentOfPage: { type: GraphQLList(WebPageElement) },
    reviewedBy: { type: GraphQLList(reviewedBy) },
    primaryImageOfPage: { type: GraphQLList(ImageObject) },
    significantLinks: { type: GraphQLList(GraphQLString) },
    specialty: { type: GraphQLList(Specialty) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const PhotographAction = new GraphQLObjectType({
  name: 'PhotographAction',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const HealthAndBeautyBusiness = new GraphQLObjectType({
  name: 'HealthAndBeautyBusiness',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const LegislativeBuilding = new GraphQLObjectType({
  name: 'LegislativeBuilding',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const UserCheckins = new GraphQLObjectType({
  name: 'UserCheckins',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const VideoGameSeries = new GraphQLObjectType({
  name: 'VideoGameSeries',
  fields: () => ({
    gameItem: { type: GraphQLList(Thing) },
    seasons: { type: GraphQLList(CreativeWorkSeason) },
    gamePlatform: { type: GraphQLList(Thing) },
    actor: { type: GraphQLList(Person) },
    numberOfEpisodes: { type: GraphQLList(GraphQLInt) },
    trailer: { type: GraphQLList(VideoObject) },
    season: { type: GraphQLList(CreativeWorkSeason) },
    episodes: { type: GraphQLList(Episode) },
    cheatCode: { type: GraphQLList(CreativeWork) },
    characterAttribute: { type: GraphQLList(Thing) },
    gameLocation: { type: GraphQLList(gameLocation) },
    musicBy: { type: GraphQLList(musicBy) },
    containsSeason: { type: GraphQLList(CreativeWorkSeason) },
    directors: { type: GraphQLList(Person) },
    playMode: { type: GraphQLList(GamePlayMode) },
    numberOfSeasons: { type: GraphQLList(GraphQLInt) },
    director: { type: GraphQLList(Person) },
    productionCompany: { type: GraphQLList(Organization) },
    quest: { type: GraphQLList(Thing) },
    numberOfPlayers: { type: GraphQLList(QuantitativeValue) },
    actors: { type: GraphQLList(Person) },
    episode: { type: GraphQLList(Episode) },
    endDate: { type: GraphQLList(GraphQLString) },
    issn: { type: GraphQLList(GraphQLString) },
    startDate: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
  })
});
const BroadcastService = new GraphQLObjectType({
  name: 'BroadcastService',
  fields: () => ({
    broadcastFrequency: { type: GraphQLList(BroadcastFrequencySpecification) },
    broadcastTimezone: { type: GraphQLList(GraphQLString) },
    videoFormat: { type: GraphQLList(GraphQLString) },
    parentService: { type: GraphQLList(BroadcastService) },
    broadcastDisplayName: { type: GraphQLList(GraphQLString) },
    broadcastAffiliateOf: { type: GraphQLList(Organization) },
    area: { type: GraphQLList(Place) },
    hasBroadcastChannel: { type: GraphQLList(BroadcastChannel) },
    broadcaster: { type: GraphQLList(Organization) },
    serviceArea: { type: GraphQLList(serviceArea) },
    provider: { type: GraphQLList(provider) },
    serviceAudience: { type: GraphQLList(Audience) },
    audience: { type: GraphQLList(Audience) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    hoursAvailable: { type: GraphQLList(OpeningHoursSpecification) },
    providerMobility: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    broker: { type: GraphQLList(broker) },
    serviceOutput: { type: GraphQLList(Thing) },
    logo: { type: GraphQLList(ImageObject) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    availableChannel: { type: GraphQLList(ServiceChannel) },
    review: { type: GraphQLList(Review) },
    serviceType: { type: GraphQLList(GraphQLString) },
    produces: { type: GraphQLList(Thing) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const WearAction = new GraphQLObjectType({
  name: 'WearAction',
  fields: () => ({
    actionAccessibilityRequirement: { type: GraphQLList(ActionAccessSpecification) },
    expectsAcceptanceOf: { type: GraphQLList(Offer) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const TravelAgency = new GraphQLObjectType({
  name: 'TravelAgency',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const Hostel = new GraphQLObjectType({
  name: 'Hostel',
  fields: () => ({
    audience: { type: GraphQLList(Audience) },
    checkinTime: { type: GraphQLList(GraphQLString) },
    petsAllowed: { type: GraphQLList(GraphQLString) },
    availableLanguage: { type: GraphQLList(Language) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    starRating: { type: GraphQLList(Rating) },
    checkoutTime: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const BankOrCreditUnion = new GraphQLObjectType({
  name: 'BankOrCreditUnion',
  fields: () => ({
    feesAndCommissionsSpecification: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const Quantity = new GraphQLObjectType({
  name: 'Quantity',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const VideoGallery = new GraphQLObjectType({
  name: 'VideoGallery',
  fields: () => ({
    speakable: { type: GraphQLList(SpeakableSpecification) },
    breadcrumb: { type: GraphQLList(BreadcrumbList) },
    significantLink: { type: GraphQLList(GraphQLString) },
    relatedLink: { type: GraphQLList(GraphQLString) },
    lastReviewed: { type: GraphQLList(GraphQLString) },
    mainContentOfPage: { type: GraphQLList(WebPageElement) },
    reviewedBy: { type: GraphQLList(reviewedBy) },
    primaryImageOfPage: { type: GraphQLList(ImageObject) },
    significantLinks: { type: GraphQLList(GraphQLString) },
    specialty: { type: GraphQLList(Specialty) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const EducationalAudience = new GraphQLObjectType({
  name: 'EducationalAudience',
  fields: () => ({
    educationalRole: { type: GraphQLList(GraphQLString) },
    audienceType: { type: GraphQLList(GraphQLString) },
    geographicArea: { type: GraphQLList(AdministrativeArea) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const CityHall = new GraphQLObjectType({
  name: 'CityHall',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ComedyEvent = new GraphQLObjectType({
  name: 'ComedyEvent',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const DonateAction = new GraphQLObjectType({
  name: 'DonateAction',
  fields: () => ({
    recipient: { type: GraphQLList(recipient) },
    priceSpecification: { type: GraphQLList(PriceSpecification) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    price: { type: GraphQLList(GraphQLString) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Brand = new GraphQLObjectType({
  name: 'Brand',
  fields: () => ({
    aggregateRating: { type: GraphQLList(AggregateRating) },
    logo: { type: GraphQLList(ImageObject) },
    review: { type: GraphQLList(Review) },
    slogan: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const MovingCompany = new GraphQLObjectType({
  name: 'MovingCompany',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const Question = new GraphQLObjectType({
  name: 'Question',
  fields: () => ({
    answerCount: { type: GraphQLList(GraphQLInt) },
    acceptedAnswer: { type: GraphQLList(acceptedAnswer) },
    upvoteCount: { type: GraphQLList(GraphQLInt) },
    suggestedAnswer: { type: GraphQLList(suggestedAnswer) },
    downvoteCount: { type: GraphQLList(GraphQLInt) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const BorrowAction = new GraphQLObjectType({
  name: 'BorrowAction',
  fields: () => ({
    lender: { type: GraphQLList(lender) },
    toLocation: { type: GraphQLList(Place) },
    fromLocation: { type: GraphQLList(Place) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const GardenStore = new GraphQLObjectType({
  name: 'GardenStore',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const ReviewAction = new GraphQLObjectType({
  name: 'ReviewAction',
  fields: () => ({
    resultReview: { type: GraphQLList(Review) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const UserComments = new GraphQLObjectType({
  name: 'UserComments',
  fields: () => ({
    discusses: { type: GraphQLList(CreativeWork) },
    commentText: { type: GraphQLList(GraphQLString) },
    commentTime: { type: GraphQLList(GraphQLString) },
    creator: { type: GraphQLList(creator) },
    replyToUrl: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const PaintAction = new GraphQLObjectType({
  name: 'PaintAction',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Blog = new GraphQLObjectType({
  name: 'Blog',
  fields: () => ({
    blogPosts: { type: GraphQLList(BlogPosting) },
    blogPost: { type: GraphQLList(BlogPosting) },
    issn: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const SportsActivityLocation = new GraphQLObjectType({
  name: 'SportsActivityLocation',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const WarrantyPromise = new GraphQLObjectType({
  name: 'WarrantyPromise',
  fields: () => ({
    durationOfWarranty: { type: GraphQLList(QuantitativeValue) },
    warrantyScope: { type: GraphQLList(WarrantyScope) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const EmployerAggregateRating = new GraphQLObjectType({
  name: 'EmployerAggregateRating',
  fields: () => ({
    itemReviewed: { type: GraphQLList(Thing) },
    reviewCount: { type: GraphQLList(GraphQLInt) },
    ratingCount: { type: GraphQLList(GraphQLInt) },
    ratingValue: { type: GraphQLList(GraphQLString) },
    bestRating: { type: GraphQLList(GraphQLString) },
    reviewAspect: { type: GraphQLList(GraphQLString) },
    author: { type: GraphQLList(author) },
    worstRating: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Event = new GraphQLObjectType({
  name: 'Event',
  fields: () => ({
    awayTeam: { type: GraphQLList(awayTeam) },
    homeTeam: { type: GraphQLList(homeTeam) },
    competitor: { type: GraphQLList(competitor) },
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const House = new GraphQLObjectType({
  name: 'House',
  fields: () => ({
    occupancy: { type: GraphQLList(QuantitativeValue) },
    numberOfRooms: { type: GraphQLList(QuantitativeValue) },
    floorSize: { type: GraphQLList(QuantitativeValue) },
    petsAllowed: { type: GraphQLList(GraphQLString) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    permittedUsage: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const AdultEntertainment = new GraphQLObjectType({
  name: 'AdultEntertainment',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const DriveWheelConfigurationValue = new GraphQLObjectType({
  name: 'DriveWheelConfigurationValue',
  fields: () => ({
    greater: { type: GraphQLList(QualitativeValue) },
    equal: { type: GraphQLList(QualitativeValue) },
    nonEqual: { type: GraphQLList(QualitativeValue) },
    greaterOrEqual: { type: GraphQLList(QualitativeValue) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    lesser: { type: GraphQLList(QualitativeValue) },
    valueReference: { type: GraphQLList(valueReference) },
    lesserOrEqual: { type: GraphQLList(QualitativeValue) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Role = new GraphQLObjectType({
  name: 'Role',
  fields: () => ({
    numberedPosition: { type: GraphQLList(GraphQLFloat) },
    endDate: { type: GraphQLList(GraphQLString) },
    startDate: { type: GraphQLList(GraphQLString) },
    namedPosition: { type: GraphQLList(GraphQLString) },
    roleName: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const City = new GraphQLObjectType({
  name: 'City',
  fields: () => ({
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ConsumeAction = new GraphQLObjectType({
  name: 'ConsumeAction',
  fields: () => ({
    actionAccessibilityRequirement: { type: GraphQLList(ActionAccessSpecification) },
    expectsAcceptanceOf: { type: GraphQLList(Offer) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ScreeningEvent = new GraphQLObjectType({
  name: 'ScreeningEvent',
  fields: () => ({
    videoFormat: { type: GraphQLList(GraphQLString) },
    subtitleLanguage: { type: GraphQLList(Language) },
    workPresented: { type: GraphQLList(Movie) },
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ArriveAction = new GraphQLObjectType({
  name: 'ArriveAction',
  fields: () => ({
    toLocation: { type: GraphQLList(Place) },
    fromLocation: { type: GraphQLList(Place) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const BookmarkAction = new GraphQLObjectType({
  name: 'BookmarkAction',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const CreateAction = new GraphQLObjectType({
  name: 'CreateAction',
  fields: () => ({
    inLanguage: { type: GraphQLList(Language) },
    language: { type: GraphQLList(Language) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ScheduleAction = new GraphQLObjectType({
  name: 'ScheduleAction',
  fields: () => ({
    scheduledTime: { type: GraphQLList(GraphQLString) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Dentist = new GraphQLObjectType({
  name: 'Dentist',
  fields: () => ({
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const DiscoverAction = new GraphQLObjectType({
  name: 'DiscoverAction',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const EndorsementRating = new GraphQLObjectType({
  name: 'EndorsementRating',
  fields: () => ({
    ratingValue: { type: GraphQLList(GraphQLString) },
    bestRating: { type: GraphQLList(GraphQLString) },
    reviewAspect: { type: GraphQLList(GraphQLString) },
    author: { type: GraphQLList(author) },
    worstRating: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Reservoir = new GraphQLObjectType({
  name: 'Reservoir',
  fields: () => ({
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const MusicEvent = new GraphQLObjectType({
  name: 'MusicEvent',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Store = new GraphQLObjectType({
  name: 'Store',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const MonetaryAmount = new GraphQLObjectType({
  name: 'MonetaryAmount',
  fields: () => ({
    minValue: { type: GraphQLList(GraphQLFloat) },
    value: { type: GraphQLList(StructuredValue) },
    currency: { type: GraphQLList(GraphQLString) },
    validFrom: { type: GraphQLList(GraphQLString) },
    validThrough: { type: GraphQLList(GraphQLString) },
    maxValue: { type: GraphQLList(GraphQLFloat) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const HairSalon = new GraphQLObjectType({
  name: 'HairSalon',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const DaySpa = new GraphQLObjectType({
  name: 'DaySpa',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const EngineSpecification = new GraphQLObjectType({
  name: 'EngineSpecification',
  fields: () => ({
    fuelType: { type: GraphQLList(QualitativeValue) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ActivateAction = new GraphQLObjectType({
  name: 'ActivateAction',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const EventVenue = new GraphQLObjectType({
  name: 'EventVenue',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const RadioEpisode = new GraphQLObjectType({
  name: 'RadioEpisode',
  fields: () => ({
    actor: { type: GraphQLList(Person) },
    trailer: { type: GraphQLList(VideoObject) },
    partOfSeries: { type: GraphQLList(CreativeWorkSeries) },
    partOfSeason: { type: GraphQLList(CreativeWorkSeason) },
    musicBy: { type: GraphQLList(musicBy) },
    directors: { type: GraphQLList(Person) },
    episodeNumber: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    productionCompany: { type: GraphQLList(Organization) },
    actors: { type: GraphQLList(Person) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ElementarySchool = new GraphQLObjectType({
  name: 'ElementarySchool',
  fields: () => ({
    alumni: { type: GraphQLList(Person) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ReplaceAction = new GraphQLObjectType({
  name: 'ReplaceAction',
  fields: () => ({
    replacee: { type: GraphQLList(Thing) },
    replacer: { type: GraphQLList(Thing) },
    collection: { type: GraphQLList(Thing) },
    targetCollection: { type: GraphQLList(Thing) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const CreditCard = new GraphQLObjectType({
  name: 'CreditCard',
  fields: () => ({
    loanTerm: { type: GraphQLList(QuantitativeValue) },
    currency: { type: GraphQLList(GraphQLString) },
    amount: { type: GraphQLList(MonetaryAmount) },
    requiredCollateral: { type: GraphQLList(Thing) },
    interestRate: { type: GraphQLList(QuantitativeValue) },
    feesAndCommissionsSpecification: { type: GraphQLList(GraphQLString) },
    annualPercentageRate: { type: GraphQLList(QuantitativeValue) },
    serviceArea: { type: GraphQLList(serviceArea) },
    provider: { type: GraphQLList(provider) },
    serviceAudience: { type: GraphQLList(Audience) },
    audience: { type: GraphQLList(Audience) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    hoursAvailable: { type: GraphQLList(OpeningHoursSpecification) },
    providerMobility: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    broker: { type: GraphQLList(broker) },
    serviceOutput: { type: GraphQLList(Thing) },
    logo: { type: GraphQLList(ImageObject) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    availableChannel: { type: GraphQLList(ServiceChannel) },
    review: { type: GraphQLList(Review) },
    serviceType: { type: GraphQLList(GraphQLString) },
    produces: { type: GraphQLList(Thing) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const OpeningHoursSpecification = new GraphQLObjectType({
  name: 'OpeningHoursSpecification',
  fields: () => ({
    validFrom: { type: GraphQLList(GraphQLString) },
    validThrough: { type: GraphQLList(GraphQLString) },
    opens: { type: GraphQLList(GraphQLString) },
    closes: { type: GraphQLList(GraphQLString) },
    dayOfWeek: { type: GraphQLList(DayOfWeek) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const DislikeAction = new GraphQLObjectType({
  name: 'DislikeAction',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const PlayAction = new GraphQLObjectType({
  name: 'PlayAction',
  fields: () => ({
    audience: { type: GraphQLList(Audience) },
    event: { type: GraphQLList(Event) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const FAQPage = new GraphQLObjectType({
  name: 'FAQPage',
  fields: () => ({
    speakable: { type: GraphQLList(SpeakableSpecification) },
    breadcrumb: { type: GraphQLList(BreadcrumbList) },
    significantLink: { type: GraphQLList(GraphQLString) },
    relatedLink: { type: GraphQLList(GraphQLString) },
    lastReviewed: { type: GraphQLList(GraphQLString) },
    mainContentOfPage: { type: GraphQLList(WebPageElement) },
    reviewedBy: { type: GraphQLList(reviewedBy) },
    primaryImageOfPage: { type: GraphQLList(ImageObject) },
    significantLinks: { type: GraphQLList(GraphQLString) },
    specialty: { type: GraphQLList(Specialty) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const TieAction = new GraphQLObjectType({
  name: 'TieAction',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Corporation = new GraphQLObjectType({
  name: 'Corporation',
  fields: () => ({
    tickerSymbol: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ItemList = new GraphQLObjectType({
  name: 'ItemList',
  fields: () => ({
    itemListElement: { type: GraphQLList(itemListElement) },
    itemListOrder: { type: GraphQLList(ItemListOrderType) },
    numberOfItems: { type: GraphQLList(GraphQLInt) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const DeliveryMethod = new GraphQLObjectType({
  name: 'DeliveryMethod',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Winery = new GraphQLObjectType({
  name: 'Winery',
  fields: () => ({
    servesCuisine: { type: GraphQLList(GraphQLString) },
    hasMenu: { type: GraphQLList(Menu) },
    menu: { type: GraphQLList(Menu) },
    starRating: { type: GraphQLList(Rating) },
    acceptsReservations: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const InformAction = new GraphQLObjectType({
  name: 'InformAction',
  fields: () => ({
    event: { type: GraphQLList(Event) },
    about: { type: GraphQLList(Thing) },
    inLanguage: { type: GraphQLList(Language) },
    recipient: { type: GraphQLList(recipient) },
    language: { type: GraphQLList(Language) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ReturnAction = new GraphQLObjectType({
  name: 'ReturnAction',
  fields: () => ({
    recipient: { type: GraphQLList(recipient) },
    toLocation: { type: GraphQLList(Place) },
    fromLocation: { type: GraphQLList(Place) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const MeetingRoom = new GraphQLObjectType({
  name: 'MeetingRoom',
  fields: () => ({
    floorSize: { type: GraphQLList(QuantitativeValue) },
    petsAllowed: { type: GraphQLList(GraphQLString) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    numberOfRooms: { type: GraphQLList(QuantitativeValue) },
    permittedUsage: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const MonetaryAmountDistribution = new GraphQLObjectType({
  name: 'MonetaryAmountDistribution',
  fields: () => ({
    currency: { type: GraphQLList(GraphQLString) },
    percentile10: { type: GraphQLList(GraphQLFloat) },
    percentile25: { type: GraphQLList(GraphQLFloat) },
    median: { type: GraphQLList(GraphQLFloat) },
    duration: { type: GraphQLList(Duration) },
    percentile90: { type: GraphQLList(GraphQLFloat) },
    percentile75: { type: GraphQLList(GraphQLFloat) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const JoinAction = new GraphQLObjectType({
  name: 'JoinAction',
  fields: () => ({
    event: { type: GraphQLList(Event) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const RiverBodyOfWater = new GraphQLObjectType({
  name: 'RiverBodyOfWater',
  fields: () => ({
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const BuyAction = new GraphQLObjectType({
  name: 'BuyAction',
  fields: () => ({
    vendor: { type: GraphQLList(vendor) },
    seller: { type: GraphQLList(seller) },
    warrantyPromise: { type: GraphQLList(WarrantyPromise) },
    priceSpecification: { type: GraphQLList(PriceSpecification) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    price: { type: GraphQLList(GraphQLString) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const SearchAction = new GraphQLObjectType({
  name: 'SearchAction',
  fields: () => ({
    query: { type: GraphQLList(GraphQLString) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const HVACBusiness = new GraphQLObjectType({
  name: 'HVACBusiness',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const TaxiStand = new GraphQLObjectType({
  name: 'TaxiStand',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ProductModel = new GraphQLObjectType({
  name: 'ProductModel',
  fields: () => ({
    predecessorOf: { type: GraphQLList(ProductModel) },
    successorOf: { type: GraphQLList(ProductModel) },
    isVariantOf: { type: GraphQLList(ProductModel) },
    manufacturer: { type: GraphQLList(Organization) },
    sku: { type: GraphQLList(GraphQLString) },
    productionDate: { type: GraphQLList(GraphQLString) },
    audience: { type: GraphQLList(Audience) },
    mpn: { type: GraphQLList(GraphQLString) },
    height: { type: GraphQLList(height) },
    gtin8: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    isConsumableFor: { type: GraphQLList(Product) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    width: { type: GraphQLList(width) },
    awards: { type: GraphQLList(GraphQLString) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    isAccessoryOrSparePartFor: { type: GraphQLList(Product) },
    logo: { type: GraphQLList(ImageObject) },
    gtin14: { type: GraphQLList(GraphQLString) },
    gtin13: { type: GraphQLList(GraphQLString) },
    gtin12: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    weight: { type: GraphQLList(QuantitativeValue) },
    depth: { type: GraphQLList(depth) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    model: { type: GraphQLList(ProductModel) },
    color: { type: GraphQLList(GraphQLString) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    productID: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    purchaseDate: { type: GraphQLList(GraphQLString) },
    itemCondition: { type: GraphQLList(OfferItemCondition) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    releaseDate: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const CatholicChurch = new GraphQLObjectType({
  name: 'CatholicChurch',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const MovieClip = new GraphQLObjectType({
  name: 'MovieClip',
  fields: () => ({
    actor: { type: GraphQLList(Person) },
    partOfEpisode: { type: GraphQLList(Episode) },
    partOfSeries: { type: GraphQLList(CreativeWorkSeries) },
    partOfSeason: { type: GraphQLList(CreativeWorkSeason) },
    musicBy: { type: GraphQLList(musicBy) },
    directors: { type: GraphQLList(Person) },
    director: { type: GraphQLList(Person) },
    actors: { type: GraphQLList(Person) },
    clipNumber: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ActionStatusType = new GraphQLObjectType({
  name: 'ActionStatusType',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const WriteAction = new GraphQLObjectType({
  name: 'WriteAction',
  fields: () => ({
    inLanguage: { type: GraphQLList(Language) },
    language: { type: GraphQLList(Language) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const MusicAlbumProductionType = new GraphQLObjectType({
  name: 'MusicAlbumProductionType',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ApplyAction = new GraphQLObjectType({
  name: 'ApplyAction',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Locksmith = new GraphQLObjectType({
  name: 'Locksmith',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const Landform = new GraphQLObjectType({
  name: 'Landform',
  fields: () => ({
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Episode = new GraphQLObjectType({
  name: 'Episode',
  fields: () => ({
    actor: { type: GraphQLList(Person) },
    trailer: { type: GraphQLList(VideoObject) },
    partOfSeries: { type: GraphQLList(CreativeWorkSeries) },
    partOfSeason: { type: GraphQLList(CreativeWorkSeason) },
    musicBy: { type: GraphQLList(musicBy) },
    directors: { type: GraphQLList(Person) },
    episodeNumber: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    productionCompany: { type: GraphQLList(Organization) },
    actors: { type: GraphQLList(Person) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const OceanBodyOfWater = new GraphQLObjectType({
  name: 'OceanBodyOfWater',
  fields: () => ({
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const MedicalOrganization = new GraphQLObjectType({
  name: 'MedicalOrganization',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const TrainReservation = new GraphQLObjectType({
  name: 'TrainReservation',
  fields: () => ({
    provider: { type: GraphQLList(provider) },
    programMembershipUsed: { type: GraphQLList(ProgramMembership) },
    reservationStatus: { type: GraphQLList(ReservationStatusType) },
    underName: { type: GraphQLList(underName) },
    bookingAgent: { type: GraphQLList(bookingAgent) },
    totalPrice: { type: GraphQLList(PriceSpecification) },
    reservationFor: { type: GraphQLList(Thing) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    broker: { type: GraphQLList(broker) },
    modifiedTime: { type: GraphQLList(GraphQLString) },
    bookingTime: { type: GraphQLList(GraphQLString) },
    reservationId: { type: GraphQLList(GraphQLString) },
    reservedTicket: { type: GraphQLList(Ticket) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const MusicVenue = new GraphQLObjectType({
  name: 'MusicVenue',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Review = new GraphQLObjectType({
  name: 'Review',
  fields: () => ({
    claimReviewed: { type: GraphQLList(GraphQLString) },
    reviewRating: { type: GraphQLList(Rating) },
    reviewAspect: { type: GraphQLList(GraphQLString) },
    itemReviewed: { type: GraphQLList(Thing) },
    reviewBody: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const PostalAddress = new GraphQLObjectType({
  name: 'PostalAddress',
  fields: () => ({
    postOfficeBoxNumber: { type: GraphQLList(GraphQLString) },
    streetAddress: { type: GraphQLList(GraphQLString) },
    addressCountry: { type: GraphQLList(Country) },
    addressRegion: { type: GraphQLList(GraphQLString) },
    postalCode: { type: GraphQLList(GraphQLString) },
    addressLocality: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    hoursAvailable: { type: GraphQLList(OpeningHoursSpecification) },
    contactOption: { type: GraphQLList(ContactPointOption) },
    availableLanguage: { type: GraphQLList(Language) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    contactType: { type: GraphQLList(GraphQLString) },
    productSupported: { type: GraphQLList(Product) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ClaimReview = new GraphQLObjectType({
  name: 'ClaimReview',
  fields: () => ({
    claimReviewed: { type: GraphQLList(GraphQLString) },
    reviewRating: { type: GraphQLList(Rating) },
    reviewAspect: { type: GraphQLList(GraphQLString) },
    itemReviewed: { type: GraphQLList(Thing) },
    reviewBody: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const CollegeOrUniversity = new GraphQLObjectType({
  name: 'CollegeOrUniversity',
  fields: () => ({
    alumni: { type: GraphQLList(Person) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Clip = new GraphQLObjectType({
  name: 'Clip',
  fields: () => ({
    actor: { type: GraphQLList(Person) },
    partOfEpisode: { type: GraphQLList(Episode) },
    partOfSeries: { type: GraphQLList(CreativeWorkSeries) },
    partOfSeason: { type: GraphQLList(CreativeWorkSeason) },
    musicBy: { type: GraphQLList(musicBy) },
    directors: { type: GraphQLList(Person) },
    director: { type: GraphQLList(Person) },
    actors: { type: GraphQLList(Person) },
    clipNumber: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Seat = new GraphQLObjectType({
  name: 'Seat',
  fields: () => ({
    seatRow: { type: GraphQLList(GraphQLString) },
    seatingType: { type: GraphQLList(QualitativeValue) },
    seatSection: { type: GraphQLList(GraphQLString) },
    seatNumber: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const WantAction = new GraphQLObjectType({
  name: 'WantAction',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ReadAction = new GraphQLObjectType({
  name: 'ReadAction',
  fields: () => ({
    actionAccessibilityRequirement: { type: GraphQLList(ActionAccessSpecification) },
    expectsAcceptanceOf: { type: GraphQLList(Offer) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Specialty = new GraphQLObjectType({
  name: 'Specialty',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const TaxiService = new GraphQLObjectType({
  name: 'TaxiService',
  fields: () => ({
    serviceArea: { type: GraphQLList(serviceArea) },
    provider: { type: GraphQLList(provider) },
    serviceAudience: { type: GraphQLList(Audience) },
    audience: { type: GraphQLList(Audience) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    hoursAvailable: { type: GraphQLList(OpeningHoursSpecification) },
    providerMobility: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    broker: { type: GraphQLList(broker) },
    serviceOutput: { type: GraphQLList(Thing) },
    logo: { type: GraphQLList(ImageObject) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    availableChannel: { type: GraphQLList(ServiceChannel) },
    review: { type: GraphQLList(Review) },
    serviceType: { type: GraphQLList(GraphQLString) },
    produces: { type: GraphQLList(Thing) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ItemAvailability = new GraphQLObjectType({
  name: 'ItemAvailability',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Ticket = new GraphQLObjectType({
  name: 'Ticket',
  fields: () => ({
    underName: { type: GraphQLList(underName) },
    totalPrice: { type: GraphQLList(PriceSpecification) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    ticketNumber: { type: GraphQLList(GraphQLString) },
    issuedBy: { type: GraphQLList(Organization) },
    ticketToken: { type: GraphQLList(GraphQLString) },
    ticketedSeat: { type: GraphQLList(Seat) },
    dateIssued: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Occupation = new GraphQLObjectType({
  name: 'Occupation',
  fields: () => ({
    occupationLocation: { type: GraphQLList(AdministrativeArea) },
    skills: { type: GraphQLList(GraphQLString) },
    responsibilities: { type: GraphQLList(GraphQLString) },
    occupationalCategory: { type: GraphQLList(GraphQLString) },
    experienceRequirements: { type: GraphQLList(GraphQLString) },
    estimatedSalary: { type: GraphQLList(MonetaryAmountDistribution) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ArtGallery = new GraphQLObjectType({
  name: 'ArtGallery',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const Plumber = new GraphQLObjectType({
  name: 'Plumber',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const Preschool = new GraphQLObjectType({
  name: 'Preschool',
  fields: () => ({
    alumni: { type: GraphQLList(Person) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const RejectAction = new GraphQLObjectType({
  name: 'RejectAction',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const TattooParlor = new GraphQLObjectType({
  name: 'TattooParlor',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const GeoCircle = new GraphQLObjectType({
  name: 'GeoCircle',
  fields: () => ({
    geoRadius: { type: GraphQLList(Distance) },
    geoMidpoint: { type: GraphQLList(GeoCoordinates) },
    address: { type: GraphQLList(PostalAddress) },
    circle: { type: GraphQLList(GraphQLString) },
    box: { type: GraphQLList(GraphQLString) },
    addressCountry: { type: GraphQLList(Country) },
    postalCode: { type: GraphQLList(GraphQLString) },
    elevation: { type: GraphQLList(GraphQLString) },
    polygon: { type: GraphQLList(GraphQLString) },
    line: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const BusinessFunction = new GraphQLObjectType({
  name: 'BusinessFunction',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Energy = new GraphQLObjectType({
  name: 'Energy',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const FurnitureStore = new GraphQLObjectType({
  name: 'FurnitureStore',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const BusStop = new GraphQLObjectType({
  name: 'BusStop',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const MotorcycleRepair = new GraphQLObjectType({
  name: 'MotorcycleRepair',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const GovernmentPermit = new GraphQLObjectType({
  name: 'GovernmentPermit',
  fields: () => ({
    validFor: { type: GraphQLList(Duration) },
    validUntil: { type: GraphQLList(GraphQLString) },
    validFrom: { type: GraphQLList(GraphQLString) },
    issuedBy: { type: GraphQLList(Organization) },
    issuedThrough: { type: GraphQLList(Service) },
    permitAudience: { type: GraphQLList(Audience) },
    validIn: { type: GraphQLList(AdministrativeArea) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const InsertAction = new GraphQLObjectType({
  name: 'InsertAction',
  fields: () => ({
    toLocation: { type: GraphQLList(Place) },
    collection: { type: GraphQLList(Thing) },
    targetCollection: { type: GraphQLList(Thing) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Resort = new GraphQLObjectType({
  name: 'Resort',
  fields: () => ({
    audience: { type: GraphQLList(Audience) },
    checkinTime: { type: GraphQLList(GraphQLString) },
    petsAllowed: { type: GraphQLList(GraphQLString) },
    availableLanguage: { type: GraphQLList(Language) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    starRating: { type: GraphQLList(Rating) },
    checkoutTime: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const Invoice = new GraphQLObjectType({
  name: 'Invoice',
  fields: () => ({
    provider: { type: GraphQLList(provider) },
    paymentDue: { type: GraphQLList(GraphQLString) },
    billingPeriod: { type: GraphQLList(Duration) },
    confirmationNumber: { type: GraphQLList(GraphQLString) },
    accountId: { type: GraphQLList(GraphQLString) },
    scheduledPaymentDate: { type: GraphQLList(GraphQLString) },
    customer: { type: GraphQLList(customer) },
    category: { type: GraphQLList(Thing) },
    paymentStatus: { type: GraphQLList(PaymentStatusType) },
    broker: { type: GraphQLList(broker) },
    referencesOrder: { type: GraphQLList(Order) },
    paymentMethod: { type: GraphQLList(PaymentMethod) },
    paymentMethodId: { type: GraphQLList(GraphQLString) },
    minimumPaymentDue: { type: GraphQLList(minimumPaymentDue) },
    totalPaymentDue: { type: GraphQLList(totalPaymentDue) },
    paymentDueDate: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Table = new GraphQLObjectType({
  name: 'Table',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const CompoundPriceSpecification = new GraphQLObjectType({
  name: 'CompoundPriceSpecification',
  fields: () => ({
    priceComponent: { type: GraphQLList(UnitPriceSpecification) },
    minPrice: { type: GraphQLList(GraphQLFloat) },
    eligibleTransactionVolume: { type: GraphQLList(PriceSpecification) },
    maxPrice: { type: GraphQLList(GraphQLFloat) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    eligibleQuantity: { type: GraphQLList(QuantitativeValue) },
    validFrom: { type: GraphQLList(GraphQLString) },
    validThrough: { type: GraphQLList(GraphQLString) },
    price: { type: GraphQLList(GraphQLString) },
    valueAddedTaxIncluded: { type: GraphQLList(GraphQLBoolean) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const PeopleAudience = new GraphQLObjectType({
  name: 'PeopleAudience',
  fields: () => ({
    childMaxAge: { type: GraphQLList(GraphQLFloat) },
    childMinAge: { type: GraphQLList(GraphQLFloat) },
    suggestedMaxAge: { type: GraphQLList(GraphQLFloat) },
    requiredMinAge: { type: GraphQLList(GraphQLInt) },
    requiredGender: { type: GraphQLList(GraphQLString) },
    suggestedGender: { type: GraphQLList(GraphQLString) },
    requiredMaxAge: { type: GraphQLList(GraphQLInt) },
    suggestedMinAge: { type: GraphQLList(GraphQLFloat) },
    audienceType: { type: GraphQLList(GraphQLString) },
    geographicArea: { type: GraphQLList(AdministrativeArea) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const GovernmentOrganization = new GraphQLObjectType({
  name: 'GovernmentOrganization',
  fields: () => ({
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const FoodEstablishmentReservation = new GraphQLObjectType({
  name: 'FoodEstablishmentReservation',
  fields: () => ({
    startTime: { type: GraphQLList(GraphQLString) },
    endTime: { type: GraphQLList(GraphQLString) },
    partySize: { type: GraphQLList(QuantitativeValue) },
    provider: { type: GraphQLList(provider) },
    programMembershipUsed: { type: GraphQLList(ProgramMembership) },
    reservationStatus: { type: GraphQLList(ReservationStatusType) },
    underName: { type: GraphQLList(underName) },
    bookingAgent: { type: GraphQLList(bookingAgent) },
    totalPrice: { type: GraphQLList(PriceSpecification) },
    reservationFor: { type: GraphQLList(Thing) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    broker: { type: GraphQLList(broker) },
    modifiedTime: { type: GraphQLList(GraphQLString) },
    bookingTime: { type: GraphQLList(GraphQLString) },
    reservationId: { type: GraphQLList(GraphQLString) },
    reservedTicket: { type: GraphQLList(Ticket) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const DataCatalog = new GraphQLObjectType({
  name: 'DataCatalog',
  fields: () => ({
    dataset: { type: GraphQLList(Dataset) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const PaymentChargeSpecification = new GraphQLObjectType({
  name: 'PaymentChargeSpecification',
  fields: () => ({
    appliesToPaymentMethod: { type: GraphQLList(PaymentMethod) },
    appliesToDeliveryMethod: { type: GraphQLList(DeliveryMethod) },
    minPrice: { type: GraphQLList(GraphQLFloat) },
    eligibleTransactionVolume: { type: GraphQLList(PriceSpecification) },
    maxPrice: { type: GraphQLList(GraphQLFloat) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    eligibleQuantity: { type: GraphQLList(QuantitativeValue) },
    validFrom: { type: GraphQLList(GraphQLString) },
    validThrough: { type: GraphQLList(GraphQLString) },
    price: { type: GraphQLList(GraphQLString) },
    valueAddedTaxIncluded: { type: GraphQLList(GraphQLBoolean) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const BusReservation = new GraphQLObjectType({
  name: 'BusReservation',
  fields: () => ({
    provider: { type: GraphQLList(provider) },
    programMembershipUsed: { type: GraphQLList(ProgramMembership) },
    reservationStatus: { type: GraphQLList(ReservationStatusType) },
    underName: { type: GraphQLList(underName) },
    bookingAgent: { type: GraphQLList(bookingAgent) },
    totalPrice: { type: GraphQLList(PriceSpecification) },
    reservationFor: { type: GraphQLList(Thing) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    broker: { type: GraphQLList(broker) },
    modifiedTime: { type: GraphQLList(GraphQLString) },
    bookingTime: { type: GraphQLList(GraphQLString) },
    reservationId: { type: GraphQLList(GraphQLString) },
    reservedTicket: { type: GraphQLList(Ticket) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Taxi = new GraphQLObjectType({
  name: 'Taxi',
  fields: () => ({
    serviceArea: { type: GraphQLList(serviceArea) },
    provider: { type: GraphQLList(provider) },
    serviceAudience: { type: GraphQLList(Audience) },
    audience: { type: GraphQLList(Audience) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    hoursAvailable: { type: GraphQLList(OpeningHoursSpecification) },
    providerMobility: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    broker: { type: GraphQLList(broker) },
    serviceOutput: { type: GraphQLList(Thing) },
    logo: { type: GraphQLList(ImageObject) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    availableChannel: { type: GraphQLList(ServiceChannel) },
    review: { type: GraphQLList(Review) },
    serviceType: { type: GraphQLList(GraphQLString) },
    produces: { type: GraphQLList(Thing) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ItemPage = new GraphQLObjectType({
  name: 'ItemPage',
  fields: () => ({
    speakable: { type: GraphQLList(SpeakableSpecification) },
    breadcrumb: { type: GraphQLList(BreadcrumbList) },
    significantLink: { type: GraphQLList(GraphQLString) },
    relatedLink: { type: GraphQLList(GraphQLString) },
    lastReviewed: { type: GraphQLList(GraphQLString) },
    mainContentOfPage: { type: GraphQLList(WebPageElement) },
    reviewedBy: { type: GraphQLList(reviewedBy) },
    primaryImageOfPage: { type: GraphQLList(ImageObject) },
    significantLinks: { type: GraphQLList(GraphQLString) },
    specialty: { type: GraphQLList(Specialty) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Physician = new GraphQLObjectType({
  name: 'Physician',
  fields: () => ({
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const RsvpResponseType = new GraphQLObjectType({
  name: 'RsvpResponseType',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const OrderItem = new GraphQLObjectType({
  name: 'OrderItem',
  fields: () => ({
    orderItemStatus: { type: GraphQLList(OrderStatus) },
    orderQuantity: { type: GraphQLList(GraphQLFloat) },
    orderDelivery: { type: GraphQLList(ParcelDelivery) },
    orderedItem: { type: GraphQLList(orderedItem) },
    orderItemNumber: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const BusinessEntityType = new GraphQLObjectType({
  name: 'BusinessEntityType',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const TipAction = new GraphQLObjectType({
  name: 'TipAction',
  fields: () => ({
    recipient: { type: GraphQLList(recipient) },
    priceSpecification: { type: GraphQLList(PriceSpecification) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    price: { type: GraphQLList(GraphQLString) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const HowToDirection = new GraphQLObjectType({
  name: 'HowToDirection',
  fields: () => ({
    beforeMedia: { type: GraphQLList(MediaObject) },
    prepTime: { type: GraphQLList(Duration) },
    tool: { type: GraphQLList(HowToTool) },
    performTime: { type: GraphQLList(Duration) },
    totalTime: { type: GraphQLList(Duration) },
    supply: { type: GraphQLList(HowToSupply) },
    afterMedia: { type: GraphQLList(MediaObject) },
    duringMedia: { type: GraphQLList(MediaObject) },
    nextItem: { type: GraphQLList(ListItem) },
    position: { type: GraphQLList(GraphQLString) },
    previousItem: { type: GraphQLList(ListItem) },
    item: { type: GraphQLList(Thing) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
  })
});
const Apartment = new GraphQLObjectType({
  name: 'Apartment',
  fields: () => ({
    occupancy: { type: GraphQLList(QuantitativeValue) },
    numberOfRooms: { type: GraphQLList(QuantitativeValue) },
    floorSize: { type: GraphQLList(QuantitativeValue) },
    petsAllowed: { type: GraphQLList(GraphQLString) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    permittedUsage: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const NoteDigitalDocument = new GraphQLObjectType({
  name: 'NoteDigitalDocument',
  fields: () => ({
    hasDigitalDocumentPermission: { type: GraphQLList(DigitalDocumentPermission) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Service = new GraphQLObjectType({
  name: 'Service',
  fields: () => ({
    interestRate: { type: GraphQLList(QuantitativeValue) },
    feesAndCommissionsSpecification: { type: GraphQLList(GraphQLString) },
    annualPercentageRate: { type: GraphQLList(QuantitativeValue) },
    serviceArea: { type: GraphQLList(serviceArea) },
    provider: { type: GraphQLList(provider) },
    serviceAudience: { type: GraphQLList(Audience) },
    audience: { type: GraphQLList(Audience) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    hoursAvailable: { type: GraphQLList(OpeningHoursSpecification) },
    providerMobility: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    broker: { type: GraphQLList(broker) },
    serviceOutput: { type: GraphQLList(Thing) },
    logo: { type: GraphQLList(ImageObject) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    availableChannel: { type: GraphQLList(ServiceChannel) },
    review: { type: GraphQLList(Review) },
    serviceType: { type: GraphQLList(GraphQLString) },
    produces: { type: GraphQLList(Thing) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Campground = new GraphQLObjectType({
  name: 'Campground',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    audience: { type: GraphQLList(Audience) },
    checkinTime: { type: GraphQLList(GraphQLString) },
    petsAllowed: { type: GraphQLList(GraphQLString) },
    availableLanguage: { type: GraphQLList(Language) },
    starRating: { type: GraphQLList(Rating) },
    checkoutTime: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    members: { type: GraphQLList(members) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    employees: { type: GraphQLList(Person) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
  })
});
const TennisComplex = new GraphQLObjectType({
  name: 'TennisComplex',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const Thing = new GraphQLObjectType({
  name: 'Thing',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const SubwayStation = new GraphQLObjectType({
  name: 'SubwayStation',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Courthouse = new GraphQLObjectType({
  name: 'Courthouse',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ReservationStatusType = new GraphQLObjectType({
  name: 'ReservationStatusType',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const HardwareStore = new GraphQLObjectType({
  name: 'HardwareStore',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const AskAction = new GraphQLObjectType({
  name: 'AskAction',
  fields: () => ({
    question: { type: GraphQLList(Question) },
    about: { type: GraphQLList(Thing) },
    inLanguage: { type: GraphQLList(Language) },
    recipient: { type: GraphQLList(recipient) },
    language: { type: GraphQLList(Language) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const VisualArtsEvent = new GraphQLObjectType({
  name: 'VisualArtsEvent',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const DigitalDocument = new GraphQLObjectType({
  name: 'DigitalDocument',
  fields: () => ({
    hasDigitalDocumentPermission: { type: GraphQLList(DigitalDocumentPermission) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const DanceGroup = new GraphQLObjectType({
  name: 'DanceGroup',
  fields: () => ({
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const BeautySalon = new GraphQLObjectType({
  name: 'BeautySalon',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const CommunicateAction = new GraphQLObjectType({
  name: 'CommunicateAction',
  fields: () => ({
    resultComment: { type: GraphQLList(Comment) },
    about: { type: GraphQLList(Thing) },
    inLanguage: { type: GraphQLList(Language) },
    recipient: { type: GraphQLList(recipient) },
    language: { type: GraphQLList(Language) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const MenuItem = new GraphQLObjectType({
  name: 'MenuItem',
  fields: () => ({
    menuAddOn: { type: GraphQLList(menuAddOn) },
    nutrition: { type: GraphQLList(NutritionInformation) },
    offers: { type: GraphQLList(Offer) },
    suitableForDiet: { type: GraphQLList(RestrictedDiet) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const RoofingContractor = new GraphQLObjectType({
  name: 'RoofingContractor',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const GovernmentService = new GraphQLObjectType({
  name: 'GovernmentService',
  fields: () => ({
    serviceOperator: { type: GraphQLList(Organization) },
    serviceArea: { type: GraphQLList(serviceArea) },
    provider: { type: GraphQLList(provider) },
    serviceAudience: { type: GraphQLList(Audience) },
    audience: { type: GraphQLList(Audience) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    hoursAvailable: { type: GraphQLList(OpeningHoursSpecification) },
    providerMobility: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    broker: { type: GraphQLList(broker) },
    serviceOutput: { type: GraphQLList(Thing) },
    logo: { type: GraphQLList(ImageObject) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    availableChannel: { type: GraphQLList(ServiceChannel) },
    review: { type: GraphQLList(Review) },
    serviceType: { type: GraphQLList(GraphQLString) },
    produces: { type: GraphQLList(Thing) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const DeliveryEvent = new GraphQLObjectType({
  name: 'DeliveryEvent',
  fields: () => ({
    hasDeliveryMethod: { type: GraphQLList(DeliveryMethod) },
    availableThrough: { type: GraphQLList(GraphQLString) },
    availableFrom: { type: GraphQLList(GraphQLString) },
    accessCode: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const HobbyShop = new GraphQLObjectType({
  name: 'HobbyShop',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const FollowAction = new GraphQLObjectType({
  name: 'FollowAction',
  fields: () => ({
    followee: { type: GraphQLList(followee) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ChildrensEvent = new GraphQLObjectType({
  name: 'ChildrensEvent',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const RVPark = new GraphQLObjectType({
  name: 'RVPark',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const SingleFamilyResidence = new GraphQLObjectType({
  name: 'SingleFamilyResidence',
  fields: () => ({
    occupancy: { type: GraphQLList(QuantitativeValue) },
    numberOfRooms: { type: GraphQLList(QuantitativeValue) },
    floorSize: { type: GraphQLList(QuantitativeValue) },
    petsAllowed: { type: GraphQLList(GraphQLString) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    permittedUsage: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const WholesaleStore = new GraphQLObjectType({
  name: 'WholesaleStore',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const RentalCarReservation = new GraphQLObjectType({
  name: 'RentalCarReservation',
  fields: () => ({
    dropoffTime: { type: GraphQLList(GraphQLString) },
    dropoffLocation: { type: GraphQLList(Place) },
    pickupLocation: { type: GraphQLList(Place) },
    pickupTime: { type: GraphQLList(GraphQLString) },
    provider: { type: GraphQLList(provider) },
    programMembershipUsed: { type: GraphQLList(ProgramMembership) },
    reservationStatus: { type: GraphQLList(ReservationStatusType) },
    underName: { type: GraphQLList(underName) },
    bookingAgent: { type: GraphQLList(bookingAgent) },
    totalPrice: { type: GraphQLList(PriceSpecification) },
    reservationFor: { type: GraphQLList(Thing) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    broker: { type: GraphQLList(broker) },
    modifiedTime: { type: GraphQLList(GraphQLString) },
    bookingTime: { type: GraphQLList(GraphQLString) },
    reservationId: { type: GraphQLList(GraphQLString) },
    reservedTicket: { type: GraphQLList(Ticket) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const TravelAction = new GraphQLObjectType({
  name: 'TravelAction',
  fields: () => ({
    distance: { type: GraphQLList(Distance) },
    toLocation: { type: GraphQLList(Place) },
    fromLocation: { type: GraphQLList(Place) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const OrganizationRole = new GraphQLObjectType({
  name: 'OrganizationRole',
  fields: () => ({
    numberedPosition: { type: GraphQLList(GraphQLFloat) },
    endDate: { type: GraphQLList(GraphQLString) },
    startDate: { type: GraphQLList(GraphQLString) },
    namedPosition: { type: GraphQLList(GraphQLString) },
    roleName: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const SkiResort = new GraphQLObjectType({
  name: 'SkiResort',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const AutomatedTeller = new GraphQLObjectType({
  name: 'AutomatedTeller',
  fields: () => ({
    feesAndCommissionsSpecification: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const Canal = new GraphQLObjectType({
  name: 'Canal',
  fields: () => ({
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const NGO = new GraphQLObjectType({
  name: 'NGO',
  fields: () => ({
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const TVSeries = new GraphQLObjectType({
  name: 'TVSeries',
  fields: () => ({
    seasons: { type: GraphQLList(CreativeWorkSeason) },
    actor: { type: GraphQLList(Person) },
    numberOfEpisodes: { type: GraphQLList(GraphQLInt) },
    trailer: { type: GraphQLList(VideoObject) },
    season: { type: GraphQLList(CreativeWorkSeason) },
    episodes: { type: GraphQLList(Episode) },
    countryOfOrigin: { type: GraphQLList(Country) },
    musicBy: { type: GraphQLList(musicBy) },
    containsSeason: { type: GraphQLList(CreativeWorkSeason) },
    directors: { type: GraphQLList(Person) },
    numberOfSeasons: { type: GraphQLList(GraphQLInt) },
    director: { type: GraphQLList(Person) },
    productionCompany: { type: GraphQLList(Organization) },
    actors: { type: GraphQLList(Person) },
    episode: { type: GraphQLList(Episode) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    endDate: { type: GraphQLList(GraphQLString) },
    issn: { type: GraphQLList(GraphQLString) },
    startDate: { type: GraphQLList(GraphQLString) },
  })
});
const BarOrPub = new GraphQLObjectType({
  name: 'BarOrPub',
  fields: () => ({
    servesCuisine: { type: GraphQLList(GraphQLString) },
    hasMenu: { type: GraphQLList(Menu) },
    menu: { type: GraphQLList(Menu) },
    starRating: { type: GraphQLList(Rating) },
    acceptsReservations: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const FMRadioChannel = new GraphQLObjectType({
  name: 'FMRadioChannel',
  fields: () => ({
    broadcastFrequency: { type: GraphQLList(BroadcastFrequencySpecification) },
    broadcastChannelId: { type: GraphQLList(GraphQLString) },
    broadcastServiceTier: { type: GraphQLList(GraphQLString) },
    inBroadcastLineup: { type: GraphQLList(CableOrSatelliteService) },
    providesBroadcastService: { type: GraphQLList(BroadcastService) },
    genre: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Distance = new GraphQLObjectType({
  name: 'Distance',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const MusicPlaylist = new GraphQLObjectType({
  name: 'MusicPlaylist',
  fields: () => ({
    numTracks: { type: GraphQLList(GraphQLInt) },
    track: { type: GraphQLList(track) },
    tracks: { type: GraphQLList(MusicRecording) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const QuantitativeValue = new GraphQLObjectType({
  name: 'QuantitativeValue',
  fields: () => ({
    unitCode: { type: GraphQLList(GraphQLString) },
    minValue: { type: GraphQLList(GraphQLFloat) },
    value: { type: GraphQLList(StructuredValue) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    valueReference: { type: GraphQLList(valueReference) },
    maxValue: { type: GraphQLList(GraphQLFloat) },
    unitText: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const BedDetails = new GraphQLObjectType({
  name: 'BedDetails',
  fields: () => ({
    typeOfBed: { type: GraphQLList(BedType) },
    numberOfBeds: { type: GraphQLList(GraphQLFloat) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const OwnershipInfo = new GraphQLObjectType({
  name: 'OwnershipInfo',
  fields: () => ({
    typeOfGood: { type: GraphQLList(typeOfGood) },
    ownedThrough: { type: GraphQLList(GraphQLString) },
    acquiredFrom: { type: GraphQLList(acquiredFrom) },
    ownedFrom: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const MensClothingStore = new GraphQLObjectType({
  name: 'MensClothingStore',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const AcceptAction = new GraphQLObjectType({
  name: 'AcceptAction',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Language = new GraphQLObjectType({
  name: 'Language',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const NewsArticle = new GraphQLObjectType({
  name: 'NewsArticle',
  fields: () => ({
    printColumn: { type: GraphQLList(GraphQLString) },
    printEdition: { type: GraphQLList(GraphQLString) },
    printSection: { type: GraphQLList(GraphQLString) },
    printPage: { type: GraphQLList(GraphQLString) },
    dateline: { type: GraphQLList(GraphQLString) },
    pagination: { type: GraphQLList(GraphQLString) },
    wordCount: { type: GraphQLList(GraphQLInt) },
    speakable: { type: GraphQLList(SpeakableSpecification) },
    pageEnd: { type: GraphQLList(GraphQLString) },
    articleSection: { type: GraphQLList(GraphQLString) },
    articleBody: { type: GraphQLList(GraphQLString) },
    pageStart: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const TheaterGroup = new GraphQLObjectType({
  name: 'TheaterGroup',
  fields: () => ({
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ParcelDelivery = new GraphQLObjectType({
  name: 'ParcelDelivery',
  fields: () => ({
    provider: { type: GraphQLList(provider) },
    trackingUrl: { type: GraphQLList(GraphQLString) },
    deliveryAddress: { type: GraphQLList(PostalAddress) },
    trackingNumber: { type: GraphQLList(GraphQLString) },
    hasDeliveryMethod: { type: GraphQLList(DeliveryMethod) },
    deliveryStatus: { type: GraphQLList(DeliveryEvent) },
    carrier: { type: GraphQLList(Organization) },
    originAddress: { type: GraphQLList(PostalAddress) },
    itemShipped: { type: GraphQLList(Product) },
    partOfOrder: { type: GraphQLList(Order) },
    expectedArrivalFrom: { type: GraphQLList(GraphQLString) },
    expectedArrivalUntil: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const BoardingPolicyType = new GraphQLObjectType({
  name: 'BoardingPolicyType',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Pond = new GraphQLObjectType({
  name: 'Pond',
  fields: () => ({
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Answer = new GraphQLObjectType({
  name: 'Answer',
  fields: () => ({
    upvoteCount: { type: GraphQLList(GraphQLInt) },
    parentItem: { type: GraphQLList(Question) },
    downvoteCount: { type: GraphQLList(GraphQLInt) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Brewery = new GraphQLObjectType({
  name: 'Brewery',
  fields: () => ({
    servesCuisine: { type: GraphQLList(GraphQLString) },
    hasMenu: { type: GraphQLList(Menu) },
    menu: { type: GraphQLList(Menu) },
    starRating: { type: GraphQLList(Rating) },
    acceptsReservations: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const AllocateAction = new GraphQLObjectType({
  name: 'AllocateAction',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ParentAudience = new GraphQLObjectType({
  name: 'ParentAudience',
  fields: () => ({
    childMaxAge: { type: GraphQLList(GraphQLFloat) },
    childMinAge: { type: GraphQLList(GraphQLFloat) },
    suggestedMaxAge: { type: GraphQLList(GraphQLFloat) },
    requiredMinAge: { type: GraphQLList(GraphQLInt) },
    requiredGender: { type: GraphQLList(GraphQLString) },
    suggestedGender: { type: GraphQLList(GraphQLString) },
    requiredMaxAge: { type: GraphQLList(GraphQLInt) },
    suggestedMinAge: { type: GraphQLList(GraphQLFloat) },
    audienceType: { type: GraphQLList(GraphQLString) },
    geographicArea: { type: GraphQLList(AdministrativeArea) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const RadioChannel = new GraphQLObjectType({
  name: 'RadioChannel',
  fields: () => ({
    broadcastFrequency: { type: GraphQLList(BroadcastFrequencySpecification) },
    broadcastChannelId: { type: GraphQLList(GraphQLString) },
    broadcastServiceTier: { type: GraphQLList(GraphQLString) },
    inBroadcastLineup: { type: GraphQLList(CableOrSatelliteService) },
    providesBroadcastService: { type: GraphQLList(BroadcastService) },
    genre: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Room = new GraphQLObjectType({
  name: 'Room',
  fields: () => ({
    floorSize: { type: GraphQLList(QuantitativeValue) },
    petsAllowed: { type: GraphQLList(GraphQLString) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    numberOfRooms: { type: GraphQLList(QuantitativeValue) },
    permittedUsage: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const PublicSwimmingPool = new GraphQLObjectType({
  name: 'PublicSwimmingPool',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const JobPosting = new GraphQLObjectType({
  name: 'JobPosting',
  fields: () => ({
    benefits: { type: GraphQLList(GraphQLString) },
    incentiveCompensation: { type: GraphQLList(GraphQLString) },
    workHours: { type: GraphQLList(GraphQLString) },
    salaryCurrency: { type: GraphQLList(GraphQLString) },
    jobBenefits: { type: GraphQLList(GraphQLString) },
    datePosted: { type: GraphQLList(GraphQLString) },
    skills: { type: GraphQLList(GraphQLString) },
    incentives: { type: GraphQLList(GraphQLString) },
    responsibilities: { type: GraphQLList(GraphQLString) },
    baseSalary: { type: GraphQLList(baseSalary) },
    validThrough: { type: GraphQLList(GraphQLString) },
    hiringOrganization: { type: GraphQLList(Organization) },
    relevantOccupation: { type: GraphQLList(Occupation) },
    specialCommitments: { type: GraphQLList(GraphQLString) },
    occupationalCategory: { type: GraphQLList(GraphQLString) },
    experienceRequirements: { type: GraphQLList(GraphQLString) },
    employmentType: { type: GraphQLList(GraphQLString) },
    jobLocation: { type: GraphQLList(Place) },
    title: { type: GraphQLList(GraphQLString) },
    industry: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const MusicReleaseFormatType = new GraphQLObjectType({
  name: 'MusicReleaseFormatType',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const FinancialProduct = new GraphQLObjectType({
  name: 'FinancialProduct',
  fields: () => ({
    interestRate: { type: GraphQLList(QuantitativeValue) },
    feesAndCommissionsSpecification: { type: GraphQLList(GraphQLString) },
    annualPercentageRate: { type: GraphQLList(QuantitativeValue) },
    serviceArea: { type: GraphQLList(serviceArea) },
    provider: { type: GraphQLList(provider) },
    serviceAudience: { type: GraphQLList(Audience) },
    audience: { type: GraphQLList(Audience) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    hoursAvailable: { type: GraphQLList(OpeningHoursSpecification) },
    providerMobility: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    broker: { type: GraphQLList(broker) },
    serviceOutput: { type: GraphQLList(Thing) },
    logo: { type: GraphQLList(ImageObject) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    availableChannel: { type: GraphQLList(ServiceChannel) },
    review: { type: GraphQLList(Review) },
    serviceType: { type: GraphQLList(GraphQLString) },
    produces: { type: GraphQLList(Thing) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const PerformingGroup = new GraphQLObjectType({
  name: 'PerformingGroup',
  fields: () => ({
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const MediaObject = new GraphQLObjectType({
  name: 'MediaObject',
  fields: () => ({
    startTime: { type: GraphQLList(GraphQLString) },
    uploadDate: { type: GraphQLList(GraphQLString) },
    playerType: { type: GraphQLList(GraphQLString) },
    height: { type: GraphQLList(height) },
    bitrate: { type: GraphQLList(GraphQLString) },
    requiresSubscription: { type: GraphQLList(MediaSubscription) },
    regionsAllowed: { type: GraphQLList(Place) },
    endTime: { type: GraphQLList(GraphQLString) },
    contentSize: { type: GraphQLList(GraphQLString) },
    embedUrl: { type: GraphQLList(GraphQLString) },
    width: { type: GraphQLList(width) },
    contentUrl: { type: GraphQLList(GraphQLString) },
    associatedArticle: { type: GraphQLList(NewsArticle) },
    productionCompany: { type: GraphQLList(Organization) },
    duration: { type: GraphQLList(Duration) },
    encodesCreativeWork: { type: GraphQLList(CreativeWork) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Cemetery = new GraphQLObjectType({
  name: 'Cemetery',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const AccountingService = new GraphQLObjectType({
  name: 'AccountingService',
  fields: () => ({
    feesAndCommissionsSpecification: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const CheckInAction = new GraphQLObjectType({
  name: 'CheckInAction',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    inLanguage: { type: GraphQLList(Language) },
    recipient: { type: GraphQLList(recipient) },
    language: { type: GraphQLList(Language) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const DayOfWeek = new GraphQLObjectType({
  name: 'DayOfWeek',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const BusinessAudience = new GraphQLObjectType({
  name: 'BusinessAudience',
  fields: () => ({
    yearsInOperation: { type: GraphQLList(QuantitativeValue) },
    yearlyRevenue: { type: GraphQLList(QuantitativeValue) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    audienceType: { type: GraphQLList(GraphQLString) },
    geographicArea: { type: GraphQLList(AdministrativeArea) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const LodgingBusiness = new GraphQLObjectType({
  name: 'LodgingBusiness',
  fields: () => ({
    audience: { type: GraphQLList(Audience) },
    checkinTime: { type: GraphQLList(GraphQLString) },
    petsAllowed: { type: GraphQLList(GraphQLString) },
    availableLanguage: { type: GraphQLList(Language) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    starRating: { type: GraphQLList(Rating) },
    checkoutTime: { type: GraphQLList(GraphQLString) },
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const Airport = new GraphQLObjectType({
  name: 'Airport',
  fields: () => ({
    iataCode: { type: GraphQLList(GraphQLString) },
    icaoCode: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const EventStatusType = new GraphQLObjectType({
  name: 'EventStatusType',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const CreativeWorkSeason = new GraphQLObjectType({
  name: 'CreativeWorkSeason',
  fields: () => ({
    actor: { type: GraphQLList(Person) },
    numberOfEpisodes: { type: GraphQLList(GraphQLInt) },
    trailer: { type: GraphQLList(VideoObject) },
    endDate: { type: GraphQLList(GraphQLString) },
    partOfSeries: { type: GraphQLList(CreativeWorkSeries) },
    episodes: { type: GraphQLList(Episode) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    productionCompany: { type: GraphQLList(Organization) },
    episode: { type: GraphQLList(Episode) },
    seasonNumber: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Reservation = new GraphQLObjectType({
  name: 'Reservation',
  fields: () => ({
    provider: { type: GraphQLList(provider) },
    programMembershipUsed: { type: GraphQLList(ProgramMembership) },
    reservationStatus: { type: GraphQLList(ReservationStatusType) },
    underName: { type: GraphQLList(underName) },
    bookingAgent: { type: GraphQLList(bookingAgent) },
    totalPrice: { type: GraphQLList(PriceSpecification) },
    reservationFor: { type: GraphQLList(Thing) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    broker: { type: GraphQLList(broker) },
    modifiedTime: { type: GraphQLList(GraphQLString) },
    bookingTime: { type: GraphQLList(GraphQLString) },
    reservationId: { type: GraphQLList(GraphQLString) },
    reservedTicket: { type: GraphQLList(Ticket) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const FindAction = new GraphQLObjectType({
  name: 'FindAction',
  fields: () => ({
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const RecyclingCenter = new GraphQLObjectType({
  name: 'RecyclingCenter',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const Hospital = new GraphQLObjectType({
  name: 'Hospital',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const Festival = new GraphQLObjectType({
  name: 'Festival',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const LockerDelivery = new GraphQLObjectType({
  name: 'LockerDelivery',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const RadioSeason = new GraphQLObjectType({
  name: 'RadioSeason',
  fields: () => ({
    actor: { type: GraphQLList(Person) },
    numberOfEpisodes: { type: GraphQLList(GraphQLInt) },
    trailer: { type: GraphQLList(VideoObject) },
    endDate: { type: GraphQLList(GraphQLString) },
    partOfSeries: { type: GraphQLList(CreativeWorkSeries) },
    episodes: { type: GraphQLList(Episode) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    productionCompany: { type: GraphQLList(Organization) },
    episode: { type: GraphQLList(Episode) },
    seasonNumber: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const UpdateAction = new GraphQLObjectType({
  name: 'UpdateAction',
  fields: () => ({
    collection: { type: GraphQLList(Thing) },
    targetCollection: { type: GraphQLList(Thing) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const AggregateRating = new GraphQLObjectType({
  name: 'AggregateRating',
  fields: () => ({
    itemReviewed: { type: GraphQLList(Thing) },
    reviewCount: { type: GraphQLList(GraphQLInt) },
    ratingCount: { type: GraphQLList(GraphQLInt) },
    ratingValue: { type: GraphQLList(GraphQLString) },
    bestRating: { type: GraphQLList(GraphQLString) },
    reviewAspect: { type: GraphQLList(GraphQLString) },
    author: { type: GraphQLList(author) },
    worstRating: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const ReplyAction = new GraphQLObjectType({
  name: 'ReplyAction',
  fields: () => ({
    resultComment: { type: GraphQLList(Comment) },
    about: { type: GraphQLList(Thing) },
    inLanguage: { type: GraphQLList(Language) },
    recipient: { type: GraphQLList(recipient) },
    language: { type: GraphQLList(Language) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const EmailMessage = new GraphQLObjectType({
  name: 'EmailMessage',
  fields: () => ({
    dateRead: { type: GraphQLList(GraphQLString) },
    bccRecipient: { type: GraphQLList(bccRecipient) },
    dateSent: { type: GraphQLList(GraphQLString) },
    ccRecipient: { type: GraphQLList(ccRecipient) },
    recipient: { type: GraphQLList(recipient) },
    messageAttachment: { type: GraphQLList(CreativeWork) },
    dateReceived: { type: GraphQLList(GraphQLString) },
    toRecipient: { type: GraphQLList(toRecipient) },
    sender: { type: GraphQLList(sender) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const BusStation = new GraphQLObjectType({
  name: 'BusStation',
  fields: () => ({
    openingHours: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const BowlingAlley = new GraphQLObjectType({
  name: 'BowlingAlley',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const ImageGallery = new GraphQLObjectType({
  name: 'ImageGallery',
  fields: () => ({
    speakable: { type: GraphQLList(SpeakableSpecification) },
    breadcrumb: { type: GraphQLList(BreadcrumbList) },
    significantLink: { type: GraphQLList(GraphQLString) },
    relatedLink: { type: GraphQLList(GraphQLString) },
    lastReviewed: { type: GraphQLList(GraphQLString) },
    mainContentOfPage: { type: GraphQLList(WebPageElement) },
    reviewedBy: { type: GraphQLList(reviewedBy) },
    primaryImageOfPage: { type: GraphQLList(ImageObject) },
    significantLinks: { type: GraphQLList(GraphQLString) },
    specialty: { type: GraphQLList(Specialty) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Offer = new GraphQLObjectType({
  name: 'Offer',
  fields: () => ({
    sku: { type: GraphQLList(GraphQLString) },
    availabilityStarts: { type: GraphQLList(GraphQLString) },
    availableDeliveryMethod: { type: GraphQLList(DeliveryMethod) },
    mpn: { type: GraphQLList(GraphQLString) },
    serialNumber: { type: GraphQLList(GraphQLString) },
    ineligibleRegion: { type: GraphQLList(ineligibleRegion) },
    gtin8: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    availability: { type: GraphQLList(ItemAvailability) },
    priceSpecification: { type: GraphQLList(PriceSpecification) },
    inventoryLevel: { type: GraphQLList(QuantitativeValue) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    eligibleTransactionVolume: { type: GraphQLList(PriceSpecification) },
    availableAtOrFrom: { type: GraphQLList(Place) },
    priceCurrency: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    priceValidUntil: { type: GraphQLList(GraphQLString) },
    addOn: { type: GraphQLList(Offer) },
    warranty: { type: GraphQLList(WarrantyPromise) },
    eligibleQuantity: { type: GraphQLList(QuantitativeValue) },
    validFrom: { type: GraphQLList(GraphQLString) },
    validThrough: { type: GraphQLList(GraphQLString) },
    price: { type: GraphQLList(GraphQLString) },
    gtin14: { type: GraphQLList(GraphQLString) },
    gtin13: { type: GraphQLList(GraphQLString) },
    gtin12: { type: GraphQLList(GraphQLString) },
    seller: { type: GraphQLList(seller) },
    deliveryLeadTime: { type: GraphQLList(QuantitativeValue) },
    availabilityEnds: { type: GraphQLList(GraphQLString) },
    includesObject: { type: GraphQLList(TypeAndQuantityNode) },
    review: { type: GraphQLList(Review) },
    businessFunction: { type: GraphQLList(BusinessFunction) },
    eligibleCustomerType: { type: GraphQLList(BusinessEntityType) },
    itemCondition: { type: GraphQLList(OfferItemCondition) },
    itemOffered: { type: GraphQLList(itemOffered) },
    offeredBy: { type: GraphQLList(offeredBy) },
    eligibleDuration: { type: GraphQLList(QuantitativeValue) },
    acceptedPaymentMethod: { type: GraphQLList(acceptedPaymentMethod) },
    areaServed: { type: GraphQLList(areaServed) },
    eligibleRegion: { type: GraphQLList(eligibleRegion) },
    advanceBookingRequirement: { type: GraphQLList(QuantitativeValue) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const DataDownload = new GraphQLObjectType({
  name: 'DataDownload',
  fields: () => ({
    startTime: { type: GraphQLList(GraphQLString) },
    uploadDate: { type: GraphQLList(GraphQLString) },
    playerType: { type: GraphQLList(GraphQLString) },
    height: { type: GraphQLList(height) },
    bitrate: { type: GraphQLList(GraphQLString) },
    requiresSubscription: { type: GraphQLList(MediaSubscription) },
    regionsAllowed: { type: GraphQLList(Place) },
    endTime: { type: GraphQLList(GraphQLString) },
    contentSize: { type: GraphQLList(GraphQLString) },
    embedUrl: { type: GraphQLList(GraphQLString) },
    width: { type: GraphQLList(width) },
    contentUrl: { type: GraphQLList(GraphQLString) },
    associatedArticle: { type: GraphQLList(NewsArticle) },
    productionCompany: { type: GraphQLList(Organization) },
    duration: { type: GraphQLList(Duration) },
    encodesCreativeWork: { type: GraphQLList(CreativeWork) },
    encodingFormat: { type: GraphQLList(GraphQLString) },
    about: { type: GraphQLList(Thing) },
    accessibilitySummary: { type: GraphQLList(GraphQLString) },
    educationalAlignment: { type: GraphQLList(AlignmentObject) },
    associatedMedia: { type: GraphQLList(MediaObject) },
    funder: { type: GraphQLList(funder) },
    audio: { type: GraphQLList(audio) },
    provider: { type: GraphQLList(provider) },
    encoding: { type: GraphQLList(MediaObject) },
    interactivityType: { type: GraphQLList(GraphQLString) },
    character: { type: GraphQLList(Person) },
    audience: { type: GraphQLList(Audience) },
    sourceOrganization: { type: GraphQLList(Organization) },
    isPartOf: { type: GraphQLList(CreativeWork) },
    video: { type: GraphQLList(video) },
    publication: { type: GraphQLList(PublicationEvent) },
    text: { type: GraphQLList(GraphQLString) },
    expires: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    publisher: { type: GraphQLList(publisher) },
    reviews: { type: GraphQLList(Review) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    position: { type: GraphQLList(GraphQLString) },
    releasedEvent: { type: GraphQLList(PublicationEvent) },
    contentLocation: { type: GraphQLList(Place) },
    schemaVersion: { type: GraphQLList(GraphQLString) },
    accessibilityFeature: { type: GraphQLList(GraphQLString) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    locationCreated: { type: GraphQLList(Place) },
    accessModeSufficient: { type: GraphQLList(GraphQLString) },
    temporalCoverage: { type: GraphQLList(GraphQLString) },
    accountablePerson: { type: GraphQLList(Person) },
    spatialCoverage: { type: GraphQLList(Place) },
    offers: { type: GraphQLList(Offer) },
    editor: { type: GraphQLList(Person) },
    discussionUrl: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    copyrightHolder: { type: GraphQLList(copyrightHolder) },
    accessibilityHazard: { type: GraphQLList(GraphQLString) },
    copyrightYear: { type: GraphQLList(GraphQLFloat) },
    awards: { type: GraphQLList(GraphQLString) },
    recordedAt: { type: GraphQLList(Event) },
    spatial: { type: GraphQLList(Place) },
    commentCount: { type: GraphQLList(GraphQLInt) },
    fileFormat: { type: GraphQLList(GraphQLString) },
    inLanguage: { type: GraphQLList(Language) },
    temporal: { type: GraphQLList(GraphQLString) },
    accessibilityAPI: { type: GraphQLList(GraphQLString) },
    interactionStatistic: { type: GraphQLList(InteractionCounter) },
    contentRating: { type: GraphQLList(Rating) },
    learningResourceType: { type: GraphQLList(GraphQLString) },
    accessMode: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    isFamilyFriendly: { type: GraphQLList(GraphQLBoolean) },
    exampleOfWork: { type: GraphQLList(CreativeWork) },
    version: { type: GraphQLList(GraphQLString) },
    dateModified: { type: GraphQLList(GraphQLString) },
    keywords: { type: GraphQLList(GraphQLString) },
    genre: { type: GraphQLList(GraphQLString) },
    mainEntity: { type: GraphQLList(Thing) },
    author: { type: GraphQLList(author) },
    encodings: { type: GraphQLList(MediaObject) },
    isBasedOnUrl: { type: GraphQLList(isBasedOnUrl) },
    timeRequired: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    thumbnailUrl: { type: GraphQLList(GraphQLString) },
    hasPart: { type: GraphQLList(CreativeWork) },
    comment: { type: GraphQLList(Comment) },
    review: { type: GraphQLList(Review) },
    license: { type: GraphQLList(CreativeWork) },
    accessibilityControl: { type: GraphQLList(GraphQLString) },
    isBasedOn: { type: GraphQLList(isBasedOn) },
    creator: { type: GraphQLList(creator) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    producer: { type: GraphQLList(producer) },
    mentions: { type: GraphQLList(Thing) },
    workExample: { type: GraphQLList(CreativeWork) },
    dateCreated: { type: GraphQLList(GraphQLString) },
    educationalUse: { type: GraphQLList(GraphQLString) },
    datePublished: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    alternativeHeadline: { type: GraphQLList(GraphQLString) },
    headline: { type: GraphQLList(GraphQLString) },
    citation: { type: GraphQLList(CreativeWork) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const Product = new GraphQLObjectType({
  name: 'Product',
  fields: () => ({
    manufacturer: { type: GraphQLList(Organization) },
    sku: { type: GraphQLList(GraphQLString) },
    productionDate: { type: GraphQLList(GraphQLString) },
    audience: { type: GraphQLList(Audience) },
    mpn: { type: GraphQLList(GraphQLString) },
    height: { type: GraphQLList(height) },
    gtin8: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    isConsumableFor: { type: GraphQLList(Product) },
    offers: { type: GraphQLList(Offer) },
    award: { type: GraphQLList(GraphQLString) },
    category: { type: GraphQLList(Thing) },
    width: { type: GraphQLList(width) },
    awards: { type: GraphQLList(GraphQLString) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    isAccessoryOrSparePartFor: { type: GraphQLList(Product) },
    logo: { type: GraphQLList(ImageObject) },
    gtin14: { type: GraphQLList(GraphQLString) },
    gtin13: { type: GraphQLList(GraphQLString) },
    gtin12: { type: GraphQLList(GraphQLString) },
    material: { type: GraphQLList(Product) },
    weight: { type: GraphQLList(QuantitativeValue) },
    depth: { type: GraphQLList(depth) },
    isSimilarTo: { type: GraphQLList(isSimilarTo) },
    model: { type: GraphQLList(ProductModel) },
    color: { type: GraphQLList(GraphQLString) },
    isRelatedTo: { type: GraphQLList(isRelatedTo) },
    productID: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    purchaseDate: { type: GraphQLList(GraphQLString) },
    itemCondition: { type: GraphQLList(OfferItemCondition) },
    slogan: { type: GraphQLList(GraphQLString) },
    brand: { type: GraphQLList(brand) },
    releaseDate: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const CampingPitch = new GraphQLObjectType({
  name: 'CampingPitch',
  fields: () => ({
    floorSize: { type: GraphQLList(QuantitativeValue) },
    petsAllowed: { type: GraphQLList(GraphQLString) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    numberOfRooms: { type: GraphQLList(QuantitativeValue) },
    permittedUsage: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    address: { type: GraphQLList(PostalAddress) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    reviews: { type: GraphQLList(Review) },
    geoCrosses: { type: GraphQLList(Place) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    logo: { type: GraphQLList(ImageObject) },
    telephone: { type: GraphQLList(GraphQLString) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    event: { type: GraphQLList(Event) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const GeoCoordinates = new GraphQLObjectType({
  name: 'GeoCoordinates',
  fields: () => ({
    address: { type: GraphQLList(PostalAddress) },
    latitude: { type: GraphQLList(GraphQLString) },
    longitude: { type: GraphQLList(GraphQLString) },
    addressCountry: { type: GraphQLList(Country) },
    postalCode: { type: GraphQLList(GraphQLString) },
    elevation: { type: GraphQLList(GraphQLString) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const MiddleSchool = new GraphQLObjectType({
  name: 'MiddleSchool',
  fields: () => ({
    alumni: { type: GraphQLList(Person) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const AutomotiveBusiness = new GraphQLObjectType({
  name: 'AutomotiveBusiness',
  fields: () => ({
    priceRange: { type: GraphQLList(GraphQLString) },
    branchOf: { type: GraphQLList(Organization) },
    paymentAccepted: { type: GraphQLList(GraphQLString) },
    openingHours: { type: GraphQLList(GraphQLString) },
    currenciesAccepted: { type: GraphQLList(GraphQLString) },
    serviceArea: { type: GraphQLList(serviceArea) },
    memberOf: { type: GraphQLList(memberOf) },
    address: { type: GraphQLList(PostalAddress) },
    funder: { type: GraphQLList(funder) },
    subOrganization: { type: GraphQLList(Organization) },
    hasOfferCatalog: { type: GraphQLList(OfferCatalog) },
    globalLocationNumber: { type: GraphQLList(GraphQLString) },
    reviews: { type: GraphQLList(Review) },
    members: { type: GraphQLList(members) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    duns: { type: GraphQLList(GraphQLString) },
    taxID: { type: GraphQLList(GraphQLString) },
    award: { type: GraphQLList(GraphQLString) },
    makesOffer: { type: GraphQLList(Offer) },
    contactPoints: { type: GraphQLList(ContactPoint) },
    awards: { type: GraphQLList(GraphQLString) },
    foundingDate: { type: GraphQLList(GraphQLString) },
    seeks: { type: GraphQLList(Demand) },
    member: { type: GraphQLList(member) },
    founders: { type: GraphQLList(Person) },
    alumni: { type: GraphQLList(Person) },
    dissolutionDate: { type: GraphQLList(GraphQLString) },
    events: { type: GraphQLList(Event) },
    logo: { type: GraphQLList(ImageObject) },
    employees: { type: GraphQLList(Person) },
    telephone: { type: GraphQLList(GraphQLString) },
    email: { type: GraphQLList(GraphQLString) },
    department: { type: GraphQLList(Organization) },
    contactPoint: { type: GraphQLList(ContactPoint) },
    parentOrganization: { type: GraphQLList(Organization) },
    legalName: { type: GraphQLList(GraphQLString) },
    employee: { type: GraphQLList(Person) },
    numberOfEmployees: { type: GraphQLList(QuantitativeValue) },
    naics: { type: GraphQLList(GraphQLString) },
    hasPOS: { type: GraphQLList(Place) },
    review: { type: GraphQLList(Review) },
    foundingLocation: { type: GraphQLList(Place) },
    owns: { type: GraphQLList(owns) },
    event: { type: GraphQLList(Event) },
    founder: { type: GraphQLList(Person) },
    publishingPrinciples: { type: GraphQLList(CreativeWork) },
    sponsor: { type: GraphQLList(sponsor) },
    isicV4: { type: GraphQLList(GraphQLString) },
    slogan: { type: GraphQLList(GraphQLString) },
    location: { type: GraphQLList(location) },
    brand: { type: GraphQLList(brand) },
    vatID: { type: GraphQLList(GraphQLString) },
    leiCode: { type: GraphQLList(GraphQLString) },
    faxNumber: { type: GraphQLList(GraphQLString) },
    areaServed: { type: GraphQLList(areaServed) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
    geoWithin: { type: GraphQLList(Place) },
    geoContains: { type: GraphQLList(Place) },
    photo: { type: GraphQLList(photo) },
    openingHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    maps: { type: GraphQLList(GraphQLString) },
    containedInPlace: { type: GraphQLList(Place) },
    geoOverlaps: { type: GraphQLList(Place) },
    smokingAllowed: { type: GraphQLList(GraphQLBoolean) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    geoCrosses: { type: GraphQLList(Place) },
    photos: { type: GraphQLList(photos) },
    map: { type: GraphQLList(GraphQLString) },
    branchCode: { type: GraphQLList(GraphQLString) },
    hasMap: { type: GraphQLList(Map) },
    additionalProperty: { type: GraphQLList(GraphQLString) },
    specialOpeningHoursSpecification: { type: GraphQLList(OpeningHoursSpecification) },
    amenityFeature: { type: GraphQLList(LocationFeatureSpecification) },
    geo: { type: GraphQLList(geo) },
    geoCovers: { type: GraphQLList(Place) },
    geoEquals: { type: GraphQLList(Place) },
    publicAccess: { type: GraphQLList(GraphQLBoolean) },
    geoTouches: { type: GraphQLList(Place) },
    containsPlace: { type: GraphQLList(Place) },
    geoIntersects: { type: GraphQLList(Place) },
    geoDisjoint: { type: GraphQLList(Place) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    geoCoveredBy: { type: GraphQLList(Place) },
    containedIn: { type: GraphQLList(Place) },
  })
});
const LiteraryEvent = new GraphQLObjectType({
  name: 'LiteraryEvent',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const SocialEvent = new GraphQLObjectType({
  name: 'SocialEvent',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const EatAction = new GraphQLObjectType({
  name: 'EatAction',
  fields: () => ({
    actionAccessibilityRequirement: { type: GraphQLList(ActionAccessSpecification) },
    expectsAcceptanceOf: { type: GraphQLList(Offer) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const TheaterEvent = new GraphQLObjectType({
  name: 'TheaterEvent',
  fields: () => ({
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const TakeAction = new GraphQLObjectType({
  name: 'TakeAction',
  fields: () => ({
    toLocation: { type: GraphQLList(Place) },
    fromLocation: { type: GraphQLList(Place) },
    result: { type: GraphQLList(Thing) },
    startTime: { type: GraphQLList(GraphQLString) },
    actionStatus: { type: GraphQLList(ActionStatusType) },
    target: { type: GraphQLList(EntryPoint) },
    agent: { type: GraphQLList(agent) },
    endTime: { type: GraphQLList(GraphQLString) },
    participant: { type: GraphQLList(participant) },
    instrument: { type: GraphQLList(Thing) },
    object: { type: GraphQLList(Thing) },
    error: { type: GraphQLList(Thing) },
    location: { type: GraphQLList(location) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const SportsEvent = new GraphQLObjectType({
  name: 'SportsEvent',
  fields: () => ({
    awayTeam: { type: GraphQLList(awayTeam) },
    homeTeam: { type: GraphQLList(homeTeam) },
    competitor: { type: GraphQLList(competitor) },
    about: { type: GraphQLList(Thing) },
    funder: { type: GraphQLList(funder) },
    workFeatured: { type: GraphQLList(CreativeWork) },
    audience: { type: GraphQLList(Audience) },
    remainingAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    actor: { type: GraphQLList(Person) },
    performers: { type: GraphQLList(performers) },
    endDate: { type: GraphQLList(GraphQLString) },
    doorTime: { type: GraphQLList(GraphQLString) },
    contributor: { type: GraphQLList(contributor) },
    maximumAttendeeCapacity: { type: GraphQLList(GraphQLInt) },
    typicalAgeRange: { type: GraphQLList(GraphQLString) },
    organizer: { type: GraphQLList(organizer) },
    attendees: { type: GraphQLList(attendees) },
    aggregateRating: { type: GraphQLList(AggregateRating) },
    subEvent: { type: GraphQLList(Event) },
    subEvents: { type: GraphQLList(Event) },
    offers: { type: GraphQLList(Offer) },
    inLanguage: { type: GraphQLList(Language) },
    attendee: { type: GraphQLList(attendee) },
    workPerformed: { type: GraphQLList(CreativeWork) },
    eventStatus: { type: GraphQLList(EventStatusType) },
    startDate: { type: GraphQLList(GraphQLString) },
    director: { type: GraphQLList(Person) },
    superEvent: { type: GraphQLList(Event) },
    duration: { type: GraphQLList(Duration) },
    translator: { type: GraphQLList(translator) },
    previousStartDate: { type: GraphQLList(GraphQLString) },
    review: { type: GraphQLList(Review) },
    sponsor: { type: GraphQLList(sponsor) },
    location: { type: GraphQLList(location) },
    recordedIn: { type: GraphQLList(CreativeWork) },
    composer: { type: GraphQLList(composer) },
    isAccessibleForFree: { type: GraphQLList(GraphQLBoolean) },
    performer: { type: GraphQLList(performer) },
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});
const GamePlayMode = new GraphQLObjectType({
  name: 'GamePlayMode',
  fields: () => ({
    sameAs: { type: GraphQLList(GraphQLString) },
    alternateName: { type: GraphQLList(GraphQLString) },
    image: { type: GraphQLList(ImageObject) },
    additionalType: { type: GraphQLList(GraphQLString) },
    name: { type: GraphQLList(GraphQLString) },
    identifier: { type: GraphQLString },
    subjectOf: { type: GraphQLList(subjectOf) },
    mainEntityOfPage: { type: GraphQLList(CreativeWork) },
    url: { type: GraphQLList(GraphQLString) },
    potentialAction: { type: GraphQLList(Action) },
    description: { type: GraphQLList(GraphQLString) },
    disambiguatingDescription: { type: GraphQLList(GraphQLString) },
  })
});

const funder = new GraphQLUnionType({
  name: 'funder',
  types: [].concat(
    Organization,
    Person,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const performers = new GraphQLUnionType({
  name: 'performers',
  types: [].concat(
    Organization,
    Person,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const contributor = new GraphQLUnionType({
  name: 'contributor',
  types: [].concat(
    Organization,
    Person,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const organizer = new GraphQLUnionType({
  name: 'organizer',
  types: [].concat(
    Organization,
    Person,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const attendees = new GraphQLUnionType({
  name: 'attendees',
  types: [].concat(
    Organization,
    Person,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const attendee = new GraphQLUnionType({
  name: 'attendee',
  types: [].concat(
    Organization,
    Person,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const translator = new GraphQLUnionType({
  name: 'translator',
  types: [].concat(
    Organization,
    Person,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const sponsor = new GraphQLUnionType({
  name: 'sponsor',
  types: [].concat(
    Organization,
    Person,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const location = new GraphQLUnionType({
  name: 'location',
  types: [].concat(
    Place,
    PostalAddress,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const composer = new GraphQLUnionType({
  name: 'composer',
  types: [].concat(
    Organization,
    Person,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const performer = new GraphQLUnionType({
  name: 'performer',
  types: [].concat(
    Organization,
    Person,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const subjectOf = new GraphQLUnionType({
  name: 'subjectOf',
  types: [].concat(
    Event,
    CreativeWork,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const serviceArea = new GraphQLUnionType({
  name: 'serviceArea',
  types: [].concat(
    AdministrativeArea,
    GeoShape,
    Place,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const memberOf = new GraphQLUnionType({
  name: 'memberOf',
  types: [].concat(
    ProgramMembership,
    Organization,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const members = new GraphQLUnionType({
  name: 'members',
  types: [].concat(
    Organization,
    Person,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const member = new GraphQLUnionType({
  name: 'member',
  types: [].concat(
    Organization,
    Person,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const owns = new GraphQLUnionType({
  name: 'owns',
  types: [].concat(
    Product,
    OwnershipInfo,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const brand = new GraphQLUnionType({
  name: 'brand',
  types: [].concat(
    Organization,
    Brand,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const areaServed = new GraphQLUnionType({
  name: 'areaServed',
  types: [].concat(
    AdministrativeArea,
    GeoShape,
    Place,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const photo = new GraphQLUnionType({
  name: 'photo',
  types: [].concat(
    Photograph,
    ImageObject,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const photos = new GraphQLUnionType({
  name: 'photos',
  types: [].concat(
    Photograph,
    ImageObject,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const geo = new GraphQLUnionType({
  name: 'geo',
  types: [].concat(
    GeoCoordinates,
    GeoShape,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const provider = new GraphQLUnionType({
  name: 'provider',
  types: [].concat(
    Organization,
    Person,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const broker = new GraphQLUnionType({
  name: 'broker',
  types: [].concat(
    Organization,
    Person,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const isSimilarTo = new GraphQLUnionType({
  name: 'isSimilarTo',
  types: [].concat(
    Service,
    Product,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const isRelatedTo = new GraphQLUnionType({
  name: 'isRelatedTo',
  types: [].concat(
    Service,
    Product,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const recipeInstructions = new GraphQLUnionType({
  name: 'recipeInstructions',
  types: [].concat(
    ItemList,
    CreativeWork,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const steps = new GraphQLUnionType({
  name: 'steps',
  types: [].concat(
    ItemList,
    CreativeWork,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const step = new GraphQLUnionType({
  name: 'step',
  types: [].concat(
    HowToSection,
    HowToStep,
    CreativeWork,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const audio = new GraphQLUnionType({
  name: 'audio',
  types: [].concat(
    Clip,
    AudioObject,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const video = new GraphQLUnionType({
  name: 'video',
  types: [].concat(
    VideoObject,
    Clip,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const publisher = new GraphQLUnionType({
  name: 'publisher',
  types: [].concat(
    Organization,
    Person,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const copyrightHolder = new GraphQLUnionType({
  name: 'copyrightHolder',
  types: [].concat(
    Organization,
    Person,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const author = new GraphQLUnionType({
  name: 'author',
  types: [].concat(
    Organization,
    Person,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const isBasedOnUrl = new GraphQLUnionType({
  name: 'isBasedOnUrl',
  types: [].concat(
    Product,
    CreativeWork,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const isBasedOn = new GraphQLUnionType({
  name: 'isBasedOn',
  types: [].concat(
    Product,
    CreativeWork,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const creator = new GraphQLUnionType({
  name: 'creator',
  types: [].concat(
    Organization,
    Person,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const producer = new GraphQLUnionType({
  name: 'producer',
  types: [].concat(
    Organization,
    Person,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const ineligibleRegion = new GraphQLUnionType({
  name: 'ineligibleRegion',
  types: [].concat(
    Place,
    GeoShape,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const seller = new GraphQLUnionType({
  name: 'seller',
  types: [].concat(
    Organization,
    Person,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const itemOffered = new GraphQLUnionType({
  name: 'itemOffered',
  types: [].concat(
    Service,
    Product,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const acceptedPaymentMethod = new GraphQLUnionType({
  name: 'acceptedPaymentMethod',
  types: [].concat(
    LoanOrCredit,
    PaymentMethod,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const eligibleRegion = new GraphQLUnionType({
  name: 'eligibleRegion',
  types: [].concat(
    Place,
    GeoShape,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const reviewedBy = new GraphQLUnionType({
  name: 'reviewedBy',
  types: [].concat(
    Organization,
    Person,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const agent = new GraphQLUnionType({
  name: 'agent',
  types: [].concat(
    Organization,
    Person,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const participant = new GraphQLUnionType({
  name: 'participant',
  types: [].concat(
    Organization,
    Person,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const dataFeedElement = new GraphQLUnionType({
  name: 'dataFeedElement',
  types: [].concat(
    DataFeedItem,
    Thing,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const height = new GraphQLUnionType({
  name: 'height',
  types: [].concat(
    Distance,
    QuantitativeValue,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const width = new GraphQLUnionType({
  name: 'width',
  types: [].concat(
    Distance,
    QuantitativeValue,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const underName = new GraphQLUnionType({
  name: 'underName',
  types: [].concat(
    Organization,
    Person,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const bookingAgent = new GraphQLUnionType({
  name: 'bookingAgent',
  types: [].concat(
    Organization,
    Person,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const depth = new GraphQLUnionType({
  name: 'depth',
  types: [].concat(
    Distance,
    QuantitativeValue,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const coursePrerequisites = new GraphQLUnionType({
  name: 'coursePrerequisites',
  types: [].concat(
    Course,
    AlignmentObject,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const itemListElement = new GraphQLUnionType({
  name: 'itemListElement',
  types: [].concat(
    ListItem,
    Thing,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const byArtist = new GraphQLUnionType({
  name: 'byArtist',
  types: [].concat(
    MusicGroup,
    Person,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const track = new GraphQLUnionType({
  name: 'track',
  types: [].concat(
    MusicRecording,
    ItemList,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const workLocation = new GraphQLUnionType({
  name: 'workLocation',
  types: [].concat(
    Place,
    ContactPoint,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const alumniOf = new GraphQLUnionType({
  name: 'alumniOf',
  types: [].concat(
    Organization,
    EducationalOrganization,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const homeLocation = new GraphQLUnionType({
  name: 'homeLocation',
  types: [].concat(
    Place,
    ContactPoint,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const netWorth = new GraphQLUnionType({
  name: 'netWorth',
  types: [].concat(
    PriceSpecification,
    MonetaryAmount,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const recipient = new GraphQLUnionType({
  name: 'recipient',
  types: [].concat(
    Organization,
    Audience,
    Person,
    ContactPoint,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const bed = new GraphQLUnionType({
  name: 'bed',
  types: [].concat(
    BedType,
    BedDetails,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const offeredBy = new GraphQLUnionType({
  name: 'offeredBy',
  types: [].concat(
    Organization,
    Person,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const grantee = new GraphQLUnionType({
  name: 'grantee',
  types: [].concat(
    Organization,
    Audience,
    Person,
    ContactPoint,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const musicBy = new GraphQLUnionType({
  name: 'musicBy',
  types: [].concat(
    MusicGroup,
    Person,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const gameLocation = new GraphQLUnionType({
  name: 'gameLocation',
  types: [].concat(
    Place,
    PostalAddress,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const endorsee = new GraphQLUnionType({
  name: 'endorsee',
  types: [].concat(
    Organization,
    Person,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const valueReference = new GraphQLUnionType({
  name: 'valueReference',
  types: [].concat(
    QualitativeValue,
    StructuredValue,
    QuantitativeValue,
    Enumeration,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const sender = new GraphQLUnionType({
  name: 'sender',
  types: [].concat(
    Organization,
    Audience,
    Person,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const creditedTo = new GraphQLUnionType({
  name: 'creditedTo',
  types: [].concat(
    Organization,
    Person,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const departureBusStop = new GraphQLUnionType({
  name: 'departureBusStop',
  types: [].concat(
    BusStation,
    BusStop,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const arrivalBusStop = new GraphQLUnionType({
  name: 'arrivalBusStop',
  types: [].concat(
    BusStation,
    BusStop,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const interactionService = new GraphQLUnionType({
  name: 'interactionService',
  types: [].concat(
    SoftwareApplication,
    WebSite,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const foodEstablishment = new GraphQLUnionType({
  name: 'foodEstablishment',
  types: [].concat(
    Place,
    FoodEstablishment,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const typeOfGood = new GraphQLUnionType({
  name: 'typeOfGood',
  types: [].concat(
    Service,
    Product,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const bccRecipient = new GraphQLUnionType({
  name: 'bccRecipient',
  types: [].concat(
    Organization,
    Person,
    ContactPoint,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const ccRecipient = new GraphQLUnionType({
  name: 'ccRecipient',
  types: [].concat(
    Organization,
    Person,
    ContactPoint,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const toRecipient = new GraphQLUnionType({
  name: 'toRecipient',
  types: [].concat(
    Organization,
    Audience,
    Person,
    ContactPoint,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const landlord = new GraphQLUnionType({
  name: 'landlord',
  types: [].concat(
    Organization,
    Person,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const baseSalary = new GraphQLUnionType({
  name: 'baseSalary',
  types: [].concat(
    PriceSpecification,
    MonetaryAmount,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const customer = new GraphQLUnionType({
  name: 'customer',
  types: [].concat(
    Organization,
    Person,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const merchant = new GraphQLUnionType({
  name: 'merchant',
  types: [].concat(
    Organization,
    Person,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const orderedItem = new GraphQLUnionType({
  name: 'orderedItem',
  types: [].concat(
    OrderItem,
    Product,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const acceptedAnswer = new GraphQLUnionType({
  name: 'acceptedAnswer',
  types: [].concat(
    ItemList,
    Answer,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const suggestedAnswer = new GraphQLUnionType({
  name: 'suggestedAnswer',
  types: [].concat(
    ItemList,
    Answer,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const lender = new GraphQLUnionType({
  name: 'lender',
  types: [].concat(
    Organization,
    Person,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const awayTeam = new GraphQLUnionType({
  name: 'awayTeam',
  types: [].concat(
    SportsTeam,
    Person,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const homeTeam = new GraphQLUnionType({
  name: 'homeTeam',
  types: [].concat(
    SportsTeam,
    Person,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const competitor = new GraphQLUnionType({
  name: 'competitor',
  types: [].concat(
    SportsTeam,
    Person,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const vendor = new GraphQLUnionType({
  name: 'vendor',
  types: [].concat(
    Organization,
    Person,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const minimumPaymentDue = new GraphQLUnionType({
  name: 'minimumPaymentDue',
  types: [].concat(
    PriceSpecification,
    MonetaryAmount,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const totalPaymentDue = new GraphQLUnionType({
  name: 'totalPaymentDue',
  types: [].concat(
    PriceSpecification,
    MonetaryAmount,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const menuAddOn = new GraphQLUnionType({
  name: 'menuAddOn',
  types: [].concat(
    MenuItem,
    MenuSection,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const followee = new GraphQLUnionType({
  name: 'followee',
  types: [].concat(
    Organization,
    Person,

  ),
  resolveType(value) {
    return value.__typename;
  }
});
const acquiredFrom = new GraphQLUnionType({
  name: 'acquiredFrom',
  types: [].concat(
    Organization,
    Person,

  ),
  resolveType(value) {
    return value.__typename;
  }
});

module.exports = {
  UserLikes,
  CafeOrCoffeeShop,
  FoodService,
  Recipe,
  Photograph,
  Volcano,
  SportsTeam,
  GroceryStore,
  Demand,
  AboutPage,
  ExerciseAction,
  UserPlays,
  StadiumOrArena,
  Trip,
  Dataset,
  Action,
  InsuranceAgency,
  AudioObject,
  TaxiReservation,
  Vehicle,
  AutoPartsStore,
  WPAdBlock,
  SomeProducts,
  MoveAction,
  CreativeWork,
  AddAction,
  JewelryStore,
  ViewAction,
  WPFooter,
  QAPage,
  LikeAction,
  PublicationEvent,
  Course,
  MobileApplication,
  ParcelService,
  BefriendAction,
  HowTo,
  PoliceStation,
  HealthClub,
  DrinkAction,
  DownloadAction,
  TireShop,
  Synagogue,
  AnimalShelter,
  WorkersUnion,
  HowToSection,
  MusicAlbum,
  AssessAction,
  Person,
  DeliveryChargeSpecification,
  LendAction,
  FoodEstablishment,
  ListenAction,
  TransferAction,
  NutritionInformation,
  SiteNavigationElement,
  Organization,
  DeleteAction,
  TradeAction,
  LegalService,
  VisualArtwork,
  Attorney,
  RsvpAction,
  GeneralContractor,
  Rating,
  ApartmentComplex,
  RegisterAction,
  HousePainter,
  WinAction,
  MovieRentalStore,
  WatchAction,
  PropertyValueSpecification,
  EducationEvent,
  ResumeAction,
  ToyStore,
  BedAndBreakfast,
  Suite,
  GenderType,
  InstallAction,
  Distillery,
  GiveAction,
  PostOffice,
  CheckoutPage,
  Accommodation,
  PerformingArtsTheater,
  AggregateOffer,
  Museum,
  HowToSupply,
  AutoRepair,
  ExerciseGym,
  Embassy,
  ProfilePage,
  DisagreeAction,
  DigitalDocumentPermission,
  ImageObject,
  ReservationPackage,
  SeaBodyOfWater,
  TrackAction,
  HomeAndConstructionBusiness,
  ProgramMembership,
  ControlAction,
  CheckAction,
  Game,
  DiscussionForumPosting,
  IceCreamShop,
  TouristAttraction,
  Car,
  PriceSpecification,
  AdministrativeArea,
  Season,
  DrawAction,
  PaymentCard,
  PublicationVolume,
  LocalBusiness,
  CancelAction,
  IgnoreAction,
  MusicRecording,
  MotorcycleDealer,
  CheckOutAction,
  BankAccount,
  Duration,
  RealEstateAgent,
  MapCategoryType,
  SportsOrganization,
  EndorseAction,
  EducationalOrganization,
  CableOrSatelliteService,
  CurrencyConversionService,
  HinduTemple,
  TVSeason,
  SearchResultsPage,
  UserBlocks,
  DanceEvent,
  BookStore,
  EntryPoint,
  SaleEvent,
  FoodEvent,
  OutletStore,
  OrderAction,
  InviteAction,
  TVEpisode,
  MusicGroup,
  AmusementPark,
  ContactPointOption,
  Casino,
  SubscribeAction,
  BusinessEvent,
  AgreeAction,
  GameServer,
  DepositAccount,
  DigitalDocumentPermissionType,
  Motel,
  Painting,
  ChildCare,
  InternetCafe,
  PaymentStatusType,
  MusicAlbumReleaseType,
  Pharmacy,
  DefenceEstablishment,
  BreadcrumbList,
  Church,
  LiquorStore,
  PublicationIssue,
  GameServerStatus,
  Article,
  UserTweets,
  Enumeration,
  WebPageElement,
  VideoGame,
  UserInteraction,
  MobilePhoneStore,
  Airline,
  LiveBlogPosting,
  BikeStore,
  BuddhistTemple,
  MenuSection,
  AutoRental,
  AchieveAction,
  HotelRoom,
  BroadcastEvent,
  Zoo,
  WebSite,
  Movie,
  EventReservation,
  OrganizeAction,
  Audience,
  Restaurant,
  UseAction,
  APIReference,
  DepartmentStore,
  FilmAction,
  SoftwareApplication,
  Code,
  SportingGoodsStore,
  TextDigitalDocument,
  QuantitativeValueDistribution,
  Waterfall,
  OfficeEquipmentStore,
  AutoWash,
  PlanAction,
  MovieTheater,
  Bakery,
  GatedResidenceCommunity,
  Country,
  PlaceOfWorship,
  HowToTip,
  ComputerLanguage,
  PerformanceRole,
  UnitPriceSpecification,
  PerformAction,
  BedType,
  ClothingStore,
  Mountain,
  CivicStructure,
  ReceiveAction,
  VideoGameClip,
  MusicStore,
  Crematorium,
  QuoteAction,
  ListItem,
  ContactPage,
  WebApplication,
  BroadcastFrequencySpecification,
  BlogPosting,
  LodgingReservation,
  PreOrderAction,
  MediaSubscription,
  PresentationDigitalDocument,
  Report,
  Book,
  OfferItemCondition,
  LocationFeatureSpecification,
  MusicRelease,
  TechArticle,
  Sculpture,
  ComputerStore,
  RadioStation,
  Map,
  GolfCourse,
  DepartAction,
  ActionAccessSpecification,
  Comment,
  ShoeStore,
  SuspendAction,
  WPSideBar,
  FlightReservation,
  AlignmentObject,
  SellAction,
  PetStore,
  OnDemandEvent,
  AutoDealer,
  ChooseAction,
  RestrictedDiet,
  GovernmentOffice,
  Place,
  QualitativeValue,
  SendAction,
  LeaveAction,
  GasStation,
  Mosque,
  CommentAction,
  Library,
  TouristInformationCenter,
  MusicComposition,
  ProfessionalService,
  Aquarium,
  SelfStorage,
  ScholarlyArticle,
  GeoShape,
  EntertainmentBusiness,
  BroadcastChannel,
  Florist,
  Mass,
  HowToTool,
  PaymentMethod,
  UserPlusOnes,
  Barcode,
  WebPage,
  Residence,
  UserPageVisits,
  Continent,
  BusTrip,
  UnRegisterAction,
  LoseAction,
  ShoppingCenter,
  Flight,
  HowToStep,
  OfferCatalog,
  CreativeWorkSeries,
  NightClub,
  ConfirmAction,
  DataFeed,
  State,
  Playground,
  AppendAction,
  InteractionCounter,
  ParkingFacility,
  CookAction,
  AuthorizeAction,
  BookSeries,
  UserDownloads,
  PawnShop,
  AssignAction,
  PayAction,
  HighSchool,
  TypeAndQuantityNode,
  SteeringPositionValue,
  SportsClub,
  TrainTrip,
  Bridge,
  TrainStation,
  Conversation,
  DatedMoneySpecification,
  ReserveAction,
  SoftwareSourceCode,
  PaymentService,
  SpeakableSpecification,
  InteractAction,
  AMRadioChannel,
  AutoBodyShop,
  Permit,
  ConvenienceStore,
  School,
  TelevisionStation,
  HomeGoodsStore,
  LakeBodyOfWater,
  BodyOfWater,
  RadioSeries,
  MusicVideoObject,
  Beach,
  SpreadsheetDigitalDocument,
  HowToItem,
  ShareAction,
  WPHeader,
  LandmarksOrHistoricalBuildings,
  MarryAction,
  Notary,
  ReactAction,
  Message,
  InvestmentOrDeposit,
  DryCleaningOrLaundry,
  DeactivateAction,
  FastFoodRestaurant,
  DataFeedItem,
  OrderStatus,
  SocialMediaPosting,
  Park,
  VoteAction,
  BookFormatType,
  LoanOrCredit,
  ItemListOrderType,
  ComedyClub,
  ServiceChannel,
  ExhibitionEvent,
  RentAction,
  EmployeeRole,
  EmploymentAgency,
  PrependAction,
  FireStation,
  CourseInstance,
  Hotel,
  IndividualProduct,
  StructuredValue,
  RadioClip,
  Intangible,
  ElectronicsStore,
  Order,
  TVClip,
  NailSalon,
  ContactPoint,
  TelevisionChannel,
  GovernmentBuilding,
  EmergencyService,
  FinancialService,
  VideoObject,
  Menu,
  Periodical,
  MovieSeries,
  Series,
  Electrician,
  WarrantyScope,
  CollectionPage,
  PhotographAction,
  HealthAndBeautyBusiness,
  LegislativeBuilding,
  UserCheckins,
  VideoGameSeries,
  BroadcastService,
  WearAction,
  TravelAgency,
  Hostel,
  BankOrCreditUnion,
  Quantity,
  VideoGallery,
  EducationalAudience,
  CityHall,
  ComedyEvent,
  DonateAction,
  Brand,
  MovingCompany,
  Question,
  BorrowAction,
  GardenStore,
  ReviewAction,
  UserComments,
  PaintAction,
  Blog,
  SportsActivityLocation,
  WarrantyPromise,
  EmployerAggregateRating,
  Event,
  House,
  AdultEntertainment,
  DriveWheelConfigurationValue,
  Role,
  City,
  ConsumeAction,
  ScreeningEvent,
  ArriveAction,
  BookmarkAction,
  CreateAction,
  ScheduleAction,
  Dentist,
  DiscoverAction,
  EndorsementRating,
  Reservoir,
  MusicEvent,
  Store,
  MonetaryAmount,
  HairSalon,
  DaySpa,
  EngineSpecification,
  ActivateAction,
  EventVenue,
  RadioEpisode,
  ElementarySchool,
  ReplaceAction,
  CreditCard,
  OpeningHoursSpecification,
  DislikeAction,
  PlayAction,
  FAQPage,
  TieAction,
  Corporation,
  ItemList,
  DeliveryMethod,
  Winery,
  InformAction,
  ReturnAction,
  MeetingRoom,
  MonetaryAmountDistribution,
  JoinAction,
  RiverBodyOfWater,
  BuyAction,
  SearchAction,
  HVACBusiness,
  TaxiStand,
  ProductModel,
  CatholicChurch,
  MovieClip,
  ActionStatusType,
  WriteAction,
  MusicAlbumProductionType,
  ApplyAction,
  Locksmith,
  Landform,
  Episode,
  OceanBodyOfWater,
  MedicalOrganization,
  TrainReservation,
  MusicVenue,
  Review,
  PostalAddress,
  ClaimReview,
  CollegeOrUniversity,
  Clip,
  Seat,
  WantAction,
  ReadAction,
  Specialty,
  TaxiService,
  ItemAvailability,
  Ticket,
  Occupation,
  ArtGallery,
  Plumber,
  Preschool,
  RejectAction,
  TattooParlor,
  GeoCircle,
  BusinessFunction,
  Energy,
  FurnitureStore,
  BusStop,
  MotorcycleRepair,
  GovernmentPermit,
  InsertAction,
  Resort,
  Invoice,
  Table,
  CompoundPriceSpecification,
  PeopleAudience,
  GovernmentOrganization,
  FoodEstablishmentReservation,
  DataCatalog,
  PaymentChargeSpecification,
  BusReservation,
  Taxi,
  ItemPage,
  Physician,
  RsvpResponseType,
  OrderItem,
  BusinessEntityType,
  TipAction,
  HowToDirection,
  Apartment,
  NoteDigitalDocument,
  Service,
  Campground,
  TennisComplex,
  Thing,
  SubwayStation,
  Courthouse,
  ReservationStatusType,
  HardwareStore,
  AskAction,
  VisualArtsEvent,
  DigitalDocument,
  DanceGroup,
  BeautySalon,
  CommunicateAction,
  MenuItem,
  RoofingContractor,
  GovernmentService,
  DeliveryEvent,
  HobbyShop,
  FollowAction,
  ChildrensEvent,
  RVPark,
  SingleFamilyResidence,
  WholesaleStore,
  RentalCarReservation,
  TravelAction,
  OrganizationRole,
  SkiResort,
  AutomatedTeller,
  Canal,
  NGO,
  TVSeries,
  BarOrPub,
  FMRadioChannel,
  Distance,
  MusicPlaylist,
  QuantitativeValue,
  BedDetails,
  OwnershipInfo,
  MensClothingStore,
  AcceptAction,
  Language,
  NewsArticle,
  TheaterGroup,
  ParcelDelivery,
  BoardingPolicyType,
  Pond,
  Answer,
  Brewery,
  AllocateAction,
  ParentAudience,
  RadioChannel,
  Room,
  PublicSwimmingPool,
  JobPosting,
  MusicReleaseFormatType,
  FinancialProduct,
  PerformingGroup,
  MediaObject,
  Cemetery,
  AccountingService,
  CheckInAction,
  DayOfWeek,
  BusinessAudience,
  LodgingBusiness,
  Airport,
  EventStatusType,
  CreativeWorkSeason,
  Reservation,
  FindAction,
  RecyclingCenter,
  Hospital,
  Festival,
  LockerDelivery,
  RadioSeason,
  UpdateAction,
  AggregateRating,
  ReplyAction,
  EmailMessage,
  BusStation,
  BowlingAlley,
  ImageGallery,
  Offer,
  DataDownload,
  Product,
  CampingPitch,
  GeoCoordinates,
  MiddleSchool,
  AutomotiveBusiness,
  LiteraryEvent,
  SocialEvent,
  EatAction,
  TheaterEvent,
  TakeAction,
  SportsEvent,
  GamePlayMode,

};
